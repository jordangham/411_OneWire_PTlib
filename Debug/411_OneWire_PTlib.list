
411_OneWire_PTlib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae88  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001294  0800b028  0800b028  0001b028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2bc  0800c2bc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2c4  0800c2c4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2c4  0800c2c4  0001c2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2c8  0800c2c8  0001c2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000204  0800c4d0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  0800c4d0  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014644  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c3  00000000  00000000  00034878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00037240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  000384b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019677  00000000  00000000  00039630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ca  00000000  00000000  00052ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4af  00000000  00000000  00068e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006480  00000000  00000000  00107370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b010 	.word	0x0800b010

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	0800b010 	.word	0x0800b010

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800103a:	b29b      	uxth	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	605a      	str	r2, [r3, #4]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <usart_setup>:


uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <usart_setup+0x60>)
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <usart_setup+0x64>)
 8001078:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <usart_setup+0x60>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <usart_setup+0x60>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8001086:	4b11      	ldr	r3, [pc, #68]	; (80010cc <usart_setup+0x60>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <usart_setup+0x60>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <usart_setup+0x60>)
 8001094:	220c      	movs	r2, #12
 8001096:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <usart_setup+0x60>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <usart_setup+0x60>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <usart_setup+0x60>)
 80010a6:	f004 fbf4 	bl	8005892 <HAL_HalfDuplex_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d000      	beq.n	80010b2 <usart_setup+0x46>
	{
		//	    Error_Handler();
		__asm__("NOP");
 80010b0:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <usart_setup+0x60>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <usart_setup+0x60>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	60da      	str	r2, [r3, #12]
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000358 	.word	0x20000358
 80010d0:	40004400 	.word	0x40004400

080010d4 <owInit>:

void owInit(OneWire *ow) {
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80010e4:	e015      	b.n	8001112 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];      
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]
    k=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80010f4:	e007      	b.n	8001106 <owInit+0x32>
    r[k] = 0;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	3301      	adds	r3, #1
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	2b07      	cmp	r3, #7
 800110a:	ddf4      	ble.n	80010f6 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	dde6      	ble.n	80010e6 <owInit+0x12>
  }
  k=0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 800111c:	e008      	b.n	8001130 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	330c      	adds	r3, #12
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	3301      	adds	r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b07      	cmp	r3, #7
 8001134:	ddf3      	ble.n	800111e <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2240      	movs	r2, #64	; 0x40
 800113a:	609a      	str	r2, [r3, #8]

}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <owReadHandler>:

void owReadHandler() { //USART interrupt handler
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800114e:	f000 f850 	bl	80011f2 <getUsartIndex>
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  /* We check that we caused an interrupt due to RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <owReadHandler+0x70>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f003 0320 	and.w	r3, r3, #32
 800115e:	2b00      	cmp	r3, #0
 8001160:	d025      	beq.n	80011ae <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <owReadHandler+0x70>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d01f      	beq.n	80011ae <owReadHandler+0x66>

    /* We receive data from the periphery and reset the flag*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800116e:	bf00      	nop
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <owReadHandler+0x70>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f9      	beq.n	8001170 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800117c:	79fc      	ldrb	r4, [r7, #7]
 800117e:	480e      	ldr	r0, [pc, #56]	; (80011b8 <owReadHandler+0x70>)
 8001180:	f7ff ff52 	bl	8001028 <USART_ReceiveData>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <owReadHandler+0x74>)
 800118a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//reset flag response received after
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2201      	movs	r2, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	b25b      	sxtb	r3, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	b25a      	sxtb	r2, r3
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <owReadHandler+0x78>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	b25b      	sxtb	r3, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <owReadHandler+0x78>)
 80011ac:	701a      	strb	r2, [r3, #0]
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	20000224 	.word	0x20000224
 80011c0:	20000220 	.word	0x20000220

080011c4 <owResetCmd>:
 *
 * @param N usart -- chosen to implement 1wire usart
 * @return Returns 1 if there is someone on the bus and 0 otherwise
 */

  uint16_t owResetCmd() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint16_t owPresence;
	
	usart_setup(9600);
 80011ca:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80011ce:	f7ff ff4d 	bl	800106c <usart_setup>

  owSend(0xF0); // Send RESET send a reset pulse
 80011d2:	20f0      	movs	r0, #240	; 0xf0
 80011d4:	f000 f816 	bl	8001204 <owSend>
  owPresence = owEchoRead(); // We are waiting for PRESENCE on the bus and return what is
 80011d8:	f000 f854 	bl	8001284 <owEchoRead>
 80011dc:	4603      	mov	r3, r0
 80011de:	80fb      	strh	r3, [r7, #6]

	usart_setup(115200);// reconfigure UART speed
 80011e0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80011e4:	f7ff ff42 	bl	800106c <usart_setup>
  return owPresence;
 80011e8:	88fb      	ldrh	r3, [r7, #6]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <getUsartIndex>:

uint8_t getUsartIndex() {// looks at the UART number with which work will go
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <owSend>:

void owSend(uint16_t data) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());//set the flag if we get into the interrupt handler there it will be reset
 800120e:	f7ff fff0 	bl	80011f2 <getUsartIndex>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	2301      	movs	r3, #1
 8001218:	4093      	lsls	r3, r2
 800121a:	b25a      	sxtb	r2, r3
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <owSend+0x50>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	b25b      	sxtb	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	b25b      	sxtb	r3, r3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <owSend+0x50>)
 800122c:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);//send data
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	4619      	mov	r1, r3
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <owSend+0x54>)
 8001234:	f7ff ff08 	bl	8001048 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);//waiting for the transfer to end
 8001238:	bf00      	nop
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <owSend+0x58>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	2b40      	cmp	r3, #64	; 0x40
 8001246:	d1f8      	bne.n	800123a <owSend+0x36>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000220 	.word	0x20000220
 8001258:	40004400 	.word	0x40004400
 800125c:	20000358 	.word	0x20000358

08001260 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {//we read we got a one or zero in response
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0; //if 0xFF came, then bit = 1, something else bit = 0
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	2bff      	cmp	r3, #255	; 0xff
 800126e:	bf0c      	ite	eq
 8001270:	2301      	moveq	r3, #1
 8001272:	2300      	movne	r3, #0
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <owEchoRead>:

uint16_t owEchoRead() {//
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();//get USART number
 800128a:	f7ff ffb2 	bl	80011f2 <getUsartIndex>
 800128e:	4603      	mov	r3, r0
 8001290:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);// wait until someone answers but no more pause
 8001298:	bf00      	nop
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <owEchoRead+0x48>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	797b      	ldrb	r3, [r7, #5]
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <owEchoRead+0x36>
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	1e5a      	subs	r2, r3, #1
 80012b4:	80fa      	strh	r2, [r7, #6]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1ef      	bne.n	800129a <owEchoRead+0x16>
  return rc_buffer[i];//depending on the UART number used
 80012ba:	797b      	ldrb	r3, [r7, #5]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <owEchoRead+0x4c>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	b29b      	uxth	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000220 	.word	0x20000220
 80012d0:	20000224 	.word	0x20000224

080012d4 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {//decompose 1 byte into 8 bytes, encode so to speak in a package for 1wire
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e014      	b.n	8001310 <byteToBits+0x3c>
    if (ow_byte & 0x01) {//if current bit in byte ==1 then
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <byteToBits+0x24>
      *bits = WIRE_1; //replace with a number which, when transmitted via UART for 1 wire, will be unity t.e 0xFF
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e002      	b.n	80012fe <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;// same for 0
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1; //shift the processed bit
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	085b      	lsrs	r3, r3, #1
 8001308:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d9e7      	bls.n	80012e6 <byteToBits+0x12>
  }
  return bits; //return an array to pass
 8001316:	683b      	ldr	r3, [r7, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <owSendByte>:
/**
 * The method sends sequentially 8 bytes, one for each bit in data
 * @param usart -- selected for 1wire UART emulation
 * @param d -- data
 */
void owSendByte(uint8_t d) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);//convert bytes to bits "byte array for UART transmission and 1WIRE emulation"
 800132e:	f107 020c 	add.w	r2, r7, #12
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4611      	mov	r1, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffcc 	bl	80012d4 <byteToBits>
  for (i = 0; i < 8; ++i) {
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e00b      	b.n	800135a <owSendByte+0x36>
    owSend(data[i]);
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	4413      	add	r3, r2
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff58 	bl	8001204 <owSend>
  for (i = 0; i < 8; ++i) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b07      	cmp	r3, #7
 800135e:	ddf0      	ble.n	8001342 <owSendByte+0x1e>
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <owCRC>:
  }
  return target_byte; //return the received byte
}

/* CRC8 count of array mas of length Len */
uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	460b      	mov	r3, r1
 8001374:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {  // bit count in byte
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e018      	b.n	80013c0 <owCRC+0x56>
      fb = crc ^ dat;
 800138e:	7b7a      	ldrb	r2, [r7, #13]
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	4053      	eors	r3, r2
 8001394:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	085b      	lsrs	r3, r3, #1
 80013a2:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	085b      	lsrs	r3, r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c; // polynomial
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <owCRC+0x50>
 80013b0:	7b7b      	ldrb	r3, [r7, #13]
 80013b2:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80013b6:	43db      	mvns	r3, r3
 80013b8:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {  // bit count in byte
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	3301      	adds	r3, #1
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9e3      	bls.n	800138e <owCRC+0x24>
    }
    st_byt++;
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	3301      	adds	r3, #1
 80013ca:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len); // byte count in array
 80013cc:	7b3a      	ldrb	r2, [r7, #12]
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d3d4      	bcc.n	800137e <owCRC+0x14>
  return crc;
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);                        
 80013ea:	2107      	movs	r1, #7
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffbc 	bl	800136a <owCRC>
 80013f2:	4603      	mov	r3, r0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <hasNextRom>:
 * return 0 if hasn't
 * return -1 if error reading happened
 *
 * convert to callback functions to respond to errors
 */
int hasNextRom(OneWire *ow, uint8_t *ROM) {//
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) { //is there anyone on the bus
 8001414:	f7ff fed6 	bl	80011c4 <owResetCmd>
 8001418:	4603      	mov	r3, r0
 800141a:	2bf0      	cmp	r3, #240	; 0xf0
 800141c:	d101      	bne.n	8001422 <hasNextRom+0x26>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e097      	b.n	8001552 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);//
 8001422:	20f0      	movs	r0, #240	; 0xf0
 8001424:	f7ff ff7e 	bl	8001324 <owSendByte>
  do {
		uint8_t answerBit =0;
 8001428:	2300      	movs	r3, #0
 800142a:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ); // read direct bit
 8001440:	20ff      	movs	r0, #255	; 0xff
 8001442:	f7ff fedf 	bl	8001204 <owSend>
    cB = owReadSlot(owEchoRead());//response from the sensor
 8001446:	f7ff ff1d 	bl	8001284 <owEchoRead>
 800144a:	4603      	mov	r3, r0
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff07 	bl	8001260 <owReadSlot>
 8001452:	4603      	mov	r3, r0
 8001454:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ); // read inverted bit
 8001456:	20ff      	movs	r0, #255	; 0xff
 8001458:	f7ff fed4 	bl	8001204 <owSend>
    cmp_cB = owReadSlot(owEchoRead());//response from the sensor
 800145c:	f7ff ff12 	bl	8001284 <owEchoRead>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fefc 	bl	8001260 <owReadSlot>
 8001468:	4603      	mov	r3, r0
 800146a:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)//compare two answers
 800146c:	7afa      	ldrb	r2, [r7, #11]
 800146e:	7abb      	ldrb	r3, [r7, #10]
 8001470:	429a      	cmp	r2, r3
 8001472:	d105      	bne.n	8001480 <hasNextRom+0x84>
 8001474:	7afb      	ldrb	r3, [r7, #11]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d102      	bne.n	8001480 <hasNextRom+0x84>
      return -1;//error nobody answered
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e068      	b.n	8001552 <hasNextRom+0x156>
    if (cB != cmp_cB) { //normal situation came either 10 or 01
 8001480:	7afa      	ldrb	r2, [r7, #11]
 8001482:	7abb      	ldrb	r3, [r7, #10]
 8001484:	429a      	cmp	r2, r3
 8001486:	d002      	beq.n	800148e <hasNextRom+0x92>
      searchDirection = cB;//choose in which direction we will move further
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	75bb      	strb	r3, [r7, #22]
 800148c:	e023      	b.n	80014d6 <hasNextRom+0xda>
			} else {//collision came 00 i.e. the current bit for ROMs is different
				if (ui32BitNumber == ow->lastDiscrepancy)//if the current position of the collision is equal to the previous one
 800148e:	7ffa      	ldrb	r2, [r7, #31]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	d102      	bne.n	800149e <hasNextRom+0xa2>
        searchDirection = 1;//choose in which direction we will move further
 8001498:	2301      	movs	r3, #1
 800149a:	75bb      	strb	r3, [r7, #22]
 800149c:	e01b      	b.n	80014d6 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {//if we sewed on
 800149e:	7ffa      	ldrb	r2, [r7, #31]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dd02      	ble.n	80014ae <hasNextRom+0xb2>
          searchDirection = 0;//choose in which direction we will move further
 80014a8:	2300      	movs	r3, #0
 80014aa:	75bb      	strb	r3, [r7, #22]
 80014ac:	e00e      	b.n	80014cc <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	330c      	adds	r3, #12
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	fa42 f303 	asr.w	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80014cc:	7dbb      	ldrb	r3, [r7, #22]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;//remember the fork
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	61bb      	str	r3, [r7, #24]
      }
    }
    // save the beat
    if (searchDirection)
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00e      	beq.n	80014fa <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;//set a bit in the current byte byte
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2101      	movs	r1, #1
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);// decide who to turn off
 80014fa:	7dbb      	ldrb	r3, [r7, #22]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <hasNextRom+0x108>
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <hasNextRom+0x10a>
 8001504:	23ff      	movs	r3, #255	; 0xff
 8001506:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);//we cut down the "interfering" devices
 8001508:	7d7b      	ldrb	r3, [r7, #21]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe79 	bl	8001204 <owSend>
    ui32BitNumber++;//looking for the next beat
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	3301      	adds	r3, #1
 8001516:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);//until the whole ROM is found all bits
 8001518:	7ffb      	ldrb	r3, [r7, #31]
 800151a:	2b3f      	cmp	r3, #63	; 0x3f
 800151c:	d984      	bls.n	8001428 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;//remember the fork
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8001524:	e00b      	b.n	800153e <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];//remember last rom
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	441a      	add	r2, r3
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	7811      	ldrb	r1, [r2, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	460a      	mov	r2, r1
 8001536:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3301      	adds	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b06      	cmp	r3, #6
 8001542:	d9f0      	bls.n	8001526 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <owSearchCmd>:

// Returns the number of devices on the bus, or an error code if the value is less than 0
int owSearchCmd(OneWire *ow) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fdb4 	bl	80010d4 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device])); //we pass a pointer to the structure where to put the next.ROM
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ff40 	bl	80013fc <hasNextRom>
 800157c:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da02      	bge.n	800158a <owSearchCmd+0x30>
      return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	e009      	b.n	800159e <owSearchCmd+0x44>
    device++;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);//we are looking for while someone is there and these someone is no more define
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <owSearchCmd+0x42>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	dde7      	ble.n	800156c <owSearchCmd+0x12>
		return device;//return the serial number of the sensor (device) on the bus
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <get_ROMid>:
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}


int get_ROMid (void){
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {    // is anybody on the bus?
 80015ae:	f7ff fe09 	bl	80011c4 <owResetCmd>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2bf0      	cmp	r3, #240	; 0xf0
 80015b6:	d079      	beq.n	80016ac <get_ROMid+0x104>
		devices = owSearchCmd(&ow);        // get the ROMid in the bus or return an error code
 80015b8:	484e      	ldr	r0, [pc, #312]	; (80016f4 <get_ROMid+0x14c>)
 80015ba:	f7ff ffce 	bl	800155a <owSearchCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <get_ROMid+0x150>)
 80015c4:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80015c6:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <get_ROMid+0x150>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d113      	bne.n	80015f6 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <get_ROMid+0x154>)
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <get_ROMid+0x158>)
 80015d2:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <get_ROMid+0x15c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e005      	b.n	80015e8 <get_ROMid+0x40>
					__asm__("nop");
 80015dc:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)    /* Wait a bit. */
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <get_ROMid+0x15c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a47      	ldr	r2, [pc, #284]	; (8001704 <get_ROMid+0x15c>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b46      	ldr	r3, [pc, #280]	; (8001704 <get_ROMid+0x15c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <get_ROMid+0x154>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d3f3      	bcc.n	80015dc <get_ROMid+0x34>
				pDelay = 1000000;
 80015f4:	e7eb      	b.n	80015ce <get_ROMid+0x26>
			}

		}
		i = 0;
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <get_ROMid+0x15c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {//console output all found ROMs
 80015fc:	e04f      	b.n	800169e <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <get_ROMid+0x15c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4a3b      	ldr	r2, [pc, #236]	; (80016f4 <get_ROMid+0x14c>)
 8001606:	4413      	add	r3, r2
 8001608:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fee9 	bl	80013e2 <owCRC8>
 8001610:	4603      	mov	r3, r0
 8001612:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	79db      	ldrb	r3, [r3, #7]
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	429a      	cmp	r2, r3
 800161c:	d101      	bne.n	8001622 <get_ROMid+0x7a>
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <get_ROMid+0x160>)
 8001620:	e000      	b.n	8001624 <get_ROMid+0x7c>
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <get_ROMid+0x164>)
 8001624:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <get_ROMid+0x168>)
 8001626:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <get_ROMid+0x15c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <get_ROMid+0x16c>)
 8001630:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461e      	mov	r6, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	799b      	ldrb	r3, [r3, #6]
 800163c:	469c      	mov	ip, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	795b      	ldrb	r3, [r3, #5]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	791b      	ldrb	r3, [r3, #4]
 8001648:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800164e:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001654:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800165a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8001660:	9305      	str	r3, [sp, #20]
 8001662:	9504      	str	r5, [sp, #16]
 8001664:	9403      	str	r4, [sp, #12]
 8001666:	9002      	str	r0, [sp, #8]
 8001668:	9101      	str	r1, [sp, #4]
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	4663      	mov	r3, ip
 800166e:	4632      	mov	r2, r6
 8001670:	4929      	ldr	r1, [pc, #164]	; (8001718 <get_ROMid+0x170>)
 8001672:	482a      	ldr	r0, [pc, #168]	; (800171c <get_ROMid+0x174>)
 8001674:	f005 feda 	bl	800742c <siprintf>

			if (crc != r->crc) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	79db      	ldrb	r3, [r3, #7]
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	429a      	cmp	r2, r3
 8001680:	d008      	beq.n	8001694 <get_ROMid+0xec>
				devInfo.device = i;
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <get_ROMid+0x15c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <get_ROMid+0x16c>)
 800168a:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 800168c:	4924      	ldr	r1, [pc, #144]	; (8001720 <get_ROMid+0x178>)
 800168e:	4823      	ldr	r0, [pc, #140]	; (800171c <get_ROMid+0x174>)
 8001690:	f005 fecc 	bl	800742c <siprintf>
		for (; i < devices; i++) {//console output all found ROMs
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <get_ROMid+0x15c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <get_ROMid+0x15c>)
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <get_ROMid+0x150>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <get_ROMid+0x15c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8a8      	bhi.n	80015fe <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <get_ROMid+0x154>)
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <get_ROMid+0x158>)
 80016b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80016b2:	4b14      	ldr	r3, [pc, #80]	; (8001704 <get_ROMid+0x15c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e005      	b.n	80016c6 <get_ROMid+0x11e>
		__asm__("nop");
 80016ba:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <get_ROMid+0x15c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <get_ROMid+0x15c>)
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <get_ROMid+0x15c>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <get_ROMid+0x154>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3f3      	bcc.n	80016ba <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <get_ROMid+0x168>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	490c      	ldr	r1, [pc, #48]	; (8001708 <get_ROMid+0x160>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd81 	bl	80001e0 <strcmp>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <get_ROMid+0x140>
 80016e4:	2300      	movs	r3, #0
 80016e6:	e001      	b.n	80016ec <get_ROMid+0x144>
	else return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	20000258 	.word	0x20000258
 80016f8:	20000254 	.word	0x20000254
 80016fc:	20000000 	.word	0x20000000
 8001700:	000f4240 	.word	0x000f4240
 8001704:	2000026c 	.word	0x2000026c
 8001708:	0800b028 	.word	0x0800b028
 800170c:	0800b030 	.word	0x0800b030
 8001710:	20000270 	.word	0x20000270
 8001714:	20000230 	.word	0x20000230
 8001718:	0800b03c 	.word	0x0800b03c
 800171c:	20000234 	.word	0x20000234
 8001720:	0800b064 	.word	0x0800b064

08001724 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern float Temp[MAXDEVICES_ON_THE_BUS];

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim) / 2;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	085b      	lsrs	r3, r3, #1
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001736:	6013      	str	r3, [r2, #0]
	if (counter > 30000)
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001740:	4293      	cmp	r3, r2
 8001742:	d906      	bls.n	8001752 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		__HAL_TIM_SetCounter(&htim3,0);
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2200      	movs	r2, #0
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
		counter=0;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
	}
	if (counter > counter_limit)
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 800175a:	4293      	cmp	r3, r2
 800175c:	d90a      	bls.n	8001774 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		__HAL_TIM_SetCounter(&htim3, counter_limit * 2);
 800175e:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001762:	005a      	lsls	r2, r3, #1
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
		counter=counter_limit;
 800176a:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 800176e:	461a      	mov	r2, r3
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001772:	601a      	str	r2, [r3, #0]
	}
	counter_position = (int16_t)counter;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_TIM_IC_CaptureCallback+0x68>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b21a      	sxth	r2, r3
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_TIM_IC_CaptureCallback+0x70>)
 800177c:	801a      	strh	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000468 	.word	0x20000468
 8001790:	20000310 	.word	0x20000310
 8001794:	2000046c 	.word	0x2000046c

08001798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800179c:	f001 f95c 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a0:	f000 f940 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a4:	f000 facc 	bl	8001d40 <MX_GPIO_Init>
  MX_DMA_Init();
 80017a8:	f000 faa2 	bl	8001cf0 <MX_DMA_Init>
  MX_I2C1_Init();
 80017ac:	f000 f9f4 	bl	8001b98 <MX_I2C1_Init>
  MX_ADC1_Init();
 80017b0:	f000 f9a0 	bl	8001af4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017b4:	f000 fa1e 	bl	8001bf4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80017b8:	f000 fa70 	bl	8001c9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT (&htim3, TIM_CHANNEL_ALL   );
 80017bc:	213c      	movs	r1, #60	; 0x3c
 80017be:	4888      	ldr	r0, [pc, #544]	; (80019e0 <main+0x248>)
 80017c0:	f003 fd14 	bl	80051ec <HAL_TIM_Encoder_Start_IT>
  /* Initialize stepper motor controller */
  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET); // set high for half step
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	4886      	ldr	r0, [pc, #536]	; (80019e4 <main+0x24c>)
 80017cc:	f002 fbaa 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET); // set for microstep
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d6:	4883      	ldr	r0, [pc, #524]	; (80019e4 <main+0x24c>)
 80017d8:	f002 fba4 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET); // set for microstep
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e2:	4880      	ldr	r0, [pc, #512]	; (80019e4 <main+0x24c>)
 80017e4:	f002 fb9e 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_SLEEP_GPIO_Port, S_SLEEP_Pin, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	487d      	ldr	r0, [pc, #500]	; (80019e4 <main+0x24c>)
 80017ee:	f002 fb99 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017f8:	487a      	ldr	r0, [pc, #488]	; (80019e4 <main+0x24c>)
 80017fa:	f002 fb93 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2102      	movs	r1, #2
 8001802:	4878      	ldr	r0, [pc, #480]	; (80019e4 <main+0x24c>)
 8001804:	f002 fb8e 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2104      	movs	r1, #4
 800180c:	4875      	ldr	r0, [pc, #468]	; (80019e4 <main+0x24c>)
 800180e:	f002 fb89 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001818:	4873      	ldr	r0, [pc, #460]	; (80019e8 <main+0x250>)
 800181a:	f002 fb83 	bl	8003f24 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800181e:	2064      	movs	r0, #100	; 0x64
 8001820:	f001 f98c 	bl	8002b3c <HAL_Delay>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	486f      	ldr	r0, [pc, #444]	; (80019e8 <main+0x250>)
 800182c:	f002 fb7a 	bl	8003f24 <HAL_GPIO_WritePin>

// OLED init
  SSD1306_Init(&oled);
 8001830:	486e      	ldr	r0, [pc, #440]	; (80019ec <main+0x254>)
 8001832:	f000 fb25 	bl	8001e80 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f000 fcc5 	bl	80021c8 <SSD1306_GotoXY>
  SSD1306_Puts("SH1106", &Font_11x18, SSD1306_COLOR_WHITE);
 800183e:	2201      	movs	r2, #1
 8001840:	496b      	ldr	r1, [pc, #428]	; (80019f0 <main+0x258>)
 8001842:	486c      	ldr	r0, [pc, #432]	; (80019f4 <main+0x25c>)
 8001844:	f000 fd56 	bl	80022f4 <SSD1306_Puts>
  HAL_ADC_Start(&hadc1);
 8001848:	486b      	ldr	r0, [pc, #428]	; (80019f8 <main+0x260>)
 800184a:	f001 f9df 	bl	8002c0c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	4869      	ldr	r0, [pc, #420]	; (80019f8 <main+0x260>)
 8001854:	f001 fa8e 	bl	8002d74 <HAL_ADC_PollForConversion>
  raw = HAL_ADC_GetValue(&hadc1);
 8001858:	4867      	ldr	r0, [pc, #412]	; (80019f8 <main+0x260>)
 800185a:	f001 fb16 	bl	8002e8a <HAL_ADC_GetValue>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b66      	ldr	r3, [pc, #408]	; (80019fc <main+0x264>)
 8001864:	601a      	str	r2, [r3, #0]
  voltage = raw /  187.3 ; // Umcu = 3.375V
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <main+0x264>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe72 	bl	8000554 <__aeabi_i2d>
 8001870:	a359      	add	r3, pc, #356	; (adr r3, 80019d8 <main+0x240>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7ff f801 	bl	800087c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4610      	mov	r0, r2
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff f9c9 	bl	8000c18 <__aeabi_d2f>
 8001886:	4603      	mov	r3, r0
 8001888:	4a5d      	ldr	r2, [pc, #372]	; (8001a00 <main+0x268>)
 800188a:	6013      	str	r3, [r2, #0]
  sprintf(text, "%1.2f", voltage);
 800188c:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <main+0x268>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe71 	bl	8000578 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	495a      	ldr	r1, [pc, #360]	; (8001a04 <main+0x26c>)
 800189c:	485a      	ldr	r0, [pc, #360]	; (8001a08 <main+0x270>)
 800189e:	f005 fdc5 	bl	800742c <siprintf>
  SSD1306_GotoXY (0, 20);
 80018a2:	2114      	movs	r1, #20
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 fc8f 	bl	80021c8 <SSD1306_GotoXY>
  SSD1306_Puts (text, &Font_11x18, 1);
 80018aa:	2201      	movs	r2, #1
 80018ac:	4950      	ldr	r1, [pc, #320]	; (80019f0 <main+0x258>)
 80018ae:	4856      	ldr	r0, [pc, #344]	; (8001a08 <main+0x270>)
 80018b0:	f000 fd20 	bl	80022f4 <SSD1306_Puts>
  SSD1306_Puts ("V", &Font_11x18, 1);
 80018b4:	2201      	movs	r2, #1
 80018b6:	494e      	ldr	r1, [pc, #312]	; (80019f0 <main+0x258>)
 80018b8:	4854      	ldr	r0, [pc, #336]	; (8001a0c <main+0x274>)
 80018ba:	f000 fd1b 	bl	80022f4 <SSD1306_Puts>
//  SSD1306_dim(127);
  SSD1306_UpdateScreen(); // update screen
 80018be:	f000 fbd3 	bl	8002068 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 80018c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c6:	f001 f939 	bl	8002b3c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d0:	484f      	ldr	r0, [pc, #316]	; (8001a10 <main+0x278>)
 80018d2:	f002 fb27 	bl	8003f24 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 80018d6:	e05e      	b.n	8001996 <main+0x1fe>
	  {
		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4841      	ldr	r0, [pc, #260]	; (80019e4 <main+0x24c>)
 80018e0:	f002 fb20 	bl	8003f24 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4849      	ldr	r0, [pc, #292]	; (8001a10 <main+0x278>)
 80018ec:	f002 fb1a 	bl	8003f24 <HAL_GPIO_WritePin>
		  if (motor_position < counter_position)
 80018f0:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <main+0x27c>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <main+0x280>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dd22      	ble.n	8001946 <main+0x1ae>
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2104      	movs	r1, #4
 8001904:	4837      	ldr	r0, [pc, #220]	; (80019e4 <main+0x24c>)
 8001906:	f002 fb0d 	bl	8003f24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	2102      	movs	r1, #2
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <main+0x24c>)
 8001910:	f002 fb08 	bl	8003f24 <HAL_GPIO_WritePin>
			  motor_position = motor_position + 1 ;
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <main+0x280>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	4a3f      	ldr	r2, [pc, #252]	; (8001a18 <main+0x280>)
 800191c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2102      	movs	r1, #2
 8001922:	4830      	ldr	r0, [pc, #192]	; (80019e4 <main+0x24c>)
 8001924:	f002 fafe 	bl	8003f24 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <main+0x284>)
 800192a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800192e:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001930:	e004      	b.n	800193c <main+0x1a4>
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <main+0x284>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3b01      	subs	r3, #1
 8001938:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <main+0x284>)
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <main+0x284>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f6      	bne.n	8001932 <main+0x19a>
 8001944:	e021      	b.n	800198a <main+0x1f2>
		  }
		  else
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <main+0x24c>)
 800194c:	f002 faea 	bl	8003f24 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	4823      	ldr	r0, [pc, #140]	; (80019e4 <main+0x24c>)
 8001956:	f002 fae5 	bl	8003f24 <HAL_GPIO_WritePin>
			  motor_position = motor_position - 1 ;
 800195a:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <main+0x280>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	4a2d      	ldr	r2, [pc, #180]	; (8001a18 <main+0x280>)
 8001962:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2102      	movs	r1, #2
 8001968:	481e      	ldr	r0, [pc, #120]	; (80019e4 <main+0x24c>)
 800196a:	f002 fadb 	bl	8003f24 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <main+0x284>)
 8001970:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001974:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001976:	e004      	b.n	8001982 <main+0x1ea>
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <main+0x284>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <main+0x284>)
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <main+0x284>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f6      	bne.n	8001978 <main+0x1e0>
		  }
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001990:	481f      	ldr	r0, [pc, #124]	; (8001a10 <main+0x278>)
 8001992:	f002 fac7 	bl	8003f24 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <main+0x27c>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	461a      	mov	r2, r3
 800199e:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <main+0x280>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d198      	bne.n	80018d8 <main+0x140>
//	  sprintf(text, "%5i", counter_position);
//	  SSD1306_GotoXY(0, 30);
//	  SSD1306_Puts (text, &Font_11x18, 1);
//	  SSD1306_UpdateScreen();

	  rec_rom_id = get_ROMid();
 80019a6:	f7ff fdff 	bl	80015a8 <get_ROMid>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <main+0x288>)
 80019ae:	6013      	str	r3, [r2, #0]
	  SSD1306_Fill(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 fb91 	bl	80020d8 <SSD1306_Fill>
	  SSD1306_GotoXY(0, 0);
 80019b6:	2100      	movs	r1, #0
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fc05 	bl	80021c8 <SSD1306_GotoXY>
//	  sprintf(text, "%s %u", ow.ids);
	  //sprintf(textout1, "%s %u", name1, var1);
	  SSD1306_Puts (text, &Font_11x18, 1);
 80019be:	2201      	movs	r2, #1
 80019c0:	490b      	ldr	r1, [pc, #44]	; (80019f0 <main+0x258>)
 80019c2:	4811      	ldr	r0, [pc, #68]	; (8001a08 <main+0x270>)
 80019c4:	f000 fc96 	bl	80022f4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80019c8:	f000 fb4e 	bl	8002068 <SSD1306_UpdateScreen>

	  HAL_Delay (1000);
 80019cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d0:	f001 f8b4 	bl	8002b3c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80019d4:	e779      	b.n	80018ca <main+0x132>
 80019d6:	bf00      	nop
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	40676999 	.word	0x40676999
 80019e0:	20000310 	.word	0x20000310
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020000 	.word	0x40020000
 80019ec:	2000000c 	.word	0x2000000c
 80019f0:	20000004 	.word	0x20000004
 80019f4:	0800b084 	.word	0x0800b084
 80019f8:	20000274 	.word	0x20000274
 80019fc:	20000460 	.word	0x20000460
 8001a00:	20000464 	.word	0x20000464
 8001a04:	0800b08c 	.word	0x0800b08c
 8001a08:	20000018 	.word	0x20000018
 8001a0c:	0800b094 	.word	0x0800b094
 8001a10:	40020800 	.word	0x40020800
 8001a14:	2000046c 	.word	0x2000046c
 8001a18:	2000045c 	.word	0x2000045c
 8001a1c:	20000470 	.word	0x20000470
 8001a20:	20000474 	.word	0x20000474

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	; 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	2230      	movs	r2, #48	; 0x30
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 fe72 	bl	800671c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <SystemClock_Config+0xc8>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a26      	ldr	r2, [pc, #152]	; (8001aec <SystemClock_Config+0xc8>)
 8001a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <SystemClock_Config+0xc8>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <SystemClock_Config+0xcc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001a94:	230d      	movs	r3, #13
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001a98:	2368      	movs	r3, #104	; 0x68
 8001a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa4:	f107 0320 	add.w	r3, r7, #32
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f002 fea1 	bl	80047f0 <HAL_RCC_OscConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab4:	f000 f9de 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab8:	230f      	movs	r3, #15
 8001aba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abc:	2302      	movs	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	2103      	movs	r1, #3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 f903 	bl	8004ce0 <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ae0:	f000 f9c8 	bl	8001e74 <Error_Handler>
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	3750      	adds	r7, #80	; 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000

08001af4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001afa:	463b      	mov	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b08:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <MX_ADC1_Init+0x9c>)
 8001b0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b36:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <MX_ADC1_Init+0xa0>)
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b54:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b56:	f001 f815 	bl	8002b84 <HAL_ADC_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b60:	f000 f988 	bl	8001e74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_ADC1_Init+0x98>)
 8001b76:	f001 f995 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b80:	f000 f978 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000274 	.word	0x20000274
 8001b90:	40012000 	.word	0x40012000
 8001b94:	0f000001 	.word	0x0f000001

08001b98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <MX_I2C1_Init+0x54>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001ba4:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_I2C1_Init+0x58>)
 8001ba6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd4:	4804      	ldr	r0, [pc, #16]	; (8001be8 <MX_I2C1_Init+0x50>)
 8001bd6:	f002 f9bf 	bl	8003f58 <HAL_I2C_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001be0:	f000 f948 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200002bc 	.word	0x200002bc
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	00061a80 	.word	0x00061a80

08001bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	; 0x30
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fd8a 	bl	800671c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <MX_TIM3_Init+0xa4>)
 8001c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c32:	2280      	movs	r2, #128	; 0x80
 8001c34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c62:	f003 fa1d 	bl	80050a0 <HAL_TIM_Encoder_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c6c:	f000 f902 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_TIM3_Init+0xa0>)
 8001c7e:	f003 fd39 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c88:	f000 f8f4 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	; 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000310 	.word	0x20000310
 8001c98:	40000400 	.word	0x40000400

08001c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <MX_USART2_UART_Init+0x50>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x4c>)
 8001cd4:	f003 fd90 	bl	80057f8 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cde:	f000 f8c9 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000358 	.word	0x20000358
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <MX_DMA_Init+0x4c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2010      	movs	r0, #16
 8001d18:	f001 fbcd 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d1c:	2010      	movs	r0, #16
 8001d1e:	f001 fbe6 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2011      	movs	r0, #17
 8001d28:	f001 fbc5 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d2c:	2011      	movs	r0, #17
 8001d2e:	f001 fbde 	bl	80034ee <HAL_NVIC_EnableIRQ>

}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08a      	sub	sp, #40	; 0x28
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a41      	ldr	r2, [pc, #260]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a3a      	ldr	r2, [pc, #232]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <MX_GPIO_Init+0x124>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dcc:	4826      	ldr	r0, [pc, #152]	; (8001e68 <MX_GPIO_Init+0x128>)
 8001dce:	f002 f8a9 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001dd8:	4824      	ldr	r0, [pc, #144]	; (8001e6c <MX_GPIO_Init+0x12c>)
 8001dda:	f002 f8a3 	bl	8003f24 <HAL_GPIO_WritePin>
                          |MS1_Pin|MS2_Pin|MS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de4:	4822      	ldr	r0, [pc, #136]	; (8001e70 <MX_GPIO_Init+0x130>)
 8001de6:	f002 f89d 	bl	8003f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4819      	ldr	r0, [pc, #100]	; (8001e68 <MX_GPIO_Init+0x128>)
 8001e04:	f001 ff0a 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4815      	ldr	r0, [pc, #84]	; (8001e70 <MX_GPIO_Init+0x130>)
 8001e1c:	f001 fefe 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : S_SLEEP_Pin STEP_Pin DIR_Pin S_ENABLE_Pin
                           MS1_Pin MS2_Pin MS3_Pin */
  GPIO_InitStruct.Pin = S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 8001e20:	f24f 0307 	movw	r3, #61447	; 0xf007
 8001e24:	617b      	str	r3, [r7, #20]
                          |MS1_Pin|MS2_Pin|MS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <MX_GPIO_Init+0x12c>)
 8001e3a:	f001 feef 	bl	8003c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : S_RESET_Pin */
  GPIO_InitStruct.Pin = S_RESET_Pin;
 8001e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_RESET_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_GPIO_Init+0x130>)
 8001e58:	f001 fee0 	bl	8003c1c <HAL_GPIO_Init>

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020000 	.word	0x40020000

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <Error_Handler+0x8>
	...

08001e80 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(OledHandleTypedef *mydev)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

    /* Init I2C */
    dev = mydev;
 8001e88:	4a75      	ldr	r2, [pc, #468]	; (8002060 <SSD1306_Init+0x1e0>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]

    /* A little delay */
    uint32_t p = 2500;
 8001e8e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001e92:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001e94:	e002      	b.n	8001e9c <SSD1306_Init+0x1c>
        p--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <SSD1306_Init+0x16>

    /* Init LCD */
    SSD1306_WRITECOMMAND(0xAE); //display off
 8001ea2:	21ae      	movs	r1, #174	; 0xae
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f000 faa9 	bl	80023fc <ssd1306_I2C_Write>

    if(dev->type == SSD1306_I2C) {
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <SSD1306_Init+0x1e0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d107      	bne.n	8001ec4 <SSD1306_Init+0x44>
        SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 faa0 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10); //00:Horizontal, 01:Vertical,10:Page, 11:Invalid
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fa9c 	bl	80023fc <ssd1306_I2C_Write>
    }                           // Note: SH1106 has only Page mode

    SSD1306_WRITECOMMAND(0xB0); //Set Page Address for Page Addressing Mode,0-7
 8001ec4:	21b0      	movs	r1, #176	; 0xb0
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 fa98 	bl	80023fc <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) {
 8001ecc:	4b64      	ldr	r3, [pc, #400]	; (8002060 <SSD1306_Init+0x1e0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d104      	bne.n	8001ee0 <SSD1306_Init+0x60>
        SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f000 fa8f 	bl	80023fc <ssd1306_I2C_Write>
 8001ede:	e003      	b.n	8001ee8 <SSD1306_Init+0x68>
    } else {
        SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306 ***
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f000 fa8a 	bl	80023fc <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001ee8:	2110      	movs	r1, #16
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 fa86 	bl	80023fc <ssd1306_I2C_Write>

    if(dev->orientation == 0) { //--- This is the "normal" direction
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <SSD1306_Init+0x1e0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	885b      	ldrh	r3, [r3, #2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <SSD1306_Init+0x8c>
        SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127
 8001efa:	21a0      	movs	r1, #160	; 0xa0
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 fa7d 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction 0 to 63
 8001f02:	21c0      	movs	r1, #192	; 0xc0
 8001f04:	2000      	movs	r0, #0
 8001f06:	f000 fa79 	bl	80023fc <ssd1306_I2C_Write>
 8001f0a:	e007      	b.n	8001f1c <SSD1306_Init+0x9c>
    } else {                    //--- This is the "upside down" direction
        SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 127 to 0
 8001f0c:	21a1      	movs	r1, #161	; 0xa1
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 fa74 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction 63 to 0
 8001f14:	21c8      	movs	r1, #200	; 0xc8
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 fa70 	bl	80023fc <ssd1306_I2C_Write>
    }
    if(dev->type == SH1106_I2C) {
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <SSD1306_Init+0x1e0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d103      	bne.n	8001f2e <SSD1306_Init+0xae>
        SSD1306_WRITECOMMAND(0x32); //--set pump voltage value to 8.0V (SH1106 only)
 8001f26:	2132      	movs	r1, #50	; 0x32
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 fa67 	bl	80023fc <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	2000      	movs	r0, #0
 8001f32:	f000 fa63 	bl	80023fc <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f36:	2181      	movs	r1, #129	; 0x81
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 fa5f 	bl	80023fc <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001f3e:	4b48      	ldr	r3, [pc, #288]	; (8002060 <SSD1306_Init+0x1e0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d104      	bne.n	8001f52 <SSD1306_Init+0xd2>
        SSD1306_WRITECOMMAND(0x80); //  POR value = 80 for SH1106
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 fa56 	bl	80023fc <ssd1306_I2C_Write>
 8001f50:	e003      	b.n	8001f5a <SSD1306_Init+0xda>
    } else if(SSD1306_HEIGHT == 32) {
        SSD1306_WRITECOMMAND(0x8F); // 0x8F for 32 line SSD1306
    } else {
        SSD1306_WRITECOMMAND(0xFF); // 0xFF for 64 line SSD1306
 8001f52:	21ff      	movs	r1, #255	; 0xff
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 fa51 	bl	80023fc <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xA4); // 0xa4,normal output 0xa5,highlight all pixels
 8001f5a:	21a4      	movs	r1, #164	; 0xa4
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 fa4d 	bl	80023fc <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001f62:	21a6      	movs	r1, #166	; 0xa6
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 fa49 	bl	80023fc <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001f6a:	21a8      	movs	r1, #168	; 0xa8
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 fa45 	bl	80023fc <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1); //*** 31 or 63
 8001f72:	213f      	movs	r1, #63	; 0x3f
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 fa41 	bl	80023fc <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8001f7a:	21d3      	movs	r1, #211	; 0xd3
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 fa3d 	bl	80023fc <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00); //  no offset
 8001f82:	2100      	movs	r1, #0
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 fa39 	bl	80023fc <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) { // SH1106 with 64 line display
 8001f8a:	4b35      	ldr	r3, [pc, #212]	; (8002060 <SSD1306_Init+0x1e0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d110      	bne.n	8001fb6 <SSD1306_Init+0x136>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f94:	21d5      	movs	r1, #213	; 0xd5
 8001f96:	2000      	movs	r0, #0
 8001f98:	f000 fa30 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x50); //  set frequency and divide ratio
 8001f9c:	2150      	movs	r1, #80	; 0x50
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 fa2c 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set dis-charge/pre-charge period
 8001fa4:	21d9      	movs	r1, #217	; 0xd9
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 fa28 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001fac:	2122      	movs	r1, #34	; 0x22
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f000 fa24 	bl	80023fc <ssd1306_I2C_Write>
 8001fb4:	e00f      	b.n	8001fd6 <SSD1306_Init+0x156>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
        SSD1306_WRITECOMMAND(0x80); //  set recommended divide ratio
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
        SSD1306_WRITECOMMAND(0xF1); //
    } else {                    // SSD1306 with 64 line display
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fb6:	21d5      	movs	r1, #213	; 0xd5
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fa1f 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xF0); //  set divide ratio
 8001fbe:	21f0      	movs	r1, #240	; 0xf0
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 fa1b 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001fc6:	21d9      	movs	r1, #217	; 0xd9
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f000 fa17 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001fce:	2122      	movs	r1, #34	; 0x22
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f000 fa13 	bl	80023fc <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001fd6:	21da      	movs	r1, #218	; 0xda
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f000 fa0f 	bl	80023fc <ssd1306_I2C_Write>
    if(SSD1306_HEIGHT == 64) {
        SSD1306_WRITECOMMAND(0x12); //*** 12:for 64 line
 8001fde:	2112      	movs	r1, #18
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f000 fa0b 	bl	80023fc <ssd1306_I2C_Write>
    } else {
        SSD1306_WRITECOMMAND(0x02); //*** 02: for 32 line
    }

    SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001fe6:	21db      	movs	r1, #219	; 0xdb
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f000 fa07 	bl	80023fc <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <SSD1306_Init+0x1e0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d10c      	bne.n	8002012 <SSD1306_Init+0x192>
        SSD1306_WRITECOMMAND(0x35); //  SH1106: 0x35 0.77xVcc
 8001ff8:	2135      	movs	r1, #53	; 0x35
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f9fe 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xAD); //--set DC-DC mode
 8002000:	21ad      	movs	r1, #173	; 0xad
 8002002:	2000      	movs	r0, #0
 8002004:	f000 f9fa 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8B); //  DC-DC converter ON
 8002008:	218b      	movs	r1, #139	; 0x8b
 800200a:	2000      	movs	r0, #0
 800200c:	f000 f9f6 	bl	80023fc <ssd1306_I2C_Write>
 8002010:	e00f      	b.n	8002032 <SSD1306_Init+0x1b2>
    } else {
        SSD1306_WRITECOMMAND(0x20); //  SSD1306: 0x20 0.77xVcc
 8002012:	2120      	movs	r1, #32
 8002014:	2000      	movs	r0, #0
 8002016:	f000 f9f1 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8D); //--Charge Pump Setting
 800201a:	218d      	movs	r1, #141	; 0x8d
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f9ed 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x14);	//  Enable Charge Pump
 8002022:	2114      	movs	r1, #20
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f9e9 	bl	80023fc <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x2E); //--Stop scrolling
 800202a:	212e      	movs	r1, #46	; 0x2e
 800202c:	2000      	movs	r0, #0
 800202e:	f000 f9e5 	bl	80023fc <ssd1306_I2C_Write>
    }
    SSD1306_WRITECOMMAND(0xAF); //--turn on SH1106/SSD1306 panel
 8002032:	21af      	movs	r1, #175	; 0xaf
 8002034:	2000      	movs	r0, #0
 8002036:	f000 f9e1 	bl	80023fc <ssd1306_I2C_Write>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f84c 	bl	80020d8 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 8002040:	f000 f812 	bl	8002068 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 8002044:	4b07      	ldr	r3, [pc, #28]	; (8002064 <SSD1306_Init+0x1e4>)
 8002046:	2200      	movs	r2, #0
 8002048:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SSD1306_Init+0x1e4>)
 800204c:	2200      	movs	r2, #0
 800204e:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SSD1306_Init+0x1e4>)
 8002052:	2201      	movs	r2, #1
 8002054:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return 1;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000878 	.word	0x20000878
 8002064:	2000087c 	.word	0x2000087c

08002068 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
    uint8_t m;

    for (m = 0; m < 8; m++) {
 800206e:	2300      	movs	r3, #0
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e024      	b.n	80020be <SSD1306_UpdateScreen+0x56>
        SSD1306_WRITECOMMAND(0xB0 + m);
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	3b50      	subs	r3, #80	; 0x50
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	2000      	movs	r0, #0
 800207e:	f000 f9bd 	bl	80023fc <ssd1306_I2C_Write>
        if(dev->type == SH1106_I2C) {
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <SSD1306_UpdateScreen+0x68>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d104      	bne.n	8002096 <SSD1306_UpdateScreen+0x2e>
            SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 800208c:	2102      	movs	r1, #2
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f9b4 	bl	80023fc <ssd1306_I2C_Write>
 8002094:	e003      	b.n	800209e <SSD1306_UpdateScreen+0x36>
        } else {
            SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306+ ***
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f000 f9af 	bl	80023fc <ssd1306_I2C_Write>
        }
        SSD1306_WRITECOMMAND(0x10);
 800209e:	2110      	movs	r1, #16
 80020a0:	2000      	movs	r0, #0
 80020a2:	f000 f9ab 	bl	80023fc <ssd1306_I2C_Write>
        /* Write multi data */
        ssd1306_I2C_WriteMulti(0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	01db      	lsls	r3, r3, #7
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <SSD1306_UpdateScreen+0x6c>)
 80020ac:	4413      	add	r3, r2
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	4619      	mov	r1, r3
 80020b2:	2040      	movs	r0, #64	; 0x40
 80020b4:	f000 f944 	bl	8002340 <ssd1306_I2C_WriteMulti>
    for (m = 0; m < 8; m++) {
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	3301      	adds	r3, #1
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b07      	cmp	r3, #7
 80020c2:	d9d7      	bls.n	8002074 <SSD1306_UpdateScreen+0xc>
    }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000878 	.word	0x20000878
 80020d4:	20000478 	.word	0x20000478

080020d8 <SSD1306_Fill>:
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <SSD1306_Fill+0x14>
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <SSD1306_Fill+0x16>
 80020ec:	23ff      	movs	r3, #255	; 0xff
 80020ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f2:	4619      	mov	r1, r3
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <SSD1306_Fill+0x2c>)
 80020f6:	f004 fb11 	bl	800671c <memset>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000478 	.word	0x20000478

08002108 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
 8002112:	460b      	mov	r3, r1
 8002114:	80bb      	strh	r3, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	70fb      	strb	r3, [r7, #3]
    if (
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	2b7f      	cmp	r3, #127	; 0x7f
 800211e:	d848      	bhi.n	80021b2 <SSD1306_DrawPixel+0xaa>
        x >= SSD1306_WIDTH ||
 8002120:	88bb      	ldrh	r3, [r7, #4]
 8002122:	2b3f      	cmp	r3, #63	; 0x3f
 8002124:	d845      	bhi.n	80021b2 <SSD1306_DrawPixel+0xaa>
        /* Error */
        return;
    }

    /* Check if pixels are inverted */
    if (SSD1306.Inverted) {
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <SSD1306_DrawPixel+0xb8>)
 8002128:	791b      	ldrb	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d006      	beq.n	800213c <SSD1306_DrawPixel+0x34>
        color = (SSD1306_COLOR_t)!color;
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	70fb      	strb	r3, [r7, #3]
    }

    /* Set color */
    if (color == SSD1306_COLOR_WHITE) {
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d11a      	bne.n	8002178 <SSD1306_DrawPixel+0x70>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	88bb      	ldrh	r3, [r7, #4]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	b298      	uxth	r0, r3
 800214a:	4603      	mov	r3, r0
 800214c:	01db      	lsls	r3, r3, #7
 800214e:	4413      	add	r3, r2
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <SSD1306_DrawPixel+0xbc>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	b25a      	sxtb	r2, r3
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	2101      	movs	r1, #1
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b259      	sxtb	r1, r3
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	4603      	mov	r3, r0
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4413      	add	r3, r2
 8002170:	b2c9      	uxtb	r1, r1
 8002172:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <SSD1306_DrawPixel+0xbc>)
 8002174:	54d1      	strb	r1, [r2, r3]
 8002176:	e01d      	b.n	80021b4 <SSD1306_DrawPixel+0xac>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	88bb      	ldrh	r3, [r7, #4]
 800217c:	08db      	lsrs	r3, r3, #3
 800217e:	b298      	uxth	r0, r3
 8002180:	4603      	mov	r3, r0
 8002182:	01db      	lsls	r3, r3, #7
 8002184:	4413      	add	r3, r2
 8002186:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <SSD1306_DrawPixel+0xbc>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	b25a      	sxtb	r2, r3
 800218c:	88bb      	ldrh	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	b25b      	sxtb	r3, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	b25b      	sxtb	r3, r3
 800219e:	4013      	ands	r3, r2
 80021a0:	b259      	sxtb	r1, r3
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	4603      	mov	r3, r0
 80021a6:	01db      	lsls	r3, r3, #7
 80021a8:	4413      	add	r3, r2
 80021aa:	b2c9      	uxtb	r1, r1
 80021ac:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <SSD1306_DrawPixel+0xbc>)
 80021ae:	54d1      	strb	r1, [r2, r3]
 80021b0:	e000      	b.n	80021b4 <SSD1306_DrawPixel+0xac>
        return;
 80021b2:	bf00      	nop
    }
}
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000087c 	.word	0x2000087c
 80021c4:	20000478 	.word	0x20000478

080021c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	460a      	mov	r2, r1
 80021d2:	80fb      	strh	r3, [r7, #6]
 80021d4:	4613      	mov	r3, r2
 80021d6:	80bb      	strh	r3, [r7, #4]
    /* Set write pointers */
    SSD1306.CurrentX = x;
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <SSD1306_GotoXY+0x28>)
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <SSD1306_GotoXY+0x28>)
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	8053      	strh	r3, [r2, #2]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	2000087c 	.word	0x2000087c

080021f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	4613      	mov	r3, r2
 8002202:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    /* Check available space in LCD */
    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002204:	4b3a      	ldr	r3, [pc, #232]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
    if (
 8002210:	2b7f      	cmp	r3, #127	; 0x7f
 8002212:	dc07      	bgt.n	8002224 <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002216:	885b      	ldrh	r3, [r3, #2]
 8002218:	461a      	mov	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002220:	2b3f      	cmp	r3, #63	; 0x3f
 8002222:	dd01      	ble.n	8002228 <SSD1306_Putc+0x34>
    ) {
        /* Error */
        return 0;
 8002224:	2300      	movs	r3, #0
 8002226:	e05e      	b.n	80022e6 <SSD1306_Putc+0xf2>
    }

    /* Go through font */
    for (i = 0; i < Font->FontHeight; i++) {
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e04b      	b.n	80022c6 <SSD1306_Putc+0xd2>
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	3b20      	subs	r3, #32
 8002236:	6839      	ldr	r1, [r7, #0]
 8002238:	7849      	ldrb	r1, [r1, #1]
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4619      	mov	r1, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	440b      	add	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++) {
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e030      	b.n	80022b4 <SSD1306_Putc+0xc0>
            if ((b << j) & 0x8000) {
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d010      	beq.n	8002284 <SSD1306_Putc+0x90>
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4413      	add	r3, r2
 800226c:	b298      	uxth	r0, r3
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002270:	885a      	ldrh	r2, [r3, #2]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	b29b      	uxth	r3, r3
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	79ba      	ldrb	r2, [r7, #6]
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff ff43 	bl	8002108 <SSD1306_DrawPixel>
 8002282:	e014      	b.n	80022ae <SSD1306_Putc+0xba>
            } else {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4413      	add	r3, r2
 800228e:	b298      	uxth	r0, r3
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <SSD1306_Putc+0xfc>)
 8002292:	885a      	ldrh	r2, [r3, #2]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4413      	add	r3, r2
 800229a:	b299      	uxth	r1, r3
 800229c:	79bb      	ldrb	r3, [r7, #6]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	f7ff ff2d 	bl	8002108 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++) {
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	3301      	adds	r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4293      	cmp	r3, r2
 80022be:	d3c8      	bcc.n	8002252 <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++) {
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	3301      	adds	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	461a      	mov	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d3ad      	bcc.n	800222e <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <SSD1306_Putc+0xfc>)
 80022d4:	881a      	ldrh	r2, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	4413      	add	r3, r2
 80022de:	b29a      	uxth	r2, r3
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <SSD1306_Putc+0xfc>)
 80022e2:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	2000087c 	.word	0x2000087c

080022f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str) {
 8002302:	e012      	b.n	800232a <SSD1306_Puts+0x36>
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str) {
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff71 	bl	80021f4 <SSD1306_Putc>
 8002312:	4603      	mov	r3, r0
 8002314:	461a      	mov	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d002      	beq.n	8002324 <SSD1306_Puts+0x30>
            /* Return error */
            return *str;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	e008      	b.n	8002336 <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e8      	bne.n	8002304 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	781b      	ldrb	r3, [r3, #0]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <ssd1306_I2C_WriteMulti>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(uint8_t reg, uint8_t* data, uint16_t count)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b0c7      	sub	sp, #284	; 0x11c
 8002344:	af02      	add	r7, sp, #8
 8002346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800234a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800234e:	6019      	str	r1, [r3, #0]
 8002350:	4611      	mov	r1, r2
 8002352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002356:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800235a:	4602      	mov	r2, r0
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002362:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002366:	460a      	mov	r2, r1
 8002368:	801a      	strh	r2, [r3, #0]
    uint8_t dt[256];
    dt[0] = reg;
 800236a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800236e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002372:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002376:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i = 0; i < count; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002384:	e015      	b.n	80023b2 <ssd1306_I2C_WriteMulti+0x72>
        dt[i+1] = data[i];
 8002386:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800238a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800238e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	441a      	add	r2, r3
 8002396:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800239a:	3301      	adds	r3, #1
 800239c:	7811      	ldrb	r1, [r2, #0]
 800239e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023a2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80023a6:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < count; i++)
 80023a8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023ac:	3301      	adds	r3, #1
 80023ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d8df      	bhi.n	8002386 <ssd1306_I2C_WriteMulti+0x46>
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, count+1, 20);
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <ssd1306_I2C_WriteMulti+0xb8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6898      	ldr	r0, [r3, #8]
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <ssd1306_I2C_WriteMulti+0xb8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	8899      	ldrh	r1, [r3, #4]
 80023d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f107 020c 	add.w	r2, r7, #12
 80023e4:	2414      	movs	r4, #20
 80023e6:	9400      	str	r4, [sp, #0]
 80023e8:	f001 fefa 	bl	80041e0 <HAL_I2C_Master_Transmit>
//  I2C1_Write(address, dt, count+1, 10);
}
 80023ec:	bf00      	nop
 80023ee:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000878 	.word	0x20000878

080023fc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t reg, uint8_t data)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	4603      	mov	r3, r0
 8002404:	460a      	mov	r2, r1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	71bb      	strb	r3, [r7, #6]
    uint8_t dt[2];
    dt[0] = reg;
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	733b      	strb	r3, [r7, #12]
    dt[1] = data;
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, 2, 20);
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <ssd1306_I2C_Write+0x3c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6898      	ldr	r0, [r3, #8]
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <ssd1306_I2C_Write+0x3c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	8899      	ldrh	r1, [r3, #4]
 8002420:	f107 020c 	add.w	r2, r7, #12
 8002424:	2314      	movs	r3, #20
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2302      	movs	r3, #2
 800242a:	f001 fed9 	bl	80041e0 <HAL_I2C_Master_Transmit>
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000878 	.word	0x20000878

0800243c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_MspInit+0x4c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_MspInit+0x4c>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_MspInit+0x4c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_MspInit+0x4c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_MspInit+0x4c>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_MspInit+0x4c>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_ADC_MspInit+0x7c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d127      	bne.n	80024fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024bc:	6453      	str	r3, [r2, #68]	; 0x44
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <HAL_ADC_MspInit+0x80>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024e6:	2302      	movs	r3, #2
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024ea:	2303      	movs	r3, #3
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_ADC_MspInit+0x84>)
 80024fa:	f001 fb8f 	bl	8003c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3728      	adds	r7, #40	; 0x28
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40012000 	.word	0x40012000
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000

08002514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <HAL_I2C_MspInit+0x84>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12b      	bne.n	800258e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_I2C_MspInit+0x88>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_I2C_MspInit+0x88>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_I2C_MspInit+0x88>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002552:	23c0      	movs	r3, #192	; 0xc0
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002556:	2312      	movs	r3, #18
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002562:	2304      	movs	r3, #4
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	4619      	mov	r1, r3
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <HAL_I2C_MspInit+0x8c>)
 800256e:	f001 fb55 	bl	8003c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_I2C_MspInit+0x88>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_I2C_MspInit+0x88>)
 800257c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_I2C_MspInit+0x88>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	; 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40005400 	.word	0x40005400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020400 	.word	0x40020400

080025a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <HAL_TIM_Encoder_MspInit+0x94>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d133      	bne.n	800262e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a14      	ldr	r2, [pc, #80]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_TIM_Encoder_MspInit+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025fe:	23c0      	movs	r3, #192	; 0xc0
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800260e:	2302      	movs	r3, #2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4809      	ldr	r0, [pc, #36]	; (8002640 <HAL_TIM_Encoder_MspInit+0x9c>)
 800261a:	f001 faff 	bl	8003c1c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	201d      	movs	r0, #29
 8002624:	f000 ff47 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002628:	201d      	movs	r0, #29
 800262a:	f000 ff60 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40000400 	.word	0x40000400
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_UART_MspInit+0x14c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	f040 8090 	bne.w	8002788 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	4b49      	ldr	r3, [pc, #292]	; (8002794 <HAL_UART_MspInit+0x150>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_UART_MspInit+0x150>)
 8002672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
 8002678:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_UART_MspInit+0x150>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_UART_MspInit+0x150>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	4a41      	ldr	r2, [pc, #260]	; (8002794 <HAL_UART_MspInit+0x150>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6313      	str	r3, [r2, #48]	; 0x30
 8002694:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_UART_MspInit+0x150>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026a0:	230c      	movs	r3, #12
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ac:	2303      	movs	r3, #3
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b0:	2307      	movs	r3, #7
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 0314 	add.w	r3, r7, #20
 80026b8:	4619      	mov	r1, r3
 80026ba:	4837      	ldr	r0, [pc, #220]	; (8002798 <HAL_UART_MspInit+0x154>)
 80026bc:	f001 faae 	bl	8003c1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026c0:	4b36      	ldr	r3, [pc, #216]	; (800279c <HAL_UART_MspInit+0x158>)
 80026c2:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <HAL_UART_MspInit+0x15c>)
 80026c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026c6:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_UART_MspInit+0x158>)
 80026c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026ce:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_UART_MspInit+0x158>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026d4:	4b31      	ldr	r3, [pc, #196]	; (800279c <HAL_UART_MspInit+0x158>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026da:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_UART_MspInit+0x158>)
 80026dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <HAL_UART_MspInit+0x158>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <HAL_UART_MspInit+0x158>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_UART_MspInit+0x158>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_UART_MspInit+0x158>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_UART_MspInit+0x158>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002700:	4826      	ldr	r0, [pc, #152]	; (800279c <HAL_UART_MspInit+0x158>)
 8002702:	f000 ff0f 	bl	8003524 <HAL_DMA_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800270c:	f7ff fbb2 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_UART_MspInit+0x158>)
 8002714:	639a      	str	r2, [r3, #56]	; 0x38
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_UART_MspInit+0x158>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_UART_MspInit+0x160>)
 800271e:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_UART_MspInit+0x164>)
 8002720:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002722:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002724:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002728:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800272a:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_UART_MspInit+0x160>)
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002738:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_UART_MspInit+0x160>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <HAL_UART_MspInit+0x160>)
 800275e:	f000 fee1 	bl	8003524 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002768:	f7ff fb84 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002770:	635a      	str	r2, [r3, #52]	; 0x34
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_UART_MspInit+0x160>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2026      	movs	r0, #38	; 0x26
 800277e:	f000 fe9a 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002782:	2026      	movs	r0, #38	; 0x26
 8002784:	f000 feb3 	bl	80034ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40004400 	.word	0x40004400
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	2000039c 	.word	0x2000039c
 80027a0:	40026088 	.word	0x40026088
 80027a4:	200003fc 	.word	0x200003fc
 80027a8:	400260a0 	.word	0x400260a0

080027ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <NMI_Handler+0x4>

080027b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <HardFault_Handler+0x4>

080027b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <MemManage_Handler+0x4>

080027be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <BusFault_Handler+0x4>

080027c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <UsageFault_Handler+0x4>

080027ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f8:	f000 f980 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <DMA1_Stream5_IRQHandler+0x10>)
 8002806:	f000 ffcd 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2000039c 	.word	0x2000039c

08002814 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DMA1_Stream6_IRQHandler+0x10>)
 800281a:	f000 ffc3 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200003fc 	.word	0x200003fc

08002828 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <TIM3_IRQHandler+0x10>)
 800282e:	f002 fd8b 	bl	8005348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000310 	.word	0x20000310

0800283c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	owReadHandler();
 8002840:	f7fe fc82 	bl	8001148 <owReadHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <USART2_IRQHandler+0x14>)
 8002846:	f003 f879 	bl	800593c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000358 	.word	0x20000358

08002854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	return 1;
 8002858:	2301      	movs	r3, #1
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_kill>:

int _kill(int pid, int sig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800286e:	f003 ff2b 	bl	80066c8 <__errno>
 8002872:	4603      	mov	r3, r0
 8002874:	2216      	movs	r2, #22
 8002876:	601a      	str	r2, [r3, #0]
	return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_exit>:

void _exit (int status)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff ffe7 	bl	8002864 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002896:	e7fe      	b.n	8002896 <_exit+0x12>

08002898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e00a      	b.n	80028c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028aa:	f3af 8000 	nop.w
 80028ae:	4601      	mov	r1, r0
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	60ba      	str	r2, [r7, #8]
 80028b6:	b2ca      	uxtb	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf0      	blt.n	80028aa <_read+0x12>
	}

return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e009      	b.n	80028f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3301      	adds	r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	dbf1      	blt.n	80028e4 <_write+0x12>
	}
	return len;
 8002900:	687b      	ldr	r3, [r7, #4]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <_close>:

int _close(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002932:	605a      	str	r2, [r3, #4]
	return 0;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <_isatty>:

int _isatty(int file)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	return 1;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	return 0;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <_sbrk+0x5c>)
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <_sbrk+0x60>)
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d102      	bne.n	8002996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002990:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <_sbrk+0x64>)
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <_sbrk+0x68>)
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d207      	bcs.n	80029b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a4:	f003 fe90 	bl	80066c8 <__errno>
 80029a8:	4603      	mov	r3, r0
 80029aa:	220c      	movs	r2, #12
 80029ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	e009      	b.n	80029c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <_sbrk+0x64>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <_sbrk+0x64>)
 80029c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20020000 	.word	0x20020000
 80029d4:	00000400 	.word	0x00000400
 80029d8:	20000884 	.word	0x20000884
 80029dc:	200008a0 	.word	0x200008a0

080029e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <SystemInit+0x20>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	4a05      	ldr	r2, [pc, #20]	; (8002a00 <SystemInit+0x20>)
 80029ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a0a:	490e      	ldr	r1, [pc, #56]	; (8002a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a20:	4c0b      	ldr	r4, [pc, #44]	; (8002a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a2e:	f7ff ffd7 	bl	80029e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a32:	f003 fe4f 	bl	80066d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a36:	f7fe feaf 	bl	8001798 <main>
  bx  lr    
 8002a3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002a48:	0800c2cc 	.word	0x0800c2cc
  ldr r2, =_sbss
 8002a4c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002a50:	2000089c 	.word	0x2000089c

08002a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <ADC_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_Init+0x40>)
 8002a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_Init+0x40>)
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_Init+0x40>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f000 fd0d 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f000 f808 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8c:	f7ff fcd6 	bl	800243c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x54>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd25 	bl	800350a <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 fced 	bl	80034b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_InitTick+0x5c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000024 	.word	0x20000024
 8002af4:	2000002c 	.word	0x2000002c
 8002af8:	20000028 	.word	0x20000028

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000002c 	.word	0x2000002c
 8002b20:	20000888 	.word	0x20000888

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000888 	.word	0x20000888

08002b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff ffee 	bl	8002b24 <HAL_GetTick>
 8002b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d005      	beq.n	8002b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_Delay+0x44>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b62:	bf00      	nop
 8002b64:	f7ff ffde 	bl	8002b24 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d8f7      	bhi.n	8002b64 <HAL_Delay+0x28>
  {
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	2000002c 	.word	0x2000002c

08002b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e033      	b.n	8002c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7ff fc72 	bl	800248c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bca:	f023 0302 	bic.w	r3, r3, #2
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa96 	bl	8003108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f023 0303 	bic.w	r3, r3, #3
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start+0x1a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e097      	b.n	8002d56 <HAL_ADC_Start+0x14a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d018      	beq.n	8002c6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4c:	4b45      	ldr	r3, [pc, #276]	; (8002d64 <HAL_ADC_Start+0x158>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_ADC_Start+0x15c>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9a      	lsrs	r2, r3, #18
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d15f      	bne.n	8002d3c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cba:	d106      	bne.n	8002cca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f023 0206 	bic.w	r2, r3, #6
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_ADC_Start+0x160>)
 8002cda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10f      	bne.n	8002d12 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d129      	bne.n	8002d54 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e020      	b.n	8002d54 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_ADC_Start+0x164>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d11b      	bne.n	8002d54 <HAL_ADC_Start+0x148>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d114      	bne.n	8002d54 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	e00b      	b.n	8002d54 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000024 	.word	0x20000024
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	40012000 	.word	0x40012000

08002d74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d90:	d113      	bne.n	8002dba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da0:	d10b      	bne.n	8002dba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e063      	b.n	8002e82 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002dba:	f7ff feb3 	bl	8002b24 <HAL_GetTick>
 8002dbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dc0:	e021      	b.n	8002e06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d01d      	beq.n	8002e06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <HAL_ADC_PollForConversion+0x6c>
 8002dd0:	f7ff fea8 	bl	8002b24 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d212      	bcs.n	8002e06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d00b      	beq.n	8002e06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0204 	orr.w	r2, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e03d      	b.n	8002e82 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d1d6      	bne.n	8002dc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0212 	mvn.w	r2, #18
 8002e1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d123      	bne.n	8002e80 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d11f      	bne.n	8002e80 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e113      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x244>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d925      	bls.n	8002f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3b1e      	subs	r3, #30
 8002f10:	409a      	lsls	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e022      	b.n	8002f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	2207      	movs	r2, #7
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4403      	add	r3, r0
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d824      	bhi.n	8002fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b05      	subs	r3, #5
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e04c      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d824      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b23      	subs	r3, #35	; 0x23
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	; 0x23
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
 8003004:	e023      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b41      	subs	r3, #65	; 0x41
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	; 0x41
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_ADC_ConfigChannel+0x250>)
 8003050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_ADC_ConfigChannel+0x254>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10f      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1d8>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b12      	cmp	r3, #18
 8003062:	d10b      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_ADC_ConfigChannel+0x254>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d12b      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_ADC_ConfigChannel+0x258>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x1f4>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b11      	cmp	r3, #17
 8003096:	d122      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_ADC_ConfigChannel+0x258>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_ADC_ConfigChannel+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a11      	ldr	r2, [pc, #68]	; (8003104 <HAL_ADC_ConfigChannel+0x260>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	0c9a      	lsrs	r2, r3, #18
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40012300 	.word	0x40012300
 80030f8:	40012000 	.word	0x40012000
 80030fc:	10000012 	.word	0x10000012
 8003100:	20000024 	.word	0x20000024
 8003104:	431bde83 	.word	0x431bde83

08003108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003110:	4b79      	ldr	r3, [pc, #484]	; (80032f8 <ADC_Init+0x1f0>)
 8003112:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	431a      	orrs	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800313c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	4a58      	ldr	r2, [pc, #352]	; (80032fc <ADC_Init+0x1f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6899      	ldr	r1, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	e00f      	b.n	8003206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0202 	bic.w	r2, r2, #2
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e1b      	ldrb	r3, [r3, #24]
 8003220:	005a      	lsls	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	3b01      	subs	r3, #1
 8003260:	035a      	lsls	r2, r3, #13
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	e007      	b.n	800327c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	3b01      	subs	r3, #1
 8003298:	051a      	lsls	r2, r3, #20
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032be:	025a      	lsls	r2, r3, #9
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	029a      	lsls	r2, r3, #10
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012300 	.word	0x40012300
 80032fc:	0f000001 	.word	0x0f000001

08003300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800331c:	4013      	ands	r3, r2
 800331e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800332c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003332:	4a04      	ldr	r2, [pc, #16]	; (8003344 <__NVIC_SetPriorityGrouping+0x44>)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	60d3      	str	r3, [r2, #12]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <__NVIC_GetPriorityGrouping+0x18>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0a1b      	lsrs	r3, r3, #8
 8003352:	f003 0307 	and.w	r3, r3, #7
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00

08003364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	2b00      	cmp	r3, #0
 8003374:	db0b      	blt.n	800338e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 021f 	and.w	r2, r3, #31
 800337c:	4907      	ldr	r1, [pc, #28]	; (800339c <__NVIC_EnableIRQ+0x38>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	2001      	movs	r0, #1
 8003386:	fa00 f202 	lsl.w	r2, r0, r2
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	6039      	str	r1, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	db0a      	blt.n	80033ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	490c      	ldr	r1, [pc, #48]	; (80033ec <__NVIC_SetPriority+0x4c>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	0112      	lsls	r2, r2, #4
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	440b      	add	r3, r1
 80033c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c8:	e00a      	b.n	80033e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4908      	ldr	r1, [pc, #32]	; (80033f0 <__NVIC_SetPriority+0x50>)
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3b04      	subs	r3, #4
 80033d8:	0112      	lsls	r2, r2, #4
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	440b      	add	r3, r1
 80033de:	761a      	strb	r2, [r3, #24]
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	e000e100 	.word	0xe000e100
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b089      	sub	sp, #36	; 0x24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	f1c3 0307 	rsb	r3, r3, #7
 800340e:	2b04      	cmp	r3, #4
 8003410:	bf28      	it	cs
 8003412:	2304      	movcs	r3, #4
 8003414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3304      	adds	r3, #4
 800341a:	2b06      	cmp	r3, #6
 800341c:	d902      	bls.n	8003424 <NVIC_EncodePriority+0x30>
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	3b03      	subs	r3, #3
 8003422:	e000      	b.n	8003426 <NVIC_EncodePriority+0x32>
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	f04f 32ff 	mov.w	r2, #4294967295
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	401a      	ands	r2, r3
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800343c:	f04f 31ff 	mov.w	r1, #4294967295
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	43d9      	mvns	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	4313      	orrs	r3, r2
         );
}
 800344e:	4618      	mov	r0, r3
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
	...

0800345c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3b01      	subs	r3, #1
 8003468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800346c:	d301      	bcc.n	8003472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346e:	2301      	movs	r3, #1
 8003470:	e00f      	b.n	8003492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <SysTick_Config+0x40>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800347a:	210f      	movs	r1, #15
 800347c:	f04f 30ff 	mov.w	r0, #4294967295
 8003480:	f7ff ff8e 	bl	80033a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003484:	4b05      	ldr	r3, [pc, #20]	; (800349c <SysTick_Config+0x40>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <SysTick_Config+0x40>)
 800348c:	2207      	movs	r2, #7
 800348e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	e000e010 	.word	0xe000e010

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff29 	bl	8003300 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c8:	f7ff ff3e 	bl	8003348 <__NVIC_GetPriorityGrouping>
 80034cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	6978      	ldr	r0, [r7, #20]
 80034d4:	f7ff ff8e 	bl	80033f4 <NVIC_EncodePriority>
 80034d8:	4602      	mov	r2, r0
 80034da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff5d 	bl	80033a0 <__NVIC_SetPriority>
}
 80034e6:	bf00      	nop
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff ff31 	bl	8003364 <__NVIC_EnableIRQ>
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b082      	sub	sp, #8
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffa2 	bl	800345c <SysTick_Config>
 8003518:	4603      	mov	r3, r0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
	...

08003524 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff faf8 	bl	8002b24 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e099      	b.n	8003674 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003560:	e00f      	b.n	8003582 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003562:	f7ff fadf 	bl	8002b24 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b05      	cmp	r3, #5
 800356e:	d908      	bls.n	8003582 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2203      	movs	r2, #3
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e078      	b.n	8003674 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e8      	bne.n	8003562 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4b38      	ldr	r3, [pc, #224]	; (800367c <HAL_DMA_Init+0x158>)
 800359c:	4013      	ands	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d107      	bne.n	80035ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	4313      	orrs	r3, r2
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f023 0307 	bic.w	r3, r3, #7
 8003602:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b04      	cmp	r3, #4
 8003614:	d117      	bne.n	8003646 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4313      	orrs	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa7b 	bl	8003b24 <DMA_CheckFifoParam>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	; 0x40
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003642:	2301      	movs	r3, #1
 8003644:	e016      	b.n	8003674 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa32 	bl	8003ab8 <DMA_CalcBaseAndBitshift>
 8003654:	4603      	mov	r3, r0
 8003656:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	223f      	movs	r2, #63	; 0x3f
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	f010803f 	.word	0xf010803f

08003680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7ff fa49 	bl	8002b24 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d008      	beq.n	80036b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e052      	b.n	8003758 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0216 	bic.w	r2, r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_DMA_Abort+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003702:	e013      	b.n	800372c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003704:	f7ff fa0e 	bl	8002b24 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d90c      	bls.n	800372c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e015      	b.n	8003758 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e4      	bne.n	8003704 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	223f      	movs	r2, #63	; 0x3f
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d004      	beq.n	800377e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00c      	b.n	8003798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b0:	4b8e      	ldr	r3, [pc, #568]	; (80039ec <HAL_DMA_IRQHandler+0x248>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a8e      	ldr	r2, [pc, #568]	; (80039f0 <HAL_DMA_IRQHandler+0x24c>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	2208      	movs	r2, #8
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01a      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	2208      	movs	r2, #8
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	2201      	movs	r2, #1
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f043 0202 	orr.w	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2204      	movs	r2, #4
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2204      	movs	r2, #4
 800386a:	409a      	lsls	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	f043 0204 	orr.w	r2, r3, #4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2210      	movs	r2, #16
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03c      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2210      	movs	r2, #16
 80038a0:	409a      	lsls	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e01f      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e016      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0208 	bic.w	r2, r2, #8
 8003902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2220      	movs	r2, #32
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 808f 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8087 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2220      	movs	r2, #32
 800393c:	409a      	lsls	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b05      	cmp	r3, #5
 800394c:	d136      	bne.n	80039bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0216 	bic.w	r2, r2, #22
 800395c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_DMA_IRQHandler+0x1da>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0208 	bic.w	r2, r2, #8
 800398c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	223f      	movs	r2, #63	; 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d07e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
        }
        return;
 80039ba:	e079      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01d      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
 80039e8:	e02c      	b.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
 80039ea:	bf00      	nop
 80039ec:	20000024 	.word	0x20000024
 80039f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e01e      	b.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0210 	bic.w	r2, r2, #16
 8003a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d032      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d307      	bcc.n	8003a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f2      	bne.n	8003a70 <HAL_DMA_IRQHandler+0x2cc>
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ab0:	bf00      	nop
    }
  }
}
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3b10      	subs	r3, #16
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <DMA_CalcBaseAndBitshift+0x64>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	091b      	lsrs	r3, r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <DMA_CalcBaseAndBitshift+0x68>)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d909      	bls.n	8003afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aee:	f023 0303 	bic.w	r3, r3, #3
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	659a      	str	r2, [r3, #88]	; 0x58
 8003af8:	e007      	b.n	8003b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	aaaaaaab 	.word	0xaaaaaaab
 8003b20:	0800be0c 	.word	0x0800be0c

08003b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11f      	bne.n	8003b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d856      	bhi.n	8003bf2 <DMA_CheckFifoParam+0xce>
 8003b44:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <DMA_CheckFifoParam+0x28>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b6f 	.word	0x08003b6f
 8003b54:	08003b5d 	.word	0x08003b5d
 8003b58:	08003bf3 	.word	0x08003bf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d046      	beq.n	8003bf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6c:	e043      	b.n	8003bf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b76:	d140      	bne.n	8003bfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b7c:	e03d      	b.n	8003bfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b86:	d121      	bne.n	8003bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d837      	bhi.n	8003bfe <DMA_CheckFifoParam+0xda>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <DMA_CheckFifoParam+0x70>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bab 	.word	0x08003bab
 8003b9c:	08003ba5 	.word	0x08003ba5
 8003ba0:	08003bbd 	.word	0x08003bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e030      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d025      	beq.n	8003c02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bba:	e022      	b.n	8003c02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc4:	d11f      	bne.n	8003c06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bca:	e01c      	b.n	8003c06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d903      	bls.n	8003bda <DMA_CheckFifoParam+0xb6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bd8:	e018      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bde:	e015      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e00b      	b.n	8003c0a <DMA_CheckFifoParam+0xe6>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e00a      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bf6:	bf00      	nop
 8003bf8:	e008      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfa:	bf00      	nop
 8003bfc:	e006      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003bfe:	bf00      	nop
 8003c00:	e004      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <DMA_CheckFifoParam+0xe8>
      break;
 8003c0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop

08003c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e159      	b.n	8003eec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	f040 8148 	bne.w	8003ee6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d005      	beq.n	8003c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d130      	bne.n	8003cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	2203      	movs	r2, #3
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4013      	ands	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	f003 0201 	and.w	r2, r3, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d017      	beq.n	8003d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d123      	bne.n	8003d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	08da      	lsrs	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	3208      	adds	r2, #8
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0203 	and.w	r2, r3, #3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 80a2 	beq.w	8003ee6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	4a56      	ldr	r2, [pc, #344]	; (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003db0:	6453      	str	r3, [r2, #68]	; 0x44
 8003db2:	4b54      	ldr	r3, [pc, #336]	; (8003f04 <HAL_GPIO_Init+0x2e8>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dbe:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_GPIO_Init+0x2ec>)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	220f      	movs	r2, #15
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a49      	ldr	r2, [pc, #292]	; (8003f0c <HAL_GPIO_Init+0x2f0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d019      	beq.n	8003e1e <HAL_GPIO_Init+0x202>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a48      	ldr	r2, [pc, #288]	; (8003f10 <HAL_GPIO_Init+0x2f4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <HAL_GPIO_Init+0x1fe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a47      	ldr	r2, [pc, #284]	; (8003f14 <HAL_GPIO_Init+0x2f8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00d      	beq.n	8003e16 <HAL_GPIO_Init+0x1fa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a46      	ldr	r2, [pc, #280]	; (8003f18 <HAL_GPIO_Init+0x2fc>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <HAL_GPIO_Init+0x1f6>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a45      	ldr	r2, [pc, #276]	; (8003f1c <HAL_GPIO_Init+0x300>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d101      	bne.n	8003e0e <HAL_GPIO_Init+0x1f2>
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	e008      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e0e:	2307      	movs	r3, #7
 8003e10:	e006      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e12:	2303      	movs	r3, #3
 8003e14:	e004      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e002      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_GPIO_Init+0x204>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f002 0203 	and.w	r2, r2, #3
 8003e26:	0092      	lsls	r2, r2, #2
 8003e28:	4093      	lsls	r3, r2
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e30:	4935      	ldr	r1, [pc, #212]	; (8003f08 <HAL_GPIO_Init+0x2ec>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	3302      	adds	r3, #2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e62:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4013      	ands	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebc:	4b18      	ldr	r3, [pc, #96]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee0:	4a0f      	ldr	r2, [pc, #60]	; (8003f20 <HAL_GPIO_Init+0x304>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	f67f aea2 	bls.w	8003c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	40020000 	.word	0x40020000
 8003f10:	40020400 	.word	0x40020400
 8003f14:	40020800 	.word	0x40020800
 8003f18:	40020c00 	.word	0x40020c00
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40013c00 	.word	0x40013c00

08003f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f34:	787b      	ldrb	r3, [r7, #1]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f40:	e003      	b.n	8003f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f42:	887b      	ldrh	r3, [r7, #2]
 8003f44:	041a      	lsls	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	619a      	str	r2, [r3, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e12b      	b.n	80041c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe fac8 	bl	8002514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f001 f848 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a81      	ldr	r2, [pc, #516]	; (80041cc <HAL_I2C_Init+0x274>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d807      	bhi.n	8003fdc <HAL_I2C_Init+0x84>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a80      	ldr	r2, [pc, #512]	; (80041d0 <HAL_I2C_Init+0x278>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	bf94      	ite	ls
 8003fd4:	2301      	movls	r3, #1
 8003fd6:	2300      	movhi	r3, #0
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	e006      	b.n	8003fea <HAL_I2C_Init+0x92>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a7d      	ldr	r2, [pc, #500]	; (80041d4 <HAL_I2C_Init+0x27c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	bf94      	ite	ls
 8003fe4:	2301      	movls	r3, #1
 8003fe6:	2300      	movhi	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e0e7      	b.n	80041c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a78      	ldr	r2, [pc, #480]	; (80041d8 <HAL_I2C_Init+0x280>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4a6a      	ldr	r2, [pc, #424]	; (80041cc <HAL_I2C_Init+0x274>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d802      	bhi.n	800402c <HAL_I2C_Init+0xd4>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3301      	adds	r3, #1
 800402a:	e009      	b.n	8004040 <HAL_I2C_Init+0xe8>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4a69      	ldr	r2, [pc, #420]	; (80041dc <HAL_I2C_Init+0x284>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	3301      	adds	r3, #1
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	430b      	orrs	r3, r1
 8004046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004052:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	495c      	ldr	r1, [pc, #368]	; (80041cc <HAL_I2C_Init+0x274>)
 800405c:	428b      	cmp	r3, r1
 800405e:	d819      	bhi.n	8004094 <HAL_I2C_Init+0x13c>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e59      	subs	r1, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	fbb1 f3f3 	udiv	r3, r1, r3
 800406e:	1c59      	adds	r1, r3, #1
 8004070:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004074:	400b      	ands	r3, r1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_I2C_Init+0x138>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1e59      	subs	r1, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fbb1 f3f3 	udiv	r3, r1, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408e:	e051      	b.n	8004134 <HAL_I2C_Init+0x1dc>
 8004090:	2304      	movs	r3, #4
 8004092:	e04f      	b.n	8004134 <HAL_I2C_Init+0x1dc>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d111      	bne.n	80040c0 <HAL_I2C_Init+0x168>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	1e58      	subs	r0, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	440b      	add	r3, r1
 80040aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e012      	b.n	80040e6 <HAL_I2C_Init+0x18e>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	0099      	lsls	r1, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d6:	3301      	adds	r3, #1
 80040d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf0c      	ite	eq
 80040e0:	2301      	moveq	r3, #1
 80040e2:	2300      	movne	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_I2C_Init+0x196>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e022      	b.n	8004134 <HAL_I2C_Init+0x1dc>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10e      	bne.n	8004114 <HAL_I2C_Init+0x1bc>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1e58      	subs	r0, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6859      	ldr	r1, [r3, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	440b      	add	r3, r1
 8004104:	fbb0 f3f3 	udiv	r3, r0, r3
 8004108:	3301      	adds	r3, #1
 800410a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004112:	e00f      	b.n	8004134 <HAL_I2C_Init+0x1dc>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e58      	subs	r0, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	0099      	lsls	r1, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	fbb0 f3f3 	udiv	r3, r0, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	6809      	ldr	r1, [r1, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004162:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6911      	ldr	r1, [r2, #16]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	430b      	orrs	r3, r1
 8004176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	000186a0 	.word	0x000186a0
 80041d0:	001e847f 	.word	0x001e847f
 80041d4:	003d08ff 	.word	0x003d08ff
 80041d8:	431bde83 	.word	0x431bde83
 80041dc:	10624dd3 	.word	0x10624dd3

080041e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
 80041f0:	4613      	mov	r3, r2
 80041f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041f4:	f7fe fc96 	bl	8002b24 <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b20      	cmp	r3, #32
 8004204:	f040 80e0 	bne.w	80043c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2319      	movs	r3, #25
 800420e:	2201      	movs	r2, #1
 8004210:	4970      	ldr	r1, [pc, #448]	; (80043d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 f964 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	e0d3      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2C_Master_Transmit+0x50>
 800422c:	2302      	movs	r3, #2
 800422e:	e0cc      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b01      	cmp	r3, #1
 8004244:	d007      	beq.n	8004256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2221      	movs	r2, #33	; 0x21
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2210      	movs	r2, #16
 8004272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	893a      	ldrh	r2, [r7, #8]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4a50      	ldr	r2, [pc, #320]	; (80043d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f89c 	bl	80043dc <I2C_MasterRequestWrite>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e08d      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80042c4:	e066      	b.n	8004394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f9de 	bl	800468c <I2C_WaitOnTXEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d107      	bne.n	80042ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e06b      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d11b      	bne.n	8004368 <HAL_I2C_Master_Transmit+0x188>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	d017      	beq.n	8004368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	6a39      	ldr	r1, [r7, #32]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f9ce 	bl	800470e <I2C_WaitOnBTFFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2b04      	cmp	r3, #4
 800437e:	d107      	bne.n	8004390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e01a      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d194      	bne.n	80042c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	00100002 	.word	0x00100002
 80043d8:	ffff0000 	.word	0xffff0000

080043dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	460b      	mov	r3, r1
 80043ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d006      	beq.n	8004406 <I2C_MasterRequestWrite+0x2a>
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d003      	beq.n	8004406 <I2C_MasterRequestWrite+0x2a>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004404:	d108      	bne.n	8004418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e00b      	b.n	8004430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	2b12      	cmp	r3, #18
 800441e:	d107      	bne.n	8004430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f84f 	bl	80044e0 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004456:	d103      	bne.n	8004460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e035      	b.n	80044d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800446c:	d108      	bne.n	8004480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800446e:	897b      	ldrh	r3, [r7, #10]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	461a      	mov	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800447c:	611a      	str	r2, [r3, #16]
 800447e:	e01b      	b.n	80044b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004480:	897b      	ldrh	r3, [r7, #10]
 8004482:	11db      	asrs	r3, r3, #7
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0306 	and.w	r3, r3, #6
 800448a:	b2db      	uxtb	r3, r3
 800448c:	f063 030f 	orn	r3, r3, #15
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	490e      	ldr	r1, [pc, #56]	; (80044d8 <I2C_MasterRequestWrite+0xfc>)
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 f875 	bl	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e010      	b.n	80044d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4907      	ldr	r1, [pc, #28]	; (80044dc <I2C_MasterRequestWrite+0x100>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f865 	bl	800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	00010008 	.word	0x00010008
 80044dc:	00010002 	.word	0x00010002

080044e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f0:	e025      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d021      	beq.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fb13 	bl	8002b24 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d116      	bne.n	800453e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0220 	orr.w	r2, r3, #32
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e023      	b.n	8004586 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0c1b      	lsrs	r3, r3, #16
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d10d      	bne.n	8004564 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	43da      	mvns	r2, r3
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4013      	ands	r3, r2
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	bf0c      	ite	eq
 800455a:	2301      	moveq	r3, #1
 800455c:	2300      	movne	r3, #0
 800455e:	b2db      	uxtb	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	e00c      	b.n	800457e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4013      	ands	r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	bf0c      	ite	eq
 8004576:	2301      	moveq	r3, #1
 8004578:	2300      	movne	r3, #0
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d0b6      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459c:	e051      	b.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ac:	d123      	bne.n	80045f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	f043 0204 	orr.w	r2, r3, #4
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e046      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fc:	d021      	beq.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fe:	f7fe fa91 	bl	8002b24 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d302      	bcc.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d116      	bne.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e020      	b.n	8004684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e00b      	b.n	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	43da      	mvns	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d18d      	bne.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	e02d      	b.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f878 	bl	8004790 <I2C_IsAcknowledgeFailed>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e02d      	b.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d021      	beq.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe fa37 	bl	8002b24 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d116      	bne.n	80046f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e007      	b.n	8004706 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004700:	2b80      	cmp	r3, #128	; 0x80
 8004702:	d1ca      	bne.n	800469a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	60f8      	str	r0, [r7, #12]
 8004716:	60b9      	str	r1, [r7, #8]
 8004718:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800471a:	e02d      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f837 	bl	8004790 <I2C_IsAcknowledgeFailed>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e02d      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d021      	beq.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fe f9f6 	bl	8002b24 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d116      	bne.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e007      	b.n	8004788 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b04      	cmp	r3, #4
 8004784:	d1ca      	bne.n	800471c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a6:	d11b      	bne.n	80047e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e267      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d075      	beq.n	80048fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800480e:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d00c      	beq.n	8004834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4b85      	ldr	r3, [pc, #532]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	2b08      	cmp	r3, #8
 8004824:	d112      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004826:	4b82      	ldr	r3, [pc, #520]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	4b7e      	ldr	r3, [pc, #504]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d05b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d157      	bne.n	80048f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e242      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004854:	d106      	bne.n	8004864 <HAL_RCC_OscConfig+0x74>
 8004856:	4b76      	ldr	r3, [pc, #472]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a75      	ldr	r2, [pc, #468]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800485c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e01d      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x98>
 800486e:	4b70      	ldr	r3, [pc, #448]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6f      	ldr	r2, [pc, #444]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	4b6d      	ldr	r3, [pc, #436]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6c      	ldr	r2, [pc, #432]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	e00b      	b.n	80048a0 <HAL_RCC_OscConfig+0xb0>
 8004888:	4b69      	ldr	r3, [pc, #420]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800488e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	4b66      	ldr	r3, [pc, #408]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800489a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe f93c 	bl	8002b24 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fe f938 	bl	8002b24 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e207      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b5b      	ldr	r3, [pc, #364]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0xc0>
 80048ce:	e014      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fe f928 	bl	8002b24 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d8:	f7fe f924 	bl	8002b24 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b64      	cmp	r3, #100	; 0x64
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e1f3      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0xe8>
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d063      	beq.n	80049ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004906:	4b4a      	ldr	r3, [pc, #296]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11c      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b44      	ldr	r3, [pc, #272]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d116      	bne.n	8004958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492a:	4b41      	ldr	r3, [pc, #260]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e1c7      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4937      	ldr	r1, [pc, #220]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004956:	e03a      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004960:	4b34      	ldr	r3, [pc, #208]	; (8004a34 <HAL_RCC_OscConfig+0x244>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fe f8dd 	bl	8002b24 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800496e:	f7fe f8d9 	bl	8002b24 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e1a8      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	4b28      	ldr	r3, [pc, #160]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4925      	ldr	r1, [pc, #148]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
 80049a0:	e015      	b.n	80049ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_OscConfig+0x244>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe f8bc 	bl	8002b24 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fe f8b8 	bl	8002b24 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e187      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d036      	beq.n	8004a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d016      	beq.n	8004a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <HAL_RCC_OscConfig+0x248>)
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e8:	f7fe f89c 	bl	8002b24 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f0:	f7fe f898 	bl	8002b24 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e167      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_OscConfig+0x240>)
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x200>
 8004a0e:	e01b      	b.n	8004a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a10:	4b09      	ldr	r3, [pc, #36]	; (8004a38 <HAL_RCC_OscConfig+0x248>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fe f885 	bl	8002b24 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1e:	f7fe f881 	bl	8002b24 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d907      	bls.n	8004a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e150      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
 8004a30:	40023800 	.word	0x40023800
 8004a34:	42470000 	.word	0x42470000
 8004a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	4b88      	ldr	r3, [pc, #544]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ea      	bne.n	8004a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8097 	beq.w	8004b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a5a:	4b81      	ldr	r3, [pc, #516]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10f      	bne.n	8004a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	4b7d      	ldr	r3, [pc, #500]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	4a7c      	ldr	r2, [pc, #496]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6413      	str	r3, [r2, #64]	; 0x40
 8004a76:	4b7a      	ldr	r3, [pc, #488]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a82:	2301      	movs	r3, #1
 8004a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a86:	4b77      	ldr	r3, [pc, #476]	; (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d118      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a92:	4b74      	ldr	r3, [pc, #464]	; (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a73      	ldr	r2, [pc, #460]	; (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe f841 	bl	8002b24 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aa6:	f7fe f83d 	bl	8002b24 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e10c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <HAL_RCC_OscConfig+0x474>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x2ea>
 8004acc:	4b64      	ldr	r3, [pc, #400]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	4a63      	ldr	r2, [pc, #396]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f043 0301 	orr.w	r3, r3, #1
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCC_OscConfig+0x324>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x30c>
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae6:	4a5e      	ldr	r2, [pc, #376]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 0304 	orr.w	r3, r3, #4
 8004aec:	6713      	str	r3, [r2, #112]	; 0x70
 8004aee:	4b5c      	ldr	r3, [pc, #368]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	4a5b      	ldr	r2, [pc, #364]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	6713      	str	r3, [r2, #112]	; 0x70
 8004afa:	e00b      	b.n	8004b14 <HAL_RCC_OscConfig+0x324>
 8004afc:	4b58      	ldr	r3, [pc, #352]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a57      	ldr	r2, [pc, #348]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	4b55      	ldr	r3, [pc, #340]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a54      	ldr	r2, [pc, #336]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	f023 0304 	bic.w	r3, r3, #4
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d015      	beq.n	8004b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fe f802 	bl	8002b24 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b24:	f7fd fffe 	bl	8002b24 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e0cb      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3a:	4b49      	ldr	r3, [pc, #292]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0ee      	beq.n	8004b24 <HAL_RCC_OscConfig+0x334>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b48:	f7fd ffec 	bl	8002b24 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b50:	f7fd ffe8 	bl	8002b24 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e0b5      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b66:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1ee      	bne.n	8004b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d105      	bne.n	8004b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b78:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a38      	ldr	r2, [pc, #224]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a1 	beq.w	8004cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d05c      	beq.n	8004c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d141      	bne.n	8004c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd ffbc 	bl	8002b24 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd ffb8 	bl	8002b24 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e087      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	019b      	lsls	r3, r3, #6
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	3b01      	subs	r3, #1
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	061b      	lsls	r3, r3, #24
 8004bf2:	491b      	ldr	r1, [pc, #108]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd ff91 	bl	8002b24 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd ff8d 	bl	8002b24 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e05c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c18:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x416>
 8004c24:	e054      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <HAL_RCC_OscConfig+0x478>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7fd ff7a 	bl	8002b24 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c34:	f7fd ff76 	bl	8002b24 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e045      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_OscConfig+0x470>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x444>
 8004c52:	e03d      	b.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e038      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	40007000 	.word	0x40007000
 8004c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_RCC_OscConfig+0x4ec>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d028      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d121      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d11a      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d107      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800

08004ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0cc      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b68      	ldr	r3, [pc, #416]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d90c      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b63      	ldr	r3, [pc, #396]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0b8      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d020      	beq.n	8004d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d34:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4a58      	ldr	r2, [pc, #352]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d4c:	4b53      	ldr	r3, [pc, #332]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d58:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	494d      	ldr	r1, [pc, #308]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d044      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d107      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d119      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e07f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e06f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e067      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4934      	ldr	r1, [pc, #208]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fea8 	bl	8002b24 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dd8:	f7fd fea4 	bl	8002b24 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e04f      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dee:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 020c 	and.w	r2, r3, #12
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1eb      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e00:	4b25      	ldr	r3, [pc, #148]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d20c      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e032      	b.n	8004e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	4916      	ldr	r1, [pc, #88]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	490e      	ldr	r1, [pc, #56]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e66:	f000 f821 	bl	8004eac <HAL_RCC_GetSysClockFreq>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e78:	5ccb      	ldrb	r3, [r1, r3]
 8004e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e82:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd fe08 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023c00 	.word	0x40023c00
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	0800bdf4 	.word	0x0800bdf4
 8004ea4:	20000024 	.word	0x20000024
 8004ea8:	20000028 	.word	0x20000028

08004eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eb0:	b090      	sub	sp, #64	; 0x40
 8004eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec4:	4b59      	ldr	r3, [pc, #356]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 030c 	and.w	r3, r3, #12
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d00d      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0x40>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	f200 80a1 	bhi.w	8005018 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ede:	e09b      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b53      	ldr	r3, [pc, #332]	; (8005030 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004ee4:	e09b      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ee6:	4b53      	ldr	r3, [pc, #332]	; (8005034 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004eea:	e098      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eec:	4b4f      	ldr	r3, [pc, #316]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ef6:	4b4d      	ldr	r3, [pc, #308]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f02:	4b4a      	ldr	r3, [pc, #296]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	2200      	movs	r2, #0
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f14:	2100      	movs	r1, #0
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f18:	fb03 f201 	mul.w	r2, r3, r1
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	fb00 f303 	mul.w	r3, r0, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	4a43      	ldr	r2, [pc, #268]	; (8005034 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f26:	fba0 1202 	umull	r1, r2, r0, r2
 8004f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2c:	460a      	mov	r2, r1
 8004f2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f32:	4413      	add	r3, r2
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f38:	2200      	movs	r2, #0
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f46:	f7fb feb7 	bl	8000cb8 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4613      	mov	r3, r2
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f52:	e053      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f54:	4b35      	ldr	r3, [pc, #212]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	617a      	str	r2, [r7, #20]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f66:	f04f 0b00 	mov.w	fp, #0
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	f04f 0000 	mov.w	r0, #0
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	0159      	lsls	r1, r3, #5
 8004f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7c:	0150      	lsls	r0, r2, #5
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	ebb2 080a 	subs.w	r8, r2, sl
 8004f86:	eb63 090b 	sbc.w	r9, r3, fp
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f9e:	ebb2 0408 	subs.w	r4, r2, r8
 8004fa2:	eb63 0509 	sbc.w	r5, r3, r9
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	00eb      	lsls	r3, r5, #3
 8004fb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fb4:	00e2      	lsls	r2, r4, #3
 8004fb6:	4614      	mov	r4, r2
 8004fb8:	461d      	mov	r5, r3
 8004fba:	eb14 030a 	adds.w	r3, r4, sl
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	eb45 030b 	adc.w	r3, r5, fp
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	028b      	lsls	r3, r1, #10
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fdc:	4621      	mov	r1, r4
 8004fde:	028a      	lsls	r2, r1, #10
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	60fa      	str	r2, [r7, #12]
 8004fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff0:	f7fb fe62 	bl	8000cb8 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ffc:	4b0b      	ldr	r3, [pc, #44]	; (800502c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	3301      	adds	r3, #1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800500c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005016:	e002      	b.n	800501e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetSysClockFreq+0x184>)
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800501c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005020:	4618      	mov	r0, r3
 8005022:	3740      	adds	r7, #64	; 0x40
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	00f42400 	.word	0x00f42400
 8005034:	017d7840 	.word	0x017d7840

08005038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_RCC_GetHCLKFreq+0x14>)
 800503e:	681b      	ldr	r3, [r3, #0]
}
 8005040:	4618      	mov	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000024 	.word	0x20000024

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005054:	f7ff fff0 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	0a9b      	lsrs	r3, r3, #10
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40023800 	.word	0x40023800
 8005074:	0800be04 	.word	0x0800be04

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800507c:	f7ff ffdc 	bl	8005038 <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	0b5b      	lsrs	r3, r3, #13
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4903      	ldr	r1, [pc, #12]	; (800509c <HAL_RCC_GetPCLK2Freq+0x24>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800
 800509c:	0800be04 	.word	0x0800be04

080050a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e097      	b.n	80051e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fd fa6b 	bl	80025a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6812      	ldr	r2, [r2, #0]
 80050e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e4:	f023 0307 	bic.w	r3, r3, #7
 80050e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f000 fa57 	bl	80055a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	4313      	orrs	r3, r2
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005140:	f023 030c 	bic.w	r3, r3, #12
 8005144:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800514c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	4313      	orrs	r3, r2
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	011a      	lsls	r2, r3, #4
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	031b      	lsls	r3, r3, #12
 8005170:	4313      	orrs	r3, r2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	4313      	orrs	r3, r2
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005204:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800520c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005214:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d110      	bne.n	800523e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d102      	bne.n	8005228 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005222:	7b7b      	ldrb	r3, [r7, #13]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e089      	b.n	8005340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	e031      	b.n	80052a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d110      	bne.n	8005266 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800524a:	7b3b      	ldrb	r3, [r7, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e075      	b.n	8005340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005264:	e01d      	b.n	80052a2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d108      	bne.n	800527e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800526c:	7bbb      	ldrb	r3, [r7, #14]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d105      	bne.n	800527e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005272:	7b7b      	ldrb	r3, [r7, #13]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d102      	bne.n	800527e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005278:	7b3b      	ldrb	r3, [r7, #12]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d001      	beq.n	8005282 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e05e      	b.n	8005340 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2202      	movs	r2, #2
 800529e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d010      	beq.n	80052d0 <HAL_TIM_Encoder_Start_IT+0xe4>
 80052ae:	e01f      	b.n	80052f0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2201      	movs	r2, #1
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 f9f5 	bl	80056a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0202 	orr.w	r2, r2, #2
 80052cc:	60da      	str	r2, [r3, #12]
      break;
 80052ce:	e02e      	b.n	800532e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2201      	movs	r2, #1
 80052d6:	2104      	movs	r1, #4
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f9e5 	bl	80056a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0204 	orr.w	r2, r2, #4
 80052ec:	60da      	str	r2, [r3, #12]
      break;
 80052ee:	e01e      	b.n	800532e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2201      	movs	r2, #1
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f9d5 	bl	80056a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	2104      	movs	r1, #4
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f9ce 	bl	80056a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0202 	orr.w	r2, r2, #2
 800531a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0204 	orr.w	r2, r2, #4
 800532a:	60da      	str	r2, [r3, #12]
      break;
 800532c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b02      	cmp	r3, #2
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0202 	mvn.w	r2, #2
 8005374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc f9ca 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f8ea 	bl	800556c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8f1 	bl	8005580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0304 	and.w	r3, r3, #4
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0204 	mvn.w	r2, #4
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2202      	movs	r2, #2
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc f9a0 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8c0 	bl	800556c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8c7 	bl	8005580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b08      	cmp	r3, #8
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b08      	cmp	r3, #8
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0208 	mvn.w	r2, #8
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2204      	movs	r2, #4
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc f976 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f896 	bl	800556c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f89d 	bl	8005580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b10      	cmp	r3, #16
 8005458:	d122      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b10      	cmp	r3, #16
 8005466:	d11b      	bne.n	80054a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0210 	mvn.w	r2, #16
 8005470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2208      	movs	r2, #8
 8005476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc f94c 	bl	8001724 <HAL_TIM_IC_CaptureCallback>
 800548c:	e005      	b.n	800549a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f86c 	bl	800556c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f873 	bl	8005580 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d10e      	bne.n	80054cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0201 	mvn.w	r2, #1
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f846 	bl	8005558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b80      	cmp	r3, #128	; 0x80
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f976 	bl	80057e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f838 	bl	8005594 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b20      	cmp	r3, #32
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b20      	cmp	r3, #32
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0220 	mvn.w	r2, #32
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f940 	bl	80057d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a34      	ldr	r2, [pc, #208]	; (800568c <TIM_Base_SetConfig+0xe4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00f      	beq.n	80055e0 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d00b      	beq.n	80055e0 <TIM_Base_SetConfig+0x38>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a31      	ldr	r2, [pc, #196]	; (8005690 <TIM_Base_SetConfig+0xe8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_Base_SetConfig+0x38>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a30      	ldr	r2, [pc, #192]	; (8005694 <TIM_Base_SetConfig+0xec>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0x38>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <TIM_Base_SetConfig+0xf0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d108      	bne.n	80055f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a25      	ldr	r2, [pc, #148]	; (800568c <TIM_Base_SetConfig+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01b      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d017      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a22      	ldr	r2, [pc, #136]	; (8005690 <TIM_Base_SetConfig+0xe8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a21      	ldr	r2, [pc, #132]	; (8005694 <TIM_Base_SetConfig+0xec>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00f      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a20      	ldr	r2, [pc, #128]	; (8005698 <TIM_Base_SetConfig+0xf0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <TIM_Base_SetConfig+0xf4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <TIM_Base_SetConfig+0xf8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_Base_SetConfig+0x8a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <TIM_Base_SetConfig+0xfc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a08      	ldr	r2, [pc, #32]	; (800568c <TIM_Base_SetConfig+0xe4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d103      	bne.n	8005678 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	615a      	str	r2, [r3, #20]
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800

080056a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	401a      	ands	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e050      	b.n	80057ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1c      	ldr	r2, [pc, #112]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d018      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d013      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00e      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d009      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d004      	beq.n	8005782 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a13      	ldr	r2, [pc, #76]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005788:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	4313      	orrs	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40014000 	.word	0x40014000

080057d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e03f      	b.n	800588a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc ff10 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800583a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fccf 	bl	80061e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e047      	b.n	8005934 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d106      	bne.n	80058be <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7fc fec3 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2224      	movs	r2, #36	; 0x24
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fc82 	bl	80061e0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80058fa:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0208 	orr.w	r2, r2, #8
 800590a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800591a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b0ba      	sub	sp, #232	; 0xe8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005962:	2300      	movs	r3, #0
 8005964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800597a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10f      	bne.n	80059a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d009      	beq.n	80059a2 <HAL_UART_IRQHandler+0x66>
 800598e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb65 	bl	800606a <UART_Receive_IT>
      return;
 80059a0:	e256      	b.n	8005e50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80de 	beq.w	8005b68 <HAL_UART_IRQHandler+0x22c>
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80d1 	beq.w	8005b68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xae>
 80059d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_UART_IRQHandler+0xd2>
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0202 	orr.w	r2, r3, #2
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <HAL_UART_IRQHandler+0xf6>
 8005a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	f043 0204 	orr.w	r2, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <HAL_UART_IRQHandler+0x126>
 8005a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0208 	orr.w	r2, r3, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 81ed 	beq.w	8005e46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a70:	f003 0320 	and.w	r3, r3, #32
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_UART_IRQHandler+0x14e>
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 faf0 	bl	800606a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	f003 0308 	and.w	r3, r3, #8
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_UART_IRQHandler+0x17a>
 8005aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d04f      	beq.n	8005b56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9f8 	bl	8005eac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d141      	bne.n	8005b4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ad8:	e853 3f00 	ldrex	r3, [r3]
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005af6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1d9      	bne.n	8005aca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	4a7d      	ldr	r2, [pc, #500]	; (8005d18 <HAL_UART_IRQHandler+0x3dc>)
 8005b24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fd fe18 	bl	8003760 <HAL_DMA_Abort_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b40:	4610      	mov	r0, r2
 8005b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e00e      	b.n	8005b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f99a 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	e00a      	b.n	8005b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f996 	bl	8005e80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e006      	b.n	8005b64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f992 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b62:	e170      	b.n	8005e46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	bf00      	nop
    return;
 8005b66:	e16e      	b.n	8005e46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 814a 	bne.w	8005e06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8143 	beq.w	8005e06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 813c 	beq.w	8005e06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	f040 80b4 	bne.w	8005d1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8140 	beq.w	8005e4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	f080 8139 	bcs.w	8005e4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	f000 8088 	beq.w	8005cfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1d9      	bne.n	8005bee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3314      	adds	r3, #20
 8005c40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3314      	adds	r3, #20
 8005c5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e1      	bne.n	8005c3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3314      	adds	r3, #20
 8005c96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ca0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e3      	bne.n	8005c76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc6:	e853 3f00 	ldrex	r3, [r3]
 8005cca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cce:	f023 0310 	bic.w	r3, r3, #16
 8005cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ce0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ce2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ce6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e3      	bne.n	8005cbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fd fcc1 	bl	8003680 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f8c0 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d14:	e099      	b.n	8005e4a <HAL_UART_IRQHandler+0x50e>
 8005d16:	bf00      	nop
 8005d18:	08005f73 	.word	0x08005f73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 808b 	beq.w	8005e4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005d38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8086 	beq.w	8005e4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d66:	647a      	str	r2, [r7, #68]	; 0x44
 8005d68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e3      	bne.n	8005d42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e3      	bne.n	8005d7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2220      	movs	r2, #32
 8005db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0310 	bic.w	r3, r3, #16
 8005dd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	330c      	adds	r3, #12
 8005de0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005de4:	61fa      	str	r2, [r7, #28]
 8005de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de8:	69b9      	ldr	r1, [r7, #24]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	e841 2300 	strex	r3, r2, [r1]
 8005df0:	617b      	str	r3, [r7, #20]
   return(result);
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1e3      	bne.n	8005dc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f848 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e04:	e023      	b.n	8005e4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_UART_IRQHandler+0x4ea>
 8005e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f8bb 	bl	8005f9a <UART_Transmit_IT>
    return;
 8005e24:	e014      	b.n	8005e50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <HAL_UART_IRQHandler+0x514>
 8005e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d008      	beq.n	8005e50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8fb 	bl	800603a <UART_EndTransmit_IT>
    return;
 8005e44:	e004      	b.n	8005e50 <HAL_UART_IRQHandler+0x514>
    return;
 8005e46:	bf00      	nop
 8005e48:	e002      	b.n	8005e50 <HAL_UART_IRQHandler+0x514>
      return;
 8005e4a:	bf00      	nop
 8005e4c:	e000      	b.n	8005e50 <HAL_UART_IRQHandler+0x514>
      return;
 8005e4e:	bf00      	nop
  }
}
 8005e50:	37e8      	adds	r7, #232	; 0xe8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop

08005e58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b095      	sub	sp, #84	; 0x54
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	e853 3f00 	ldrex	r3, [r3]
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ed4:	643a      	str	r2, [r7, #64]	; 0x40
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e5      	bne.n	8005eb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3314      	adds	r3, #20
 8005f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e5      	bne.n	8005ee8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d119      	bne.n	8005f58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f44:	61ba      	str	r2, [r7, #24]
 8005f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	6979      	ldr	r1, [r7, #20]
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	613b      	str	r3, [r7, #16]
   return(result);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f66:	bf00      	nop
 8005f68:	3754      	adds	r7, #84	; 0x54
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff ff77 	bl	8005e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f92:	bf00      	nop
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b085      	sub	sp, #20
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b21      	cmp	r3, #33	; 0x21
 8005fac:	d13e      	bne.n	800602c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb6:	d114      	bne.n	8005fe2 <UART_Transmit_IT+0x48>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d110      	bne.n	8005fe2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	1c9a      	adds	r2, r3, #2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]
 8005fe0:	e008      	b.n	8005ff4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	1c59      	adds	r1, r3, #1
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6211      	str	r1, [r2, #32]
 8005fec:	781a      	ldrb	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	4619      	mov	r1, r3
 8006002:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10f      	bne.n	8006028 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006016:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006026:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	e000      	b.n	800602e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800602c:	2302      	movs	r3, #2
  }
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68da      	ldr	r2, [r3, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006050:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fefc 	bl	8005e58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b08c      	sub	sp, #48	; 0x30
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b22      	cmp	r3, #34	; 0x22
 800607c:	f040 80ab 	bne.w	80061d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006088:	d117      	bne.n	80060ba <UART_Receive_IT+0x50>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d113      	bne.n	80060ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006092:	2300      	movs	r3, #0
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b2:	1c9a      	adds	r2, r3, #2
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
 80060b8:	e026      	b.n	8006108 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060cc:	d007      	beq.n	80060de <UART_Receive_IT+0x74>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <UART_Receive_IT+0x82>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	701a      	strb	r2, [r3, #0]
 80060ea:	e008      	b.n	80060fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29b      	uxth	r3, r3
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	4619      	mov	r1, r3
 8006116:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006118:	2b00      	cmp	r3, #0
 800611a:	d15a      	bne.n	80061d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0220 	bic.w	r2, r2, #32
 800612a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800613a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0201 	bic.w	r2, r2, #1
 800614a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006158:	2b01      	cmp	r3, #1
 800615a:	d135      	bne.n	80061c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	613b      	str	r3, [r7, #16]
   return(result);
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f023 0310 	bic.w	r3, r3, #16
 8006178:	627b      	str	r3, [r7, #36]	; 0x24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006182:	623a      	str	r2, [r7, #32]
 8006184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	69f9      	ldr	r1, [r7, #28]
 8006188:	6a3a      	ldr	r2, [r7, #32]
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b10      	cmp	r3, #16
 80061a2:	d10a      	bne.n	80061ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fe67 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
 80061c6:	e002      	b.n	80061ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fe4f 	bl	8005e6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e002      	b.n	80061d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3730      	adds	r7, #48	; 0x30
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e4:	b0c0      	sub	sp, #256	; 0x100
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	68d9      	ldr	r1, [r3, #12]
 80061fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	ea40 0301 	orr.w	r3, r0, r1
 8006208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	431a      	orrs	r2, r3
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	431a      	orrs	r2, r3
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006238:	f021 010c 	bic.w	r1, r1, #12
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006246:	430b      	orrs	r3, r1
 8006248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	6999      	ldr	r1, [r3, #24]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	ea40 0301 	orr.w	r3, r0, r1
 8006266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4b8f      	ldr	r3, [pc, #572]	; (80064ac <UART_SetConfig+0x2cc>)
 8006270:	429a      	cmp	r2, r3
 8006272:	d005      	beq.n	8006280 <UART_SetConfig+0xa0>
 8006274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b8d      	ldr	r3, [pc, #564]	; (80064b0 <UART_SetConfig+0x2d0>)
 800627c:	429a      	cmp	r2, r3
 800627e:	d104      	bne.n	800628a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006280:	f7fe fefa 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8006284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006288:	e003      	b.n	8006292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800628a:	f7fe fee1 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 800628e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629c:	f040 810c 	bne.w	80064b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062b2:	4622      	mov	r2, r4
 80062b4:	462b      	mov	r3, r5
 80062b6:	1891      	adds	r1, r2, r2
 80062b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80062ba:	415b      	adcs	r3, r3
 80062bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062c2:	4621      	mov	r1, r4
 80062c4:	eb12 0801 	adds.w	r8, r2, r1
 80062c8:	4629      	mov	r1, r5
 80062ca:	eb43 0901 	adc.w	r9, r3, r1
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	f04f 0300 	mov.w	r3, #0
 80062d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062e2:	4690      	mov	r8, r2
 80062e4:	4699      	mov	r9, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	eb18 0303 	adds.w	r3, r8, r3
 80062ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f0:	462b      	mov	r3, r5
 80062f2:	eb49 0303 	adc.w	r3, r9, r3
 80062f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800630a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800630e:	460b      	mov	r3, r1
 8006310:	18db      	adds	r3, r3, r3
 8006312:	653b      	str	r3, [r7, #80]	; 0x50
 8006314:	4613      	mov	r3, r2
 8006316:	eb42 0303 	adc.w	r3, r2, r3
 800631a:	657b      	str	r3, [r7, #84]	; 0x54
 800631c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006324:	f7fa fcc8 	bl	8000cb8 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4b61      	ldr	r3, [pc, #388]	; (80064b4 <UART_SetConfig+0x2d4>)
 800632e:	fba3 2302 	umull	r2, r3, r3, r2
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	011c      	lsls	r4, r3, #4
 8006336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633a:	2200      	movs	r2, #0
 800633c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006348:	4642      	mov	r2, r8
 800634a:	464b      	mov	r3, r9
 800634c:	1891      	adds	r1, r2, r2
 800634e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006350:	415b      	adcs	r3, r3
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006358:	4641      	mov	r1, r8
 800635a:	eb12 0a01 	adds.w	sl, r2, r1
 800635e:	4649      	mov	r1, r9
 8006360:	eb43 0b01 	adc.w	fp, r3, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006378:	4692      	mov	sl, r2
 800637a:	469b      	mov	fp, r3
 800637c:	4643      	mov	r3, r8
 800637e:	eb1a 0303 	adds.w	r3, sl, r3
 8006382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006386:	464b      	mov	r3, r9
 8006388:	eb4b 0303 	adc.w	r3, fp, r3
 800638c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800639c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063a4:	460b      	mov	r3, r1
 80063a6:	18db      	adds	r3, r3, r3
 80063a8:	643b      	str	r3, [r7, #64]	; 0x40
 80063aa:	4613      	mov	r3, r2
 80063ac:	eb42 0303 	adc.w	r3, r2, r3
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
 80063b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063ba:	f7fa fc7d 	bl	8000cb8 <__aeabi_uldivmod>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4611      	mov	r1, r2
 80063c4:	4b3b      	ldr	r3, [pc, #236]	; (80064b4 <UART_SetConfig+0x2d4>)
 80063c6:	fba3 2301 	umull	r2, r3, r3, r1
 80063ca:	095b      	lsrs	r3, r3, #5
 80063cc:	2264      	movs	r2, #100	; 0x64
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <UART_SetConfig+0x2d4>)
 80063dc:	fba3 2302 	umull	r2, r3, r3, r2
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063e8:	441c      	add	r4, r3
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	63b9      	str	r1, [r7, #56]	; 0x38
 8006404:	415b      	adcs	r3, r3
 8006406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800640c:	4641      	mov	r1, r8
 800640e:	1851      	adds	r1, r2, r1
 8006410:	6339      	str	r1, [r7, #48]	; 0x30
 8006412:	4649      	mov	r1, r9
 8006414:	414b      	adcs	r3, r1
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006424:	4659      	mov	r1, fp
 8006426:	00cb      	lsls	r3, r1, #3
 8006428:	4651      	mov	r1, sl
 800642a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642e:	4651      	mov	r1, sl
 8006430:	00ca      	lsls	r2, r1, #3
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4603      	mov	r3, r0
 8006438:	4642      	mov	r2, r8
 800643a:	189b      	adds	r3, r3, r2
 800643c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800645c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006460:	460b      	mov	r3, r1
 8006462:	18db      	adds	r3, r3, r3
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	4613      	mov	r3, r2
 8006468:	eb42 0303 	adc.w	r3, r2, r3
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006476:	f7fa fc1f 	bl	8000cb8 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4b0d      	ldr	r3, [pc, #52]	; (80064b4 <UART_SetConfig+0x2d4>)
 8006480:	fba3 1302 	umull	r1, r3, r3, r2
 8006484:	095b      	lsrs	r3, r3, #5
 8006486:	2164      	movs	r1, #100	; 0x64
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	3332      	adds	r3, #50	; 0x32
 8006492:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <UART_SetConfig+0x2d4>)
 8006494:	fba2 2303 	umull	r2, r3, r2, r3
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	f003 0207 	and.w	r2, r3, #7
 800649e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4422      	add	r2, r4
 80064a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064a8:	e105      	b.n	80066b6 <UART_SetConfig+0x4d6>
 80064aa:	bf00      	nop
 80064ac:	40011000 	.word	0x40011000
 80064b0:	40011400 	.word	0x40011400
 80064b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064ca:	4642      	mov	r2, r8
 80064cc:	464b      	mov	r3, r9
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	6239      	str	r1, [r7, #32]
 80064d2:	415b      	adcs	r3, r3
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064da:	4641      	mov	r1, r8
 80064dc:	1854      	adds	r4, r2, r1
 80064de:	4649      	mov	r1, r9
 80064e0:	eb43 0501 	adc.w	r5, r3, r1
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	00eb      	lsls	r3, r5, #3
 80064ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f2:	00e2      	lsls	r2, r4, #3
 80064f4:	4614      	mov	r4, r2
 80064f6:	461d      	mov	r5, r3
 80064f8:	4643      	mov	r3, r8
 80064fa:	18e3      	adds	r3, r4, r3
 80064fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006500:	464b      	mov	r3, r9
 8006502:	eb45 0303 	adc.w	r3, r5, r3
 8006506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006526:	4629      	mov	r1, r5
 8006528:	008b      	lsls	r3, r1, #2
 800652a:	4621      	mov	r1, r4
 800652c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006530:	4621      	mov	r1, r4
 8006532:	008a      	lsls	r2, r1, #2
 8006534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006538:	f7fa fbbe 	bl	8000cb8 <__aeabi_uldivmod>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4b60      	ldr	r3, [pc, #384]	; (80066c4 <UART_SetConfig+0x4e4>)
 8006542:	fba3 2302 	umull	r2, r3, r3, r2
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	011c      	lsls	r4, r3, #4
 800654a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	1891      	adds	r1, r2, r2
 8006562:	61b9      	str	r1, [r7, #24]
 8006564:	415b      	adcs	r3, r3
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800656c:	4641      	mov	r1, r8
 800656e:	1851      	adds	r1, r2, r1
 8006570:	6139      	str	r1, [r7, #16]
 8006572:	4649      	mov	r1, r9
 8006574:	414b      	adcs	r3, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006584:	4659      	mov	r1, fp
 8006586:	00cb      	lsls	r3, r1, #3
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800658e:	4651      	mov	r1, sl
 8006590:	00ca      	lsls	r2, r1, #3
 8006592:	4610      	mov	r0, r2
 8006594:	4619      	mov	r1, r3
 8006596:	4603      	mov	r3, r0
 8006598:	4642      	mov	r2, r8
 800659a:	189b      	adds	r3, r3, r2
 800659c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065a0:	464b      	mov	r3, r9
 80065a2:	460a      	mov	r2, r1
 80065a4:	eb42 0303 	adc.w	r3, r2, r3
 80065a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80065b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065c4:	4649      	mov	r1, r9
 80065c6:	008b      	lsls	r3, r1, #2
 80065c8:	4641      	mov	r1, r8
 80065ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ce:	4641      	mov	r1, r8
 80065d0:	008a      	lsls	r2, r1, #2
 80065d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065d6:	f7fa fb6f 	bl	8000cb8 <__aeabi_uldivmod>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <UART_SetConfig+0x4e4>)
 80065e0:	fba3 1302 	umull	r1, r3, r3, r2
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	2164      	movs	r1, #100	; 0x64
 80065e8:	fb01 f303 	mul.w	r3, r1, r3
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	3332      	adds	r3, #50	; 0x32
 80065f2:	4a34      	ldr	r2, [pc, #208]	; (80066c4 <UART_SetConfig+0x4e4>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	095b      	lsrs	r3, r3, #5
 80065fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065fe:	441c      	add	r4, r3
 8006600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006604:	2200      	movs	r2, #0
 8006606:	673b      	str	r3, [r7, #112]	; 0x70
 8006608:	677a      	str	r2, [r7, #116]	; 0x74
 800660a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	1891      	adds	r1, r2, r2
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	415b      	adcs	r3, r3
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800661e:	4641      	mov	r1, r8
 8006620:	1851      	adds	r1, r2, r1
 8006622:	6039      	str	r1, [r7, #0]
 8006624:	4649      	mov	r1, r9
 8006626:	414b      	adcs	r3, r1
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006636:	4659      	mov	r1, fp
 8006638:	00cb      	lsls	r3, r1, #3
 800663a:	4651      	mov	r1, sl
 800663c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006640:	4651      	mov	r1, sl
 8006642:	00ca      	lsls	r2, r1, #3
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	4603      	mov	r3, r0
 800664a:	4642      	mov	r2, r8
 800664c:	189b      	adds	r3, r3, r2
 800664e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006650:	464b      	mov	r3, r9
 8006652:	460a      	mov	r2, r1
 8006654:	eb42 0303 	adc.w	r3, r2, r3
 8006658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	663b      	str	r3, [r7, #96]	; 0x60
 8006664:	667a      	str	r2, [r7, #100]	; 0x64
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006672:	4649      	mov	r1, r9
 8006674:	008b      	lsls	r3, r1, #2
 8006676:	4641      	mov	r1, r8
 8006678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800667c:	4641      	mov	r1, r8
 800667e:	008a      	lsls	r2, r1, #2
 8006680:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006684:	f7fa fb18 	bl	8000cb8 <__aeabi_uldivmod>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <UART_SetConfig+0x4e4>)
 800668e:	fba3 1302 	umull	r1, r3, r3, r2
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2164      	movs	r1, #100	; 0x64
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	011b      	lsls	r3, r3, #4
 800669e:	3332      	adds	r3, #50	; 0x32
 80066a0:	4a08      	ldr	r2, [pc, #32]	; (80066c4 <UART_SetConfig+0x4e4>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4422      	add	r2, r4
 80066b4:	609a      	str	r2, [r3, #8]
}
 80066b6:	bf00      	nop
 80066b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066bc:	46bd      	mov	sp, r7
 80066be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066c2:	bf00      	nop
 80066c4:	51eb851f 	.word	0x51eb851f

080066c8 <__errno>:
 80066c8:	4b01      	ldr	r3, [pc, #4]	; (80066d0 <__errno+0x8>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000030 	.word	0x20000030

080066d4 <__libc_init_array>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4d0d      	ldr	r5, [pc, #52]	; (800670c <__libc_init_array+0x38>)
 80066d8:	4c0d      	ldr	r4, [pc, #52]	; (8006710 <__libc_init_array+0x3c>)
 80066da:	1b64      	subs	r4, r4, r5
 80066dc:	10a4      	asrs	r4, r4, #2
 80066de:	2600      	movs	r6, #0
 80066e0:	42a6      	cmp	r6, r4
 80066e2:	d109      	bne.n	80066f8 <__libc_init_array+0x24>
 80066e4:	4d0b      	ldr	r5, [pc, #44]	; (8006714 <__libc_init_array+0x40>)
 80066e6:	4c0c      	ldr	r4, [pc, #48]	; (8006718 <__libc_init_array+0x44>)
 80066e8:	f004 fc92 	bl	800b010 <_init>
 80066ec:	1b64      	subs	r4, r4, r5
 80066ee:	10a4      	asrs	r4, r4, #2
 80066f0:	2600      	movs	r6, #0
 80066f2:	42a6      	cmp	r6, r4
 80066f4:	d105      	bne.n	8006702 <__libc_init_array+0x2e>
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066fc:	4798      	blx	r3
 80066fe:	3601      	adds	r6, #1
 8006700:	e7ee      	b.n	80066e0 <__libc_init_array+0xc>
 8006702:	f855 3b04 	ldr.w	r3, [r5], #4
 8006706:	4798      	blx	r3
 8006708:	3601      	adds	r6, #1
 800670a:	e7f2      	b.n	80066f2 <__libc_init_array+0x1e>
 800670c:	0800c2c4 	.word	0x0800c2c4
 8006710:	0800c2c4 	.word	0x0800c2c4
 8006714:	0800c2c4 	.word	0x0800c2c4
 8006718:	0800c2c8 	.word	0x0800c2c8

0800671c <memset>:
 800671c:	4402      	add	r2, r0
 800671e:	4603      	mov	r3, r0
 8006720:	4293      	cmp	r3, r2
 8006722:	d100      	bne.n	8006726 <memset+0xa>
 8006724:	4770      	bx	lr
 8006726:	f803 1b01 	strb.w	r1, [r3], #1
 800672a:	e7f9      	b.n	8006720 <memset+0x4>

0800672c <__cvt>:
 800672c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	ec55 4b10 	vmov	r4, r5, d0
 8006734:	2d00      	cmp	r5, #0
 8006736:	460e      	mov	r6, r1
 8006738:	4619      	mov	r1, r3
 800673a:	462b      	mov	r3, r5
 800673c:	bfbb      	ittet	lt
 800673e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006742:	461d      	movlt	r5, r3
 8006744:	2300      	movge	r3, #0
 8006746:	232d      	movlt	r3, #45	; 0x2d
 8006748:	700b      	strb	r3, [r1, #0]
 800674a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800674c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006750:	4691      	mov	r9, r2
 8006752:	f023 0820 	bic.w	r8, r3, #32
 8006756:	bfbc      	itt	lt
 8006758:	4622      	movlt	r2, r4
 800675a:	4614      	movlt	r4, r2
 800675c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006760:	d005      	beq.n	800676e <__cvt+0x42>
 8006762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006766:	d100      	bne.n	800676a <__cvt+0x3e>
 8006768:	3601      	adds	r6, #1
 800676a:	2102      	movs	r1, #2
 800676c:	e000      	b.n	8006770 <__cvt+0x44>
 800676e:	2103      	movs	r1, #3
 8006770:	ab03      	add	r3, sp, #12
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	ab02      	add	r3, sp, #8
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	ec45 4b10 	vmov	d0, r4, r5
 800677c:	4653      	mov	r3, sl
 800677e:	4632      	mov	r2, r6
 8006780:	f001 fdae 	bl	80082e0 <_dtoa_r>
 8006784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006788:	4607      	mov	r7, r0
 800678a:	d102      	bne.n	8006792 <__cvt+0x66>
 800678c:	f019 0f01 	tst.w	r9, #1
 8006790:	d022      	beq.n	80067d8 <__cvt+0xac>
 8006792:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006796:	eb07 0906 	add.w	r9, r7, r6
 800679a:	d110      	bne.n	80067be <__cvt+0x92>
 800679c:	783b      	ldrb	r3, [r7, #0]
 800679e:	2b30      	cmp	r3, #48	; 0x30
 80067a0:	d10a      	bne.n	80067b8 <__cvt+0x8c>
 80067a2:	2200      	movs	r2, #0
 80067a4:	2300      	movs	r3, #0
 80067a6:	4620      	mov	r0, r4
 80067a8:	4629      	mov	r1, r5
 80067aa:	f7fa f9a5 	bl	8000af8 <__aeabi_dcmpeq>
 80067ae:	b918      	cbnz	r0, 80067b8 <__cvt+0x8c>
 80067b0:	f1c6 0601 	rsb	r6, r6, #1
 80067b4:	f8ca 6000 	str.w	r6, [sl]
 80067b8:	f8da 3000 	ldr.w	r3, [sl]
 80067bc:	4499      	add	r9, r3
 80067be:	2200      	movs	r2, #0
 80067c0:	2300      	movs	r3, #0
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7fa f997 	bl	8000af8 <__aeabi_dcmpeq>
 80067ca:	b108      	cbz	r0, 80067d0 <__cvt+0xa4>
 80067cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80067d0:	2230      	movs	r2, #48	; 0x30
 80067d2:	9b03      	ldr	r3, [sp, #12]
 80067d4:	454b      	cmp	r3, r9
 80067d6:	d307      	bcc.n	80067e8 <__cvt+0xbc>
 80067d8:	9b03      	ldr	r3, [sp, #12]
 80067da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067dc:	1bdb      	subs	r3, r3, r7
 80067de:	4638      	mov	r0, r7
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	b004      	add	sp, #16
 80067e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	9103      	str	r1, [sp, #12]
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e7f0      	b.n	80067d2 <__cvt+0xa6>

080067f0 <__exponent>:
 80067f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f2:	4603      	mov	r3, r0
 80067f4:	2900      	cmp	r1, #0
 80067f6:	bfb8      	it	lt
 80067f8:	4249      	neglt	r1, r1
 80067fa:	f803 2b02 	strb.w	r2, [r3], #2
 80067fe:	bfb4      	ite	lt
 8006800:	222d      	movlt	r2, #45	; 0x2d
 8006802:	222b      	movge	r2, #43	; 0x2b
 8006804:	2909      	cmp	r1, #9
 8006806:	7042      	strb	r2, [r0, #1]
 8006808:	dd2a      	ble.n	8006860 <__exponent+0x70>
 800680a:	f10d 0407 	add.w	r4, sp, #7
 800680e:	46a4      	mov	ip, r4
 8006810:	270a      	movs	r7, #10
 8006812:	46a6      	mov	lr, r4
 8006814:	460a      	mov	r2, r1
 8006816:	fb91 f6f7 	sdiv	r6, r1, r7
 800681a:	fb07 1516 	mls	r5, r7, r6, r1
 800681e:	3530      	adds	r5, #48	; 0x30
 8006820:	2a63      	cmp	r2, #99	; 0x63
 8006822:	f104 34ff 	add.w	r4, r4, #4294967295
 8006826:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800682a:	4631      	mov	r1, r6
 800682c:	dcf1      	bgt.n	8006812 <__exponent+0x22>
 800682e:	3130      	adds	r1, #48	; 0x30
 8006830:	f1ae 0502 	sub.w	r5, lr, #2
 8006834:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006838:	1c44      	adds	r4, r0, #1
 800683a:	4629      	mov	r1, r5
 800683c:	4561      	cmp	r1, ip
 800683e:	d30a      	bcc.n	8006856 <__exponent+0x66>
 8006840:	f10d 0209 	add.w	r2, sp, #9
 8006844:	eba2 020e 	sub.w	r2, r2, lr
 8006848:	4565      	cmp	r5, ip
 800684a:	bf88      	it	hi
 800684c:	2200      	movhi	r2, #0
 800684e:	4413      	add	r3, r2
 8006850:	1a18      	subs	r0, r3, r0
 8006852:	b003      	add	sp, #12
 8006854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800685a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800685e:	e7ed      	b.n	800683c <__exponent+0x4c>
 8006860:	2330      	movs	r3, #48	; 0x30
 8006862:	3130      	adds	r1, #48	; 0x30
 8006864:	7083      	strb	r3, [r0, #2]
 8006866:	70c1      	strb	r1, [r0, #3]
 8006868:	1d03      	adds	r3, r0, #4
 800686a:	e7f1      	b.n	8006850 <__exponent+0x60>

0800686c <_printf_float>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	ed2d 8b02 	vpush	{d8}
 8006874:	b08d      	sub	sp, #52	; 0x34
 8006876:	460c      	mov	r4, r1
 8006878:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800687c:	4616      	mov	r6, r2
 800687e:	461f      	mov	r7, r3
 8006880:	4605      	mov	r5, r0
 8006882:	f002 fe8b 	bl	800959c <_localeconv_r>
 8006886:	f8d0 a000 	ldr.w	sl, [r0]
 800688a:	4650      	mov	r0, sl
 800688c:	f7f9 fcb2 	bl	80001f4 <strlen>
 8006890:	2300      	movs	r3, #0
 8006892:	930a      	str	r3, [sp, #40]	; 0x28
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	9305      	str	r3, [sp, #20]
 8006898:	f8d8 3000 	ldr.w	r3, [r8]
 800689c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068a0:	3307      	adds	r3, #7
 80068a2:	f023 0307 	bic.w	r3, r3, #7
 80068a6:	f103 0208 	add.w	r2, r3, #8
 80068aa:	f8c8 2000 	str.w	r2, [r8]
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068be:	9307      	str	r3, [sp, #28]
 80068c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80068c4:	ee08 0a10 	vmov	s16, r0
 80068c8:	4b9f      	ldr	r3, [pc, #636]	; (8006b48 <_printf_float+0x2dc>)
 80068ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ce:	f04f 32ff 	mov.w	r2, #4294967295
 80068d2:	f7fa f943 	bl	8000b5c <__aeabi_dcmpun>
 80068d6:	bb88      	cbnz	r0, 800693c <_printf_float+0xd0>
 80068d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068dc:	4b9a      	ldr	r3, [pc, #616]	; (8006b48 <_printf_float+0x2dc>)
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	f7fa f91d 	bl	8000b20 <__aeabi_dcmple>
 80068e6:	bb48      	cbnz	r0, 800693c <_printf_float+0xd0>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7fa f90c 	bl	8000b0c <__aeabi_dcmplt>
 80068f4:	b110      	cbz	r0, 80068fc <_printf_float+0x90>
 80068f6:	232d      	movs	r3, #45	; 0x2d
 80068f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068fc:	4b93      	ldr	r3, [pc, #588]	; (8006b4c <_printf_float+0x2e0>)
 80068fe:	4894      	ldr	r0, [pc, #592]	; (8006b50 <_printf_float+0x2e4>)
 8006900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006904:	bf94      	ite	ls
 8006906:	4698      	movls	r8, r3
 8006908:	4680      	movhi	r8, r0
 800690a:	2303      	movs	r3, #3
 800690c:	6123      	str	r3, [r4, #16]
 800690e:	9b05      	ldr	r3, [sp, #20]
 8006910:	f023 0204 	bic.w	r2, r3, #4
 8006914:	6022      	str	r2, [r4, #0]
 8006916:	f04f 0900 	mov.w	r9, #0
 800691a:	9700      	str	r7, [sp, #0]
 800691c:	4633      	mov	r3, r6
 800691e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006920:	4621      	mov	r1, r4
 8006922:	4628      	mov	r0, r5
 8006924:	f000 f9d8 	bl	8006cd8 <_printf_common>
 8006928:	3001      	adds	r0, #1
 800692a:	f040 8090 	bne.w	8006a4e <_printf_float+0x1e2>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	b00d      	add	sp, #52	; 0x34
 8006934:	ecbd 8b02 	vpop	{d8}
 8006938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693c:	4642      	mov	r2, r8
 800693e:	464b      	mov	r3, r9
 8006940:	4640      	mov	r0, r8
 8006942:	4649      	mov	r1, r9
 8006944:	f7fa f90a 	bl	8000b5c <__aeabi_dcmpun>
 8006948:	b140      	cbz	r0, 800695c <_printf_float+0xf0>
 800694a:	464b      	mov	r3, r9
 800694c:	2b00      	cmp	r3, #0
 800694e:	bfbc      	itt	lt
 8006950:	232d      	movlt	r3, #45	; 0x2d
 8006952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006956:	487f      	ldr	r0, [pc, #508]	; (8006b54 <_printf_float+0x2e8>)
 8006958:	4b7f      	ldr	r3, [pc, #508]	; (8006b58 <_printf_float+0x2ec>)
 800695a:	e7d1      	b.n	8006900 <_printf_float+0x94>
 800695c:	6863      	ldr	r3, [r4, #4]
 800695e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006962:	9206      	str	r2, [sp, #24]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	d13f      	bne.n	80069e8 <_printf_float+0x17c>
 8006968:	2306      	movs	r3, #6
 800696a:	6063      	str	r3, [r4, #4]
 800696c:	9b05      	ldr	r3, [sp, #20]
 800696e:	6861      	ldr	r1, [r4, #4]
 8006970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006974:	2300      	movs	r3, #0
 8006976:	9303      	str	r3, [sp, #12]
 8006978:	ab0a      	add	r3, sp, #40	; 0x28
 800697a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800697e:	ab09      	add	r3, sp, #36	; 0x24
 8006980:	ec49 8b10 	vmov	d0, r8, r9
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	6022      	str	r2, [r4, #0]
 8006988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800698c:	4628      	mov	r0, r5
 800698e:	f7ff fecd 	bl	800672c <__cvt>
 8006992:	9b06      	ldr	r3, [sp, #24]
 8006994:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006996:	2b47      	cmp	r3, #71	; 0x47
 8006998:	4680      	mov	r8, r0
 800699a:	d108      	bne.n	80069ae <_printf_float+0x142>
 800699c:	1cc8      	adds	r0, r1, #3
 800699e:	db02      	blt.n	80069a6 <_printf_float+0x13a>
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	4299      	cmp	r1, r3
 80069a4:	dd41      	ble.n	8006a2a <_printf_float+0x1be>
 80069a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80069aa:	fa5f fb8b 	uxtb.w	fp, fp
 80069ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069b2:	d820      	bhi.n	80069f6 <_printf_float+0x18a>
 80069b4:	3901      	subs	r1, #1
 80069b6:	465a      	mov	r2, fp
 80069b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069bc:	9109      	str	r1, [sp, #36]	; 0x24
 80069be:	f7ff ff17 	bl	80067f0 <__exponent>
 80069c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c4:	1813      	adds	r3, r2, r0
 80069c6:	2a01      	cmp	r2, #1
 80069c8:	4681      	mov	r9, r0
 80069ca:	6123      	str	r3, [r4, #16]
 80069cc:	dc02      	bgt.n	80069d4 <_printf_float+0x168>
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	07d2      	lsls	r2, r2, #31
 80069d2:	d501      	bpl.n	80069d8 <_printf_float+0x16c>
 80069d4:	3301      	adds	r3, #1
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d09c      	beq.n	800691a <_printf_float+0xae>
 80069e0:	232d      	movs	r3, #45	; 0x2d
 80069e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e6:	e798      	b.n	800691a <_printf_float+0xae>
 80069e8:	9a06      	ldr	r2, [sp, #24]
 80069ea:	2a47      	cmp	r2, #71	; 0x47
 80069ec:	d1be      	bne.n	800696c <_printf_float+0x100>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1bc      	bne.n	800696c <_printf_float+0x100>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e7b9      	b.n	800696a <_printf_float+0xfe>
 80069f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069fa:	d118      	bne.n	8006a2e <_printf_float+0x1c2>
 80069fc:	2900      	cmp	r1, #0
 80069fe:	6863      	ldr	r3, [r4, #4]
 8006a00:	dd0b      	ble.n	8006a1a <_printf_float+0x1ae>
 8006a02:	6121      	str	r1, [r4, #16]
 8006a04:	b913      	cbnz	r3, 8006a0c <_printf_float+0x1a0>
 8006a06:	6822      	ldr	r2, [r4, #0]
 8006a08:	07d0      	lsls	r0, r2, #31
 8006a0a:	d502      	bpl.n	8006a12 <_printf_float+0x1a6>
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	440b      	add	r3, r1
 8006a10:	6123      	str	r3, [r4, #16]
 8006a12:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a14:	f04f 0900 	mov.w	r9, #0
 8006a18:	e7de      	b.n	80069d8 <_printf_float+0x16c>
 8006a1a:	b913      	cbnz	r3, 8006a22 <_printf_float+0x1b6>
 8006a1c:	6822      	ldr	r2, [r4, #0]
 8006a1e:	07d2      	lsls	r2, r2, #31
 8006a20:	d501      	bpl.n	8006a26 <_printf_float+0x1ba>
 8006a22:	3302      	adds	r3, #2
 8006a24:	e7f4      	b.n	8006a10 <_printf_float+0x1a4>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e7f2      	b.n	8006a10 <_printf_float+0x1a4>
 8006a2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a30:	4299      	cmp	r1, r3
 8006a32:	db05      	blt.n	8006a40 <_printf_float+0x1d4>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	6121      	str	r1, [r4, #16]
 8006a38:	07d8      	lsls	r0, r3, #31
 8006a3a:	d5ea      	bpl.n	8006a12 <_printf_float+0x1a6>
 8006a3c:	1c4b      	adds	r3, r1, #1
 8006a3e:	e7e7      	b.n	8006a10 <_printf_float+0x1a4>
 8006a40:	2900      	cmp	r1, #0
 8006a42:	bfd4      	ite	le
 8006a44:	f1c1 0202 	rsble	r2, r1, #2
 8006a48:	2201      	movgt	r2, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	e7e0      	b.n	8006a10 <_printf_float+0x1a4>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	055a      	lsls	r2, r3, #21
 8006a52:	d407      	bmi.n	8006a64 <_printf_float+0x1f8>
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	4642      	mov	r2, r8
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d12c      	bne.n	8006abc <_printf_float+0x250>
 8006a62:	e764      	b.n	800692e <_printf_float+0xc2>
 8006a64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a68:	f240 80e0 	bls.w	8006c2c <_printf_float+0x3c0>
 8006a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a70:	2200      	movs	r2, #0
 8006a72:	2300      	movs	r3, #0
 8006a74:	f7fa f840 	bl	8000af8 <__aeabi_dcmpeq>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d034      	beq.n	8006ae6 <_printf_float+0x27a>
 8006a7c:	4a37      	ldr	r2, [pc, #220]	; (8006b5c <_printf_float+0x2f0>)
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f af51 	beq.w	800692e <_printf_float+0xc2>
 8006a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a90:	429a      	cmp	r2, r3
 8006a92:	db02      	blt.n	8006a9a <_printf_float+0x22e>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	07d8      	lsls	r0, r3, #31
 8006a98:	d510      	bpl.n	8006abc <_printf_float+0x250>
 8006a9a:	ee18 3a10 	vmov	r3, s16
 8006a9e:	4652      	mov	r2, sl
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f af41 	beq.w	800692e <_printf_float+0xc2>
 8006aac:	f04f 0800 	mov.w	r8, #0
 8006ab0:	f104 091a 	add.w	r9, r4, #26
 8006ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	4543      	cmp	r3, r8
 8006aba:	dc09      	bgt.n	8006ad0 <_printf_float+0x264>
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	079b      	lsls	r3, r3, #30
 8006ac0:	f100 8105 	bmi.w	8006cce <_printf_float+0x462>
 8006ac4:	68e0      	ldr	r0, [r4, #12]
 8006ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac8:	4298      	cmp	r0, r3
 8006aca:	bfb8      	it	lt
 8006acc:	4618      	movlt	r0, r3
 8006ace:	e730      	b.n	8006932 <_printf_float+0xc6>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	464a      	mov	r2, r9
 8006ad4:	4631      	mov	r1, r6
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	47b8      	blx	r7
 8006ada:	3001      	adds	r0, #1
 8006adc:	f43f af27 	beq.w	800692e <_printf_float+0xc2>
 8006ae0:	f108 0801 	add.w	r8, r8, #1
 8006ae4:	e7e6      	b.n	8006ab4 <_printf_float+0x248>
 8006ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dc39      	bgt.n	8006b60 <_printf_float+0x2f4>
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <_printf_float+0x2f0>)
 8006aee:	2301      	movs	r3, #1
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af19 	beq.w	800692e <_printf_float+0xc2>
 8006afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b00:	4313      	orrs	r3, r2
 8006b02:	d102      	bne.n	8006b0a <_printf_float+0x29e>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	07d9      	lsls	r1, r3, #31
 8006b08:	d5d8      	bpl.n	8006abc <_printf_float+0x250>
 8006b0a:	ee18 3a10 	vmov	r3, s16
 8006b0e:	4652      	mov	r2, sl
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	f43f af09 	beq.w	800692e <_printf_float+0xc2>
 8006b1c:	f04f 0900 	mov.w	r9, #0
 8006b20:	f104 0a1a 	add.w	sl, r4, #26
 8006b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b26:	425b      	negs	r3, r3
 8006b28:	454b      	cmp	r3, r9
 8006b2a:	dc01      	bgt.n	8006b30 <_printf_float+0x2c4>
 8006b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2e:	e792      	b.n	8006a56 <_printf_float+0x1ea>
 8006b30:	2301      	movs	r3, #1
 8006b32:	4652      	mov	r2, sl
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f aef7 	beq.w	800692e <_printf_float+0xc2>
 8006b40:	f109 0901 	add.w	r9, r9, #1
 8006b44:	e7ee      	b.n	8006b24 <_printf_float+0x2b8>
 8006b46:	bf00      	nop
 8006b48:	7fefffff 	.word	0x7fefffff
 8006b4c:	0800be18 	.word	0x0800be18
 8006b50:	0800be1c 	.word	0x0800be1c
 8006b54:	0800be24 	.word	0x0800be24
 8006b58:	0800be20 	.word	0x0800be20
 8006b5c:	0800be28 	.word	0x0800be28
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b64:	429a      	cmp	r2, r3
 8006b66:	bfa8      	it	ge
 8006b68:	461a      	movge	r2, r3
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	4691      	mov	r9, r2
 8006b6e:	dc37      	bgt.n	8006be0 <_printf_float+0x374>
 8006b70:	f04f 0b00 	mov.w	fp, #0
 8006b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b78:	f104 021a 	add.w	r2, r4, #26
 8006b7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b7e:	9305      	str	r3, [sp, #20]
 8006b80:	eba3 0309 	sub.w	r3, r3, r9
 8006b84:	455b      	cmp	r3, fp
 8006b86:	dc33      	bgt.n	8006bf0 <_printf_float+0x384>
 8006b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	db3b      	blt.n	8006c08 <_printf_float+0x39c>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	07da      	lsls	r2, r3, #31
 8006b94:	d438      	bmi.n	8006c08 <_printf_float+0x39c>
 8006b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b98:	9a05      	ldr	r2, [sp, #20]
 8006b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b9c:	1a9a      	subs	r2, r3, r2
 8006b9e:	eba3 0901 	sub.w	r9, r3, r1
 8006ba2:	4591      	cmp	r9, r2
 8006ba4:	bfa8      	it	ge
 8006ba6:	4691      	movge	r9, r2
 8006ba8:	f1b9 0f00 	cmp.w	r9, #0
 8006bac:	dc35      	bgt.n	8006c1a <_printf_float+0x3ae>
 8006bae:	f04f 0800 	mov.w	r8, #0
 8006bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bb6:	f104 0a1a 	add.w	sl, r4, #26
 8006bba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	eba3 0309 	sub.w	r3, r3, r9
 8006bc4:	4543      	cmp	r3, r8
 8006bc6:	f77f af79 	ble.w	8006abc <_printf_float+0x250>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4652      	mov	r2, sl
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f43f aeaa 	beq.w	800692e <_printf_float+0xc2>
 8006bda:	f108 0801 	add.w	r8, r8, #1
 8006bde:	e7ec      	b.n	8006bba <_printf_float+0x34e>
 8006be0:	4613      	mov	r3, r2
 8006be2:	4631      	mov	r1, r6
 8006be4:	4642      	mov	r2, r8
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	d1c0      	bne.n	8006b70 <_printf_float+0x304>
 8006bee:	e69e      	b.n	800692e <_printf_float+0xc2>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	9205      	str	r2, [sp, #20]
 8006bf8:	47b8      	blx	r7
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f43f ae97 	beq.w	800692e <_printf_float+0xc2>
 8006c00:	9a05      	ldr	r2, [sp, #20]
 8006c02:	f10b 0b01 	add.w	fp, fp, #1
 8006c06:	e7b9      	b.n	8006b7c <_printf_float+0x310>
 8006c08:	ee18 3a10 	vmov	r3, s16
 8006c0c:	4652      	mov	r2, sl
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	d1be      	bne.n	8006b96 <_printf_float+0x32a>
 8006c18:	e689      	b.n	800692e <_printf_float+0xc2>
 8006c1a:	9a05      	ldr	r2, [sp, #20]
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	4442      	add	r2, r8
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	d1c1      	bne.n	8006bae <_printf_float+0x342>
 8006c2a:	e680      	b.n	800692e <_printf_float+0xc2>
 8006c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2e:	2a01      	cmp	r2, #1
 8006c30:	dc01      	bgt.n	8006c36 <_printf_float+0x3ca>
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d538      	bpl.n	8006ca8 <_printf_float+0x43c>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4642      	mov	r2, r8
 8006c3a:	4631      	mov	r1, r6
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b8      	blx	r7
 8006c40:	3001      	adds	r0, #1
 8006c42:	f43f ae74 	beq.w	800692e <_printf_float+0xc2>
 8006c46:	ee18 3a10 	vmov	r3, s16
 8006c4a:	4652      	mov	r2, sl
 8006c4c:	4631      	mov	r1, r6
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b8      	blx	r7
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f ae6b 	beq.w	800692e <_printf_float+0xc2>
 8006c58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f7f9 ff4a 	bl	8000af8 <__aeabi_dcmpeq>
 8006c64:	b9d8      	cbnz	r0, 8006c9e <_printf_float+0x432>
 8006c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c68:	f108 0201 	add.w	r2, r8, #1
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	d10e      	bne.n	8006c96 <_printf_float+0x42a>
 8006c78:	e659      	b.n	800692e <_printf_float+0xc2>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f ae52 	beq.w	800692e <_printf_float+0xc2>
 8006c8a:	f108 0801 	add.w	r8, r8, #1
 8006c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c90:	3b01      	subs	r3, #1
 8006c92:	4543      	cmp	r3, r8
 8006c94:	dcf1      	bgt.n	8006c7a <_printf_float+0x40e>
 8006c96:	464b      	mov	r3, r9
 8006c98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c9c:	e6dc      	b.n	8006a58 <_printf_float+0x1ec>
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	f104 0a1a 	add.w	sl, r4, #26
 8006ca6:	e7f2      	b.n	8006c8e <_printf_float+0x422>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	4642      	mov	r2, r8
 8006cac:	e7df      	b.n	8006c6e <_printf_float+0x402>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	464a      	mov	r2, r9
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae38 	beq.w	800692e <_printf_float+0xc2>
 8006cbe:	f108 0801 	add.w	r8, r8, #1
 8006cc2:	68e3      	ldr	r3, [r4, #12]
 8006cc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cc6:	1a5b      	subs	r3, r3, r1
 8006cc8:	4543      	cmp	r3, r8
 8006cca:	dcf0      	bgt.n	8006cae <_printf_float+0x442>
 8006ccc:	e6fa      	b.n	8006ac4 <_printf_float+0x258>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	f104 0919 	add.w	r9, r4, #25
 8006cd6:	e7f4      	b.n	8006cc2 <_printf_float+0x456>

08006cd8 <_printf_common>:
 8006cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cdc:	4616      	mov	r6, r2
 8006cde:	4699      	mov	r9, r3
 8006ce0:	688a      	ldr	r2, [r1, #8]
 8006ce2:	690b      	ldr	r3, [r1, #16]
 8006ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	bfb8      	it	lt
 8006cec:	4613      	movlt	r3, r2
 8006cee:	6033      	str	r3, [r6, #0]
 8006cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	b10a      	cbz	r2, 8006cfe <_printf_common+0x26>
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	0699      	lsls	r1, r3, #26
 8006d02:	bf42      	ittt	mi
 8006d04:	6833      	ldrmi	r3, [r6, #0]
 8006d06:	3302      	addmi	r3, #2
 8006d08:	6033      	strmi	r3, [r6, #0]
 8006d0a:	6825      	ldr	r5, [r4, #0]
 8006d0c:	f015 0506 	ands.w	r5, r5, #6
 8006d10:	d106      	bne.n	8006d20 <_printf_common+0x48>
 8006d12:	f104 0a19 	add.w	sl, r4, #25
 8006d16:	68e3      	ldr	r3, [r4, #12]
 8006d18:	6832      	ldr	r2, [r6, #0]
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	42ab      	cmp	r3, r5
 8006d1e:	dc26      	bgt.n	8006d6e <_printf_common+0x96>
 8006d20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d24:	1e13      	subs	r3, r2, #0
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	bf18      	it	ne
 8006d2a:	2301      	movne	r3, #1
 8006d2c:	0692      	lsls	r2, r2, #26
 8006d2e:	d42b      	bmi.n	8006d88 <_printf_common+0xb0>
 8006d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d34:	4649      	mov	r1, r9
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c0      	blx	r8
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d01e      	beq.n	8006d7c <_printf_common+0xa4>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	68e5      	ldr	r5, [r4, #12]
 8006d42:	6832      	ldr	r2, [r6, #0]
 8006d44:	f003 0306 	and.w	r3, r3, #6
 8006d48:	2b04      	cmp	r3, #4
 8006d4a:	bf08      	it	eq
 8006d4c:	1aad      	subeq	r5, r5, r2
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	6922      	ldr	r2, [r4, #16]
 8006d52:	bf0c      	ite	eq
 8006d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d58:	2500      	movne	r5, #0
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	bfc4      	itt	gt
 8006d5e:	1a9b      	subgt	r3, r3, r2
 8006d60:	18ed      	addgt	r5, r5, r3
 8006d62:	2600      	movs	r6, #0
 8006d64:	341a      	adds	r4, #26
 8006d66:	42b5      	cmp	r5, r6
 8006d68:	d11a      	bne.n	8006da0 <_printf_common+0xc8>
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	e008      	b.n	8006d80 <_printf_common+0xa8>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4652      	mov	r2, sl
 8006d72:	4649      	mov	r1, r9
 8006d74:	4638      	mov	r0, r7
 8006d76:	47c0      	blx	r8
 8006d78:	3001      	adds	r0, #1
 8006d7a:	d103      	bne.n	8006d84 <_printf_common+0xac>
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d84:	3501      	adds	r5, #1
 8006d86:	e7c6      	b.n	8006d16 <_printf_common+0x3e>
 8006d88:	18e1      	adds	r1, r4, r3
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	2030      	movs	r0, #48	; 0x30
 8006d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d92:	4422      	add	r2, r4
 8006d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	e7c7      	b.n	8006d30 <_printf_common+0x58>
 8006da0:	2301      	movs	r3, #1
 8006da2:	4622      	mov	r2, r4
 8006da4:	4649      	mov	r1, r9
 8006da6:	4638      	mov	r0, r7
 8006da8:	47c0      	blx	r8
 8006daa:	3001      	adds	r0, #1
 8006dac:	d0e6      	beq.n	8006d7c <_printf_common+0xa4>
 8006dae:	3601      	adds	r6, #1
 8006db0:	e7d9      	b.n	8006d66 <_printf_common+0x8e>
	...

08006db4 <_printf_i>:
 8006db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	7e0f      	ldrb	r7, [r1, #24]
 8006dba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dbc:	2f78      	cmp	r7, #120	; 0x78
 8006dbe:	4691      	mov	r9, r2
 8006dc0:	4680      	mov	r8, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	469a      	mov	sl, r3
 8006dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dca:	d807      	bhi.n	8006ddc <_printf_i+0x28>
 8006dcc:	2f62      	cmp	r7, #98	; 0x62
 8006dce:	d80a      	bhi.n	8006de6 <_printf_i+0x32>
 8006dd0:	2f00      	cmp	r7, #0
 8006dd2:	f000 80d8 	beq.w	8006f86 <_printf_i+0x1d2>
 8006dd6:	2f58      	cmp	r7, #88	; 0x58
 8006dd8:	f000 80a3 	beq.w	8006f22 <_printf_i+0x16e>
 8006ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006de4:	e03a      	b.n	8006e5c <_printf_i+0xa8>
 8006de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dea:	2b15      	cmp	r3, #21
 8006dec:	d8f6      	bhi.n	8006ddc <_printf_i+0x28>
 8006dee:	a101      	add	r1, pc, #4	; (adr r1, 8006df4 <_printf_i+0x40>)
 8006df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df4:	08006e4d 	.word	0x08006e4d
 8006df8:	08006e61 	.word	0x08006e61
 8006dfc:	08006ddd 	.word	0x08006ddd
 8006e00:	08006ddd 	.word	0x08006ddd
 8006e04:	08006ddd 	.word	0x08006ddd
 8006e08:	08006ddd 	.word	0x08006ddd
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006ddd 	.word	0x08006ddd
 8006e14:	08006ddd 	.word	0x08006ddd
 8006e18:	08006ddd 	.word	0x08006ddd
 8006e1c:	08006ddd 	.word	0x08006ddd
 8006e20:	08006f6d 	.word	0x08006f6d
 8006e24:	08006e91 	.word	0x08006e91
 8006e28:	08006f4f 	.word	0x08006f4f
 8006e2c:	08006ddd 	.word	0x08006ddd
 8006e30:	08006ddd 	.word	0x08006ddd
 8006e34:	08006f8f 	.word	0x08006f8f
 8006e38:	08006ddd 	.word	0x08006ddd
 8006e3c:	08006e91 	.word	0x08006e91
 8006e40:	08006ddd 	.word	0x08006ddd
 8006e44:	08006ddd 	.word	0x08006ddd
 8006e48:	08006f57 	.word	0x08006f57
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	1d1a      	adds	r2, r3, #4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	602a      	str	r2, [r5, #0]
 8006e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0a3      	b.n	8006fa8 <_printf_i+0x1f4>
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	6829      	ldr	r1, [r5, #0]
 8006e64:	0606      	lsls	r6, r0, #24
 8006e66:	f101 0304 	add.w	r3, r1, #4
 8006e6a:	d50a      	bpl.n	8006e82 <_printf_i+0xce>
 8006e6c:	680e      	ldr	r6, [r1, #0]
 8006e6e:	602b      	str	r3, [r5, #0]
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	da03      	bge.n	8006e7c <_printf_i+0xc8>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	4276      	negs	r6, r6
 8006e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7c:	485e      	ldr	r0, [pc, #376]	; (8006ff8 <_printf_i+0x244>)
 8006e7e:	230a      	movs	r3, #10
 8006e80:	e019      	b.n	8006eb6 <_printf_i+0x102>
 8006e82:	680e      	ldr	r6, [r1, #0]
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e8a:	bf18      	it	ne
 8006e8c:	b236      	sxthne	r6, r6
 8006e8e:	e7ef      	b.n	8006e70 <_printf_i+0xbc>
 8006e90:	682b      	ldr	r3, [r5, #0]
 8006e92:	6820      	ldr	r0, [r4, #0]
 8006e94:	1d19      	adds	r1, r3, #4
 8006e96:	6029      	str	r1, [r5, #0]
 8006e98:	0601      	lsls	r1, r0, #24
 8006e9a:	d501      	bpl.n	8006ea0 <_printf_i+0xec>
 8006e9c:	681e      	ldr	r6, [r3, #0]
 8006e9e:	e002      	b.n	8006ea6 <_printf_i+0xf2>
 8006ea0:	0646      	lsls	r6, r0, #25
 8006ea2:	d5fb      	bpl.n	8006e9c <_printf_i+0xe8>
 8006ea4:	881e      	ldrh	r6, [r3, #0]
 8006ea6:	4854      	ldr	r0, [pc, #336]	; (8006ff8 <_printf_i+0x244>)
 8006ea8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eaa:	bf0c      	ite	eq
 8006eac:	2308      	moveq	r3, #8
 8006eae:	230a      	movne	r3, #10
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eb6:	6865      	ldr	r5, [r4, #4]
 8006eb8:	60a5      	str	r5, [r4, #8]
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	bfa2      	ittt	ge
 8006ebe:	6821      	ldrge	r1, [r4, #0]
 8006ec0:	f021 0104 	bicge.w	r1, r1, #4
 8006ec4:	6021      	strge	r1, [r4, #0]
 8006ec6:	b90e      	cbnz	r6, 8006ecc <_printf_i+0x118>
 8006ec8:	2d00      	cmp	r5, #0
 8006eca:	d04d      	beq.n	8006f68 <_printf_i+0x1b4>
 8006ecc:	4615      	mov	r5, r2
 8006ece:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ed2:	fb03 6711 	mls	r7, r3, r1, r6
 8006ed6:	5dc7      	ldrb	r7, [r0, r7]
 8006ed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006edc:	4637      	mov	r7, r6
 8006ede:	42bb      	cmp	r3, r7
 8006ee0:	460e      	mov	r6, r1
 8006ee2:	d9f4      	bls.n	8006ece <_printf_i+0x11a>
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d10b      	bne.n	8006f00 <_printf_i+0x14c>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	07de      	lsls	r6, r3, #31
 8006eec:	d508      	bpl.n	8006f00 <_printf_i+0x14c>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	6861      	ldr	r1, [r4, #4]
 8006ef2:	4299      	cmp	r1, r3
 8006ef4:	bfde      	ittt	le
 8006ef6:	2330      	movle	r3, #48	; 0x30
 8006ef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006efc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f00:	1b52      	subs	r2, r2, r5
 8006f02:	6122      	str	r2, [r4, #16]
 8006f04:	f8cd a000 	str.w	sl, [sp]
 8006f08:	464b      	mov	r3, r9
 8006f0a:	aa03      	add	r2, sp, #12
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4640      	mov	r0, r8
 8006f10:	f7ff fee2 	bl	8006cd8 <_printf_common>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d14c      	bne.n	8006fb2 <_printf_i+0x1fe>
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	b004      	add	sp, #16
 8006f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f22:	4835      	ldr	r0, [pc, #212]	; (8006ff8 <_printf_i+0x244>)
 8006f24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f28:	6829      	ldr	r1, [r5, #0]
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f30:	6029      	str	r1, [r5, #0]
 8006f32:	061d      	lsls	r5, r3, #24
 8006f34:	d514      	bpl.n	8006f60 <_printf_i+0x1ac>
 8006f36:	07df      	lsls	r7, r3, #31
 8006f38:	bf44      	itt	mi
 8006f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f3e:	6023      	strmi	r3, [r4, #0]
 8006f40:	b91e      	cbnz	r6, 8006f4a <_printf_i+0x196>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	f023 0320 	bic.w	r3, r3, #32
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	e7b0      	b.n	8006eb0 <_printf_i+0xfc>
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	f043 0320 	orr.w	r3, r3, #32
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	2378      	movs	r3, #120	; 0x78
 8006f58:	4828      	ldr	r0, [pc, #160]	; (8006ffc <_printf_i+0x248>)
 8006f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f5e:	e7e3      	b.n	8006f28 <_printf_i+0x174>
 8006f60:	0659      	lsls	r1, r3, #25
 8006f62:	bf48      	it	mi
 8006f64:	b2b6      	uxthmi	r6, r6
 8006f66:	e7e6      	b.n	8006f36 <_printf_i+0x182>
 8006f68:	4615      	mov	r5, r2
 8006f6a:	e7bb      	b.n	8006ee4 <_printf_i+0x130>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	6826      	ldr	r6, [r4, #0]
 8006f70:	6961      	ldr	r1, [r4, #20]
 8006f72:	1d18      	adds	r0, r3, #4
 8006f74:	6028      	str	r0, [r5, #0]
 8006f76:	0635      	lsls	r5, r6, #24
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	d501      	bpl.n	8006f80 <_printf_i+0x1cc>
 8006f7c:	6019      	str	r1, [r3, #0]
 8006f7e:	e002      	b.n	8006f86 <_printf_i+0x1d2>
 8006f80:	0670      	lsls	r0, r6, #25
 8006f82:	d5fb      	bpl.n	8006f7c <_printf_i+0x1c8>
 8006f84:	8019      	strh	r1, [r3, #0]
 8006f86:	2300      	movs	r3, #0
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	4615      	mov	r5, r2
 8006f8c:	e7ba      	b.n	8006f04 <_printf_i+0x150>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	1d1a      	adds	r2, r3, #4
 8006f92:	602a      	str	r2, [r5, #0]
 8006f94:	681d      	ldr	r5, [r3, #0]
 8006f96:	6862      	ldr	r2, [r4, #4]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7f9 f938 	bl	8000210 <memchr>
 8006fa0:	b108      	cbz	r0, 8006fa6 <_printf_i+0x1f2>
 8006fa2:	1b40      	subs	r0, r0, r5
 8006fa4:	6060      	str	r0, [r4, #4]
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	6123      	str	r3, [r4, #16]
 8006faa:	2300      	movs	r3, #0
 8006fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fb0:	e7a8      	b.n	8006f04 <_printf_i+0x150>
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	462a      	mov	r2, r5
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d0ab      	beq.n	8006f18 <_printf_i+0x164>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	079b      	lsls	r3, r3, #30
 8006fc4:	d413      	bmi.n	8006fee <_printf_i+0x23a>
 8006fc6:	68e0      	ldr	r0, [r4, #12]
 8006fc8:	9b03      	ldr	r3, [sp, #12]
 8006fca:	4298      	cmp	r0, r3
 8006fcc:	bfb8      	it	lt
 8006fce:	4618      	movlt	r0, r3
 8006fd0:	e7a4      	b.n	8006f1c <_printf_i+0x168>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	47d0      	blx	sl
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d09b      	beq.n	8006f18 <_printf_i+0x164>
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	68e3      	ldr	r3, [r4, #12]
 8006fe4:	9903      	ldr	r1, [sp, #12]
 8006fe6:	1a5b      	subs	r3, r3, r1
 8006fe8:	42ab      	cmp	r3, r5
 8006fea:	dcf2      	bgt.n	8006fd2 <_printf_i+0x21e>
 8006fec:	e7eb      	b.n	8006fc6 <_printf_i+0x212>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	f104 0619 	add.w	r6, r4, #25
 8006ff4:	e7f5      	b.n	8006fe2 <_printf_i+0x22e>
 8006ff6:	bf00      	nop
 8006ff8:	0800be2a 	.word	0x0800be2a
 8006ffc:	0800be3b 	.word	0x0800be3b

08007000 <_scanf_float>:
 8007000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007004:	b087      	sub	sp, #28
 8007006:	4617      	mov	r7, r2
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	688b      	ldr	r3, [r1, #8]
 800700c:	1e5a      	subs	r2, r3, #1
 800700e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007012:	bf83      	ittte	hi
 8007014:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007018:	195b      	addhi	r3, r3, r5
 800701a:	9302      	strhi	r3, [sp, #8]
 800701c:	2300      	movls	r3, #0
 800701e:	bf86      	itte	hi
 8007020:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007024:	608b      	strhi	r3, [r1, #8]
 8007026:	9302      	strls	r3, [sp, #8]
 8007028:	680b      	ldr	r3, [r1, #0]
 800702a:	468b      	mov	fp, r1
 800702c:	2500      	movs	r5, #0
 800702e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007032:	f84b 3b1c 	str.w	r3, [fp], #28
 8007036:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800703a:	4680      	mov	r8, r0
 800703c:	460c      	mov	r4, r1
 800703e:	465e      	mov	r6, fp
 8007040:	46aa      	mov	sl, r5
 8007042:	46a9      	mov	r9, r5
 8007044:	9501      	str	r5, [sp, #4]
 8007046:	68a2      	ldr	r2, [r4, #8]
 8007048:	b152      	cbz	r2, 8007060 <_scanf_float+0x60>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b4e      	cmp	r3, #78	; 0x4e
 8007050:	d864      	bhi.n	800711c <_scanf_float+0x11c>
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d83c      	bhi.n	80070d0 <_scanf_float+0xd0>
 8007056:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800705a:	b2c8      	uxtb	r0, r1
 800705c:	280e      	cmp	r0, #14
 800705e:	d93a      	bls.n	80070d6 <_scanf_float+0xd6>
 8007060:	f1b9 0f00 	cmp.w	r9, #0
 8007064:	d003      	beq.n	800706e <_scanf_float+0x6e>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007072:	f1ba 0f01 	cmp.w	sl, #1
 8007076:	f200 8113 	bhi.w	80072a0 <_scanf_float+0x2a0>
 800707a:	455e      	cmp	r6, fp
 800707c:	f200 8105 	bhi.w	800728a <_scanf_float+0x28a>
 8007080:	2501      	movs	r5, #1
 8007082:	4628      	mov	r0, r5
 8007084:	b007      	add	sp, #28
 8007086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800708a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800708e:	2a0d      	cmp	r2, #13
 8007090:	d8e6      	bhi.n	8007060 <_scanf_float+0x60>
 8007092:	a101      	add	r1, pc, #4	; (adr r1, 8007098 <_scanf_float+0x98>)
 8007094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007098:	080071d7 	.word	0x080071d7
 800709c:	08007061 	.word	0x08007061
 80070a0:	08007061 	.word	0x08007061
 80070a4:	08007061 	.word	0x08007061
 80070a8:	08007237 	.word	0x08007237
 80070ac:	0800720f 	.word	0x0800720f
 80070b0:	08007061 	.word	0x08007061
 80070b4:	08007061 	.word	0x08007061
 80070b8:	080071e5 	.word	0x080071e5
 80070bc:	08007061 	.word	0x08007061
 80070c0:	08007061 	.word	0x08007061
 80070c4:	08007061 	.word	0x08007061
 80070c8:	08007061 	.word	0x08007061
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80070d4:	e7db      	b.n	800708e <_scanf_float+0x8e>
 80070d6:	290e      	cmp	r1, #14
 80070d8:	d8c2      	bhi.n	8007060 <_scanf_float+0x60>
 80070da:	a001      	add	r0, pc, #4	; (adr r0, 80070e0 <_scanf_float+0xe0>)
 80070dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070e0:	0800718f 	.word	0x0800718f
 80070e4:	08007061 	.word	0x08007061
 80070e8:	0800718f 	.word	0x0800718f
 80070ec:	08007223 	.word	0x08007223
 80070f0:	08007061 	.word	0x08007061
 80070f4:	0800713d 	.word	0x0800713d
 80070f8:	08007179 	.word	0x08007179
 80070fc:	08007179 	.word	0x08007179
 8007100:	08007179 	.word	0x08007179
 8007104:	08007179 	.word	0x08007179
 8007108:	08007179 	.word	0x08007179
 800710c:	08007179 	.word	0x08007179
 8007110:	08007179 	.word	0x08007179
 8007114:	08007179 	.word	0x08007179
 8007118:	08007179 	.word	0x08007179
 800711c:	2b6e      	cmp	r3, #110	; 0x6e
 800711e:	d809      	bhi.n	8007134 <_scanf_float+0x134>
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d8b2      	bhi.n	800708a <_scanf_float+0x8a>
 8007124:	2b54      	cmp	r3, #84	; 0x54
 8007126:	d077      	beq.n	8007218 <_scanf_float+0x218>
 8007128:	2b59      	cmp	r3, #89	; 0x59
 800712a:	d199      	bne.n	8007060 <_scanf_float+0x60>
 800712c:	2d07      	cmp	r5, #7
 800712e:	d197      	bne.n	8007060 <_scanf_float+0x60>
 8007130:	2508      	movs	r5, #8
 8007132:	e029      	b.n	8007188 <_scanf_float+0x188>
 8007134:	2b74      	cmp	r3, #116	; 0x74
 8007136:	d06f      	beq.n	8007218 <_scanf_float+0x218>
 8007138:	2b79      	cmp	r3, #121	; 0x79
 800713a:	e7f6      	b.n	800712a <_scanf_float+0x12a>
 800713c:	6821      	ldr	r1, [r4, #0]
 800713e:	05c8      	lsls	r0, r1, #23
 8007140:	d51a      	bpl.n	8007178 <_scanf_float+0x178>
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007148:	6021      	str	r1, [r4, #0]
 800714a:	f109 0901 	add.w	r9, r9, #1
 800714e:	b11b      	cbz	r3, 8007158 <_scanf_float+0x158>
 8007150:	3b01      	subs	r3, #1
 8007152:	3201      	adds	r2, #1
 8007154:	9302      	str	r3, [sp, #8]
 8007156:	60a2      	str	r2, [r4, #8]
 8007158:	68a3      	ldr	r3, [r4, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	60a3      	str	r3, [r4, #8]
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	3301      	adds	r3, #1
 8007162:	6123      	str	r3, [r4, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3b01      	subs	r3, #1
 8007168:	2b00      	cmp	r3, #0
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	f340 8084 	ble.w	8007278 <_scanf_float+0x278>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	e766      	b.n	8007046 <_scanf_float+0x46>
 8007178:	eb1a 0f05 	cmn.w	sl, r5
 800717c:	f47f af70 	bne.w	8007060 <_scanf_float+0x60>
 8007180:	6822      	ldr	r2, [r4, #0]
 8007182:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	f806 3b01 	strb.w	r3, [r6], #1
 800718c:	e7e4      	b.n	8007158 <_scanf_float+0x158>
 800718e:	6822      	ldr	r2, [r4, #0]
 8007190:	0610      	lsls	r0, r2, #24
 8007192:	f57f af65 	bpl.w	8007060 <_scanf_float+0x60>
 8007196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719a:	e7f4      	b.n	8007186 <_scanf_float+0x186>
 800719c:	f1ba 0f00 	cmp.w	sl, #0
 80071a0:	d10e      	bne.n	80071c0 <_scanf_float+0x1c0>
 80071a2:	f1b9 0f00 	cmp.w	r9, #0
 80071a6:	d10e      	bne.n	80071c6 <_scanf_float+0x1c6>
 80071a8:	6822      	ldr	r2, [r4, #0]
 80071aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071b2:	d108      	bne.n	80071c6 <_scanf_float+0x1c6>
 80071b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	f04f 0a01 	mov.w	sl, #1
 80071be:	e7e3      	b.n	8007188 <_scanf_float+0x188>
 80071c0:	f1ba 0f02 	cmp.w	sl, #2
 80071c4:	d055      	beq.n	8007272 <_scanf_float+0x272>
 80071c6:	2d01      	cmp	r5, #1
 80071c8:	d002      	beq.n	80071d0 <_scanf_float+0x1d0>
 80071ca:	2d04      	cmp	r5, #4
 80071cc:	f47f af48 	bne.w	8007060 <_scanf_float+0x60>
 80071d0:	3501      	adds	r5, #1
 80071d2:	b2ed      	uxtb	r5, r5
 80071d4:	e7d8      	b.n	8007188 <_scanf_float+0x188>
 80071d6:	f1ba 0f01 	cmp.w	sl, #1
 80071da:	f47f af41 	bne.w	8007060 <_scanf_float+0x60>
 80071de:	f04f 0a02 	mov.w	sl, #2
 80071e2:	e7d1      	b.n	8007188 <_scanf_float+0x188>
 80071e4:	b97d      	cbnz	r5, 8007206 <_scanf_float+0x206>
 80071e6:	f1b9 0f00 	cmp.w	r9, #0
 80071ea:	f47f af3c 	bne.w	8007066 <_scanf_float+0x66>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80071f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80071f8:	f47f af39 	bne.w	800706e <_scanf_float+0x6e>
 80071fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007200:	6022      	str	r2, [r4, #0]
 8007202:	2501      	movs	r5, #1
 8007204:	e7c0      	b.n	8007188 <_scanf_float+0x188>
 8007206:	2d03      	cmp	r5, #3
 8007208:	d0e2      	beq.n	80071d0 <_scanf_float+0x1d0>
 800720a:	2d05      	cmp	r5, #5
 800720c:	e7de      	b.n	80071cc <_scanf_float+0x1cc>
 800720e:	2d02      	cmp	r5, #2
 8007210:	f47f af26 	bne.w	8007060 <_scanf_float+0x60>
 8007214:	2503      	movs	r5, #3
 8007216:	e7b7      	b.n	8007188 <_scanf_float+0x188>
 8007218:	2d06      	cmp	r5, #6
 800721a:	f47f af21 	bne.w	8007060 <_scanf_float+0x60>
 800721e:	2507      	movs	r5, #7
 8007220:	e7b2      	b.n	8007188 <_scanf_float+0x188>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	0591      	lsls	r1, r2, #22
 8007226:	f57f af1b 	bpl.w	8007060 <_scanf_float+0x60>
 800722a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	f8cd 9004 	str.w	r9, [sp, #4]
 8007234:	e7a8      	b.n	8007188 <_scanf_float+0x188>
 8007236:	6822      	ldr	r2, [r4, #0]
 8007238:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800723c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007240:	d006      	beq.n	8007250 <_scanf_float+0x250>
 8007242:	0550      	lsls	r0, r2, #21
 8007244:	f57f af0c 	bpl.w	8007060 <_scanf_float+0x60>
 8007248:	f1b9 0f00 	cmp.w	r9, #0
 800724c:	f43f af0f 	beq.w	800706e <_scanf_float+0x6e>
 8007250:	0591      	lsls	r1, r2, #22
 8007252:	bf58      	it	pl
 8007254:	9901      	ldrpl	r1, [sp, #4]
 8007256:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800725a:	bf58      	it	pl
 800725c:	eba9 0101 	subpl.w	r1, r9, r1
 8007260:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007264:	bf58      	it	pl
 8007266:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800726a:	6022      	str	r2, [r4, #0]
 800726c:	f04f 0900 	mov.w	r9, #0
 8007270:	e78a      	b.n	8007188 <_scanf_float+0x188>
 8007272:	f04f 0a03 	mov.w	sl, #3
 8007276:	e787      	b.n	8007188 <_scanf_float+0x188>
 8007278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800727c:	4639      	mov	r1, r7
 800727e:	4640      	mov	r0, r8
 8007280:	4798      	blx	r3
 8007282:	2800      	cmp	r0, #0
 8007284:	f43f aedf 	beq.w	8007046 <_scanf_float+0x46>
 8007288:	e6ea      	b.n	8007060 <_scanf_float+0x60>
 800728a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800728e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007292:	463a      	mov	r2, r7
 8007294:	4640      	mov	r0, r8
 8007296:	4798      	blx	r3
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	3b01      	subs	r3, #1
 800729c:	6123      	str	r3, [r4, #16]
 800729e:	e6ec      	b.n	800707a <_scanf_float+0x7a>
 80072a0:	1e6b      	subs	r3, r5, #1
 80072a2:	2b06      	cmp	r3, #6
 80072a4:	d825      	bhi.n	80072f2 <_scanf_float+0x2f2>
 80072a6:	2d02      	cmp	r5, #2
 80072a8:	d836      	bhi.n	8007318 <_scanf_float+0x318>
 80072aa:	455e      	cmp	r6, fp
 80072ac:	f67f aee8 	bls.w	8007080 <_scanf_float+0x80>
 80072b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b8:	463a      	mov	r2, r7
 80072ba:	4640      	mov	r0, r8
 80072bc:	4798      	blx	r3
 80072be:	6923      	ldr	r3, [r4, #16]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	e7f1      	b.n	80072aa <_scanf_float+0x2aa>
 80072c6:	9802      	ldr	r0, [sp, #8]
 80072c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80072cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80072d0:	9002      	str	r0, [sp, #8]
 80072d2:	463a      	mov	r2, r7
 80072d4:	4640      	mov	r0, r8
 80072d6:	4798      	blx	r3
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	3b01      	subs	r3, #1
 80072dc:	6123      	str	r3, [r4, #16]
 80072de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072e2:	fa5f fa8a 	uxtb.w	sl, sl
 80072e6:	f1ba 0f02 	cmp.w	sl, #2
 80072ea:	d1ec      	bne.n	80072c6 <_scanf_float+0x2c6>
 80072ec:	3d03      	subs	r5, #3
 80072ee:	b2ed      	uxtb	r5, r5
 80072f0:	1b76      	subs	r6, r6, r5
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	05da      	lsls	r2, r3, #23
 80072f6:	d52f      	bpl.n	8007358 <_scanf_float+0x358>
 80072f8:	055b      	lsls	r3, r3, #21
 80072fa:	d510      	bpl.n	800731e <_scanf_float+0x31e>
 80072fc:	455e      	cmp	r6, fp
 80072fe:	f67f aebf 	bls.w	8007080 <_scanf_float+0x80>
 8007302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007306:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800730a:	463a      	mov	r2, r7
 800730c:	4640      	mov	r0, r8
 800730e:	4798      	blx	r3
 8007310:	6923      	ldr	r3, [r4, #16]
 8007312:	3b01      	subs	r3, #1
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	e7f1      	b.n	80072fc <_scanf_float+0x2fc>
 8007318:	46aa      	mov	sl, r5
 800731a:	9602      	str	r6, [sp, #8]
 800731c:	e7df      	b.n	80072de <_scanf_float+0x2de>
 800731e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	2965      	cmp	r1, #101	; 0x65
 8007326:	f103 33ff 	add.w	r3, r3, #4294967295
 800732a:	f106 35ff 	add.w	r5, r6, #4294967295
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	d00c      	beq.n	800734c <_scanf_float+0x34c>
 8007332:	2945      	cmp	r1, #69	; 0x45
 8007334:	d00a      	beq.n	800734c <_scanf_float+0x34c>
 8007336:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800733a:	463a      	mov	r2, r7
 800733c:	4640      	mov	r0, r8
 800733e:	4798      	blx	r3
 8007340:	6923      	ldr	r3, [r4, #16]
 8007342:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007346:	3b01      	subs	r3, #1
 8007348:	1eb5      	subs	r5, r6, #2
 800734a:	6123      	str	r3, [r4, #16]
 800734c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007350:	463a      	mov	r2, r7
 8007352:	4640      	mov	r0, r8
 8007354:	4798      	blx	r3
 8007356:	462e      	mov	r6, r5
 8007358:	6825      	ldr	r5, [r4, #0]
 800735a:	f015 0510 	ands.w	r5, r5, #16
 800735e:	d159      	bne.n	8007414 <_scanf_float+0x414>
 8007360:	7035      	strb	r5, [r6, #0]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800736c:	d11b      	bne.n	80073a6 <_scanf_float+0x3a6>
 800736e:	9b01      	ldr	r3, [sp, #4]
 8007370:	454b      	cmp	r3, r9
 8007372:	eba3 0209 	sub.w	r2, r3, r9
 8007376:	d123      	bne.n	80073c0 <_scanf_float+0x3c0>
 8007378:	2200      	movs	r2, #0
 800737a:	4659      	mov	r1, fp
 800737c:	4640      	mov	r0, r8
 800737e:	f000 fe99 	bl	80080b4 <_strtod_r>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	9b03      	ldr	r3, [sp, #12]
 8007386:	f012 0f02 	tst.w	r2, #2
 800738a:	ec57 6b10 	vmov	r6, r7, d0
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	d021      	beq.n	80073d6 <_scanf_float+0x3d6>
 8007392:	9903      	ldr	r1, [sp, #12]
 8007394:	1d1a      	adds	r2, r3, #4
 8007396:	600a      	str	r2, [r1, #0]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	e9c3 6700 	strd	r6, r7, [r3]
 800739e:	68e3      	ldr	r3, [r4, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60e3      	str	r3, [r4, #12]
 80073a4:	e66d      	b.n	8007082 <_scanf_float+0x82>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0e5      	beq.n	8007378 <_scanf_float+0x378>
 80073ac:	9905      	ldr	r1, [sp, #20]
 80073ae:	230a      	movs	r3, #10
 80073b0:	462a      	mov	r2, r5
 80073b2:	3101      	adds	r1, #1
 80073b4:	4640      	mov	r0, r8
 80073b6:	f000 ff05 	bl	80081c4 <_strtol_r>
 80073ba:	9b04      	ldr	r3, [sp, #16]
 80073bc:	9e05      	ldr	r6, [sp, #20]
 80073be:	1ac2      	subs	r2, r0, r3
 80073c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80073c4:	429e      	cmp	r6, r3
 80073c6:	bf28      	it	cs
 80073c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80073cc:	4912      	ldr	r1, [pc, #72]	; (8007418 <_scanf_float+0x418>)
 80073ce:	4630      	mov	r0, r6
 80073d0:	f000 f82c 	bl	800742c <siprintf>
 80073d4:	e7d0      	b.n	8007378 <_scanf_float+0x378>
 80073d6:	9903      	ldr	r1, [sp, #12]
 80073d8:	f012 0f04 	tst.w	r2, #4
 80073dc:	f103 0204 	add.w	r2, r3, #4
 80073e0:	600a      	str	r2, [r1, #0]
 80073e2:	d1d9      	bne.n	8007398 <_scanf_float+0x398>
 80073e4:	f8d3 8000 	ldr.w	r8, [r3]
 80073e8:	ee10 2a10 	vmov	r2, s0
 80073ec:	ee10 0a10 	vmov	r0, s0
 80073f0:	463b      	mov	r3, r7
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f9 fbb2 	bl	8000b5c <__aeabi_dcmpun>
 80073f8:	b128      	cbz	r0, 8007406 <_scanf_float+0x406>
 80073fa:	4808      	ldr	r0, [pc, #32]	; (800741c <_scanf_float+0x41c>)
 80073fc:	f000 f810 	bl	8007420 <nanf>
 8007400:	ed88 0a00 	vstr	s0, [r8]
 8007404:	e7cb      	b.n	800739e <_scanf_float+0x39e>
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 fc05 	bl	8000c18 <__aeabi_d2f>
 800740e:	f8c8 0000 	str.w	r0, [r8]
 8007412:	e7c4      	b.n	800739e <_scanf_float+0x39e>
 8007414:	2500      	movs	r5, #0
 8007416:	e634      	b.n	8007082 <_scanf_float+0x82>
 8007418:	0800be4c 	.word	0x0800be4c
 800741c:	0800c258 	.word	0x0800c258

08007420 <nanf>:
 8007420:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007428 <nanf+0x8>
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	7fc00000 	.word	0x7fc00000

0800742c <siprintf>:
 800742c:	b40e      	push	{r1, r2, r3}
 800742e:	b500      	push	{lr}
 8007430:	b09c      	sub	sp, #112	; 0x70
 8007432:	ab1d      	add	r3, sp, #116	; 0x74
 8007434:	9002      	str	r0, [sp, #8]
 8007436:	9006      	str	r0, [sp, #24]
 8007438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800743c:	4809      	ldr	r0, [pc, #36]	; (8007464 <siprintf+0x38>)
 800743e:	9107      	str	r1, [sp, #28]
 8007440:	9104      	str	r1, [sp, #16]
 8007442:	4909      	ldr	r1, [pc, #36]	; (8007468 <siprintf+0x3c>)
 8007444:	f853 2b04 	ldr.w	r2, [r3], #4
 8007448:	9105      	str	r1, [sp, #20]
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	a902      	add	r1, sp, #8
 8007450:	f002 fee4 	bl	800a21c <_svfiprintf_r>
 8007454:	9b02      	ldr	r3, [sp, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	b01c      	add	sp, #112	; 0x70
 800745c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007460:	b003      	add	sp, #12
 8007462:	4770      	bx	lr
 8007464:	20000030 	.word	0x20000030
 8007468:	ffff0208 	.word	0xffff0208

0800746c <sulp>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	ec45 4b10 	vmov	d0, r4, r5
 8007476:	4616      	mov	r6, r2
 8007478:	f002 fc2e 	bl	8009cd8 <__ulp>
 800747c:	ec51 0b10 	vmov	r0, r1, d0
 8007480:	b17e      	cbz	r6, 80074a2 <sulp+0x36>
 8007482:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007486:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800748a:	2b00      	cmp	r3, #0
 800748c:	dd09      	ble.n	80074a2 <sulp+0x36>
 800748e:	051b      	lsls	r3, r3, #20
 8007490:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007494:	2400      	movs	r4, #0
 8007496:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800749a:	4622      	mov	r2, r4
 800749c:	462b      	mov	r3, r5
 800749e:	f7f9 f8c3 	bl	8000628 <__aeabi_dmul>
 80074a2:	bd70      	pop	{r4, r5, r6, pc}
 80074a4:	0000      	movs	r0, r0
	...

080074a8 <_strtod_l>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	ed2d 8b02 	vpush	{d8}
 80074b0:	b09d      	sub	sp, #116	; 0x74
 80074b2:	461f      	mov	r7, r3
 80074b4:	2300      	movs	r3, #0
 80074b6:	9318      	str	r3, [sp, #96]	; 0x60
 80074b8:	4ba2      	ldr	r3, [pc, #648]	; (8007744 <_strtod_l+0x29c>)
 80074ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	9305      	str	r3, [sp, #20]
 80074c0:	4604      	mov	r4, r0
 80074c2:	4618      	mov	r0, r3
 80074c4:	4688      	mov	r8, r1
 80074c6:	f7f8 fe95 	bl	80001f4 <strlen>
 80074ca:	f04f 0a00 	mov.w	sl, #0
 80074ce:	4605      	mov	r5, r0
 80074d0:	f04f 0b00 	mov.w	fp, #0
 80074d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80074d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	2a2b      	cmp	r2, #43	; 0x2b
 80074de:	d04e      	beq.n	800757e <_strtod_l+0xd6>
 80074e0:	d83b      	bhi.n	800755a <_strtod_l+0xb2>
 80074e2:	2a0d      	cmp	r2, #13
 80074e4:	d834      	bhi.n	8007550 <_strtod_l+0xa8>
 80074e6:	2a08      	cmp	r2, #8
 80074e8:	d834      	bhi.n	8007554 <_strtod_l+0xac>
 80074ea:	2a00      	cmp	r2, #0
 80074ec:	d03e      	beq.n	800756c <_strtod_l+0xc4>
 80074ee:	2300      	movs	r3, #0
 80074f0:	930a      	str	r3, [sp, #40]	; 0x28
 80074f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80074f4:	7833      	ldrb	r3, [r6, #0]
 80074f6:	2b30      	cmp	r3, #48	; 0x30
 80074f8:	f040 80b0 	bne.w	800765c <_strtod_l+0x1b4>
 80074fc:	7873      	ldrb	r3, [r6, #1]
 80074fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007502:	2b58      	cmp	r3, #88	; 0x58
 8007504:	d168      	bne.n	80075d8 <_strtod_l+0x130>
 8007506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	ab18      	add	r3, sp, #96	; 0x60
 800750c:	9702      	str	r7, [sp, #8]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4a8d      	ldr	r2, [pc, #564]	; (8007748 <_strtod_l+0x2a0>)
 8007512:	ab19      	add	r3, sp, #100	; 0x64
 8007514:	a917      	add	r1, sp, #92	; 0x5c
 8007516:	4620      	mov	r0, r4
 8007518:	f001 fd38 	bl	8008f8c <__gethex>
 800751c:	f010 0707 	ands.w	r7, r0, #7
 8007520:	4605      	mov	r5, r0
 8007522:	d005      	beq.n	8007530 <_strtod_l+0x88>
 8007524:	2f06      	cmp	r7, #6
 8007526:	d12c      	bne.n	8007582 <_strtod_l+0xda>
 8007528:	3601      	adds	r6, #1
 800752a:	2300      	movs	r3, #0
 800752c:	9617      	str	r6, [sp, #92]	; 0x5c
 800752e:	930a      	str	r3, [sp, #40]	; 0x28
 8007530:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 8590 	bne.w	8008058 <_strtod_l+0xbb0>
 8007538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753a:	b1eb      	cbz	r3, 8007578 <_strtod_l+0xd0>
 800753c:	4652      	mov	r2, sl
 800753e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007542:	ec43 2b10 	vmov	d0, r2, r3
 8007546:	b01d      	add	sp, #116	; 0x74
 8007548:	ecbd 8b02 	vpop	{d8}
 800754c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007550:	2a20      	cmp	r2, #32
 8007552:	d1cc      	bne.n	80074ee <_strtod_l+0x46>
 8007554:	3301      	adds	r3, #1
 8007556:	9317      	str	r3, [sp, #92]	; 0x5c
 8007558:	e7be      	b.n	80074d8 <_strtod_l+0x30>
 800755a:	2a2d      	cmp	r2, #45	; 0x2d
 800755c:	d1c7      	bne.n	80074ee <_strtod_l+0x46>
 800755e:	2201      	movs	r2, #1
 8007560:	920a      	str	r2, [sp, #40]	; 0x28
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	9217      	str	r2, [sp, #92]	; 0x5c
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c2      	bne.n	80074f2 <_strtod_l+0x4a>
 800756c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800756e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007572:	2b00      	cmp	r3, #0
 8007574:	f040 856e 	bne.w	8008054 <_strtod_l+0xbac>
 8007578:	4652      	mov	r2, sl
 800757a:	465b      	mov	r3, fp
 800757c:	e7e1      	b.n	8007542 <_strtod_l+0x9a>
 800757e:	2200      	movs	r2, #0
 8007580:	e7ee      	b.n	8007560 <_strtod_l+0xb8>
 8007582:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007584:	b13a      	cbz	r2, 8007596 <_strtod_l+0xee>
 8007586:	2135      	movs	r1, #53	; 0x35
 8007588:	a81a      	add	r0, sp, #104	; 0x68
 800758a:	f002 fcb0 	bl	8009eee <__copybits>
 800758e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007590:	4620      	mov	r0, r4
 8007592:	f002 f86f 	bl	8009674 <_Bfree>
 8007596:	3f01      	subs	r7, #1
 8007598:	2f04      	cmp	r7, #4
 800759a:	d806      	bhi.n	80075aa <_strtod_l+0x102>
 800759c:	e8df f007 	tbb	[pc, r7]
 80075a0:	1714030a 	.word	0x1714030a
 80075a4:	0a          	.byte	0x0a
 80075a5:	00          	.byte	0x00
 80075a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80075aa:	0728      	lsls	r0, r5, #28
 80075ac:	d5c0      	bpl.n	8007530 <_strtod_l+0x88>
 80075ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80075b2:	e7bd      	b.n	8007530 <_strtod_l+0x88>
 80075b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80075b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80075c6:	e7f0      	b.n	80075aa <_strtod_l+0x102>
 80075c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800774c <_strtod_l+0x2a4>
 80075cc:	e7ed      	b.n	80075aa <_strtod_l+0x102>
 80075ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80075d2:	f04f 3aff 	mov.w	sl, #4294967295
 80075d6:	e7e8      	b.n	80075aa <_strtod_l+0x102>
 80075d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d0f9      	beq.n	80075d8 <_strtod_l+0x130>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0a3      	beq.n	8007530 <_strtod_l+0x88>
 80075e8:	2301      	movs	r3, #1
 80075ea:	f04f 0900 	mov.w	r9, #0
 80075ee:	9304      	str	r3, [sp, #16]
 80075f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075f2:	9308      	str	r3, [sp, #32]
 80075f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80075f8:	464f      	mov	r7, r9
 80075fa:	220a      	movs	r2, #10
 80075fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80075fe:	7806      	ldrb	r6, [r0, #0]
 8007600:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007604:	b2d9      	uxtb	r1, r3
 8007606:	2909      	cmp	r1, #9
 8007608:	d92a      	bls.n	8007660 <_strtod_l+0x1b8>
 800760a:	9905      	ldr	r1, [sp, #20]
 800760c:	462a      	mov	r2, r5
 800760e:	f002 ff1f 	bl	800a450 <strncmp>
 8007612:	b398      	cbz	r0, 800767c <_strtod_l+0x1d4>
 8007614:	2000      	movs	r0, #0
 8007616:	4632      	mov	r2, r6
 8007618:	463d      	mov	r5, r7
 800761a:	9005      	str	r0, [sp, #20]
 800761c:	4603      	mov	r3, r0
 800761e:	2a65      	cmp	r2, #101	; 0x65
 8007620:	d001      	beq.n	8007626 <_strtod_l+0x17e>
 8007622:	2a45      	cmp	r2, #69	; 0x45
 8007624:	d118      	bne.n	8007658 <_strtod_l+0x1b0>
 8007626:	b91d      	cbnz	r5, 8007630 <_strtod_l+0x188>
 8007628:	9a04      	ldr	r2, [sp, #16]
 800762a:	4302      	orrs	r2, r0
 800762c:	d09e      	beq.n	800756c <_strtod_l+0xc4>
 800762e:	2500      	movs	r5, #0
 8007630:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007634:	f108 0201 	add.w	r2, r8, #1
 8007638:	9217      	str	r2, [sp, #92]	; 0x5c
 800763a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800763e:	2a2b      	cmp	r2, #43	; 0x2b
 8007640:	d075      	beq.n	800772e <_strtod_l+0x286>
 8007642:	2a2d      	cmp	r2, #45	; 0x2d
 8007644:	d07b      	beq.n	800773e <_strtod_l+0x296>
 8007646:	f04f 0c00 	mov.w	ip, #0
 800764a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800764e:	2909      	cmp	r1, #9
 8007650:	f240 8082 	bls.w	8007758 <_strtod_l+0x2b0>
 8007654:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007658:	2600      	movs	r6, #0
 800765a:	e09d      	b.n	8007798 <_strtod_l+0x2f0>
 800765c:	2300      	movs	r3, #0
 800765e:	e7c4      	b.n	80075ea <_strtod_l+0x142>
 8007660:	2f08      	cmp	r7, #8
 8007662:	bfd8      	it	le
 8007664:	9907      	ldrle	r1, [sp, #28]
 8007666:	f100 0001 	add.w	r0, r0, #1
 800766a:	bfda      	itte	le
 800766c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007670:	9307      	strle	r3, [sp, #28]
 8007672:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007676:	3701      	adds	r7, #1
 8007678:	9017      	str	r0, [sp, #92]	; 0x5c
 800767a:	e7bf      	b.n	80075fc <_strtod_l+0x154>
 800767c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800767e:	195a      	adds	r2, r3, r5
 8007680:	9217      	str	r2, [sp, #92]	; 0x5c
 8007682:	5d5a      	ldrb	r2, [r3, r5]
 8007684:	2f00      	cmp	r7, #0
 8007686:	d037      	beq.n	80076f8 <_strtod_l+0x250>
 8007688:	9005      	str	r0, [sp, #20]
 800768a:	463d      	mov	r5, r7
 800768c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007690:	2b09      	cmp	r3, #9
 8007692:	d912      	bls.n	80076ba <_strtod_l+0x212>
 8007694:	2301      	movs	r3, #1
 8007696:	e7c2      	b.n	800761e <_strtod_l+0x176>
 8007698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	9217      	str	r2, [sp, #92]	; 0x5c
 800769e:	785a      	ldrb	r2, [r3, #1]
 80076a0:	3001      	adds	r0, #1
 80076a2:	2a30      	cmp	r2, #48	; 0x30
 80076a4:	d0f8      	beq.n	8007698 <_strtod_l+0x1f0>
 80076a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	f200 84d9 	bhi.w	8008062 <_strtod_l+0xbba>
 80076b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076b2:	9005      	str	r0, [sp, #20]
 80076b4:	2000      	movs	r0, #0
 80076b6:	9308      	str	r3, [sp, #32]
 80076b8:	4605      	mov	r5, r0
 80076ba:	3a30      	subs	r2, #48	; 0x30
 80076bc:	f100 0301 	add.w	r3, r0, #1
 80076c0:	d014      	beq.n	80076ec <_strtod_l+0x244>
 80076c2:	9905      	ldr	r1, [sp, #20]
 80076c4:	4419      	add	r1, r3
 80076c6:	9105      	str	r1, [sp, #20]
 80076c8:	462b      	mov	r3, r5
 80076ca:	eb00 0e05 	add.w	lr, r0, r5
 80076ce:	210a      	movs	r1, #10
 80076d0:	4573      	cmp	r3, lr
 80076d2:	d113      	bne.n	80076fc <_strtod_l+0x254>
 80076d4:	182b      	adds	r3, r5, r0
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	f105 0501 	add.w	r5, r5, #1
 80076dc:	4405      	add	r5, r0
 80076de:	dc1c      	bgt.n	800771a <_strtod_l+0x272>
 80076e0:	9907      	ldr	r1, [sp, #28]
 80076e2:	230a      	movs	r3, #10
 80076e4:	fb03 2301 	mla	r3, r3, r1, r2
 80076e8:	9307      	str	r3, [sp, #28]
 80076ea:	2300      	movs	r3, #0
 80076ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076ee:	1c51      	adds	r1, r2, #1
 80076f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80076f2:	7852      	ldrb	r2, [r2, #1]
 80076f4:	4618      	mov	r0, r3
 80076f6:	e7c9      	b.n	800768c <_strtod_l+0x1e4>
 80076f8:	4638      	mov	r0, r7
 80076fa:	e7d2      	b.n	80076a2 <_strtod_l+0x1fa>
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	dc04      	bgt.n	800770a <_strtod_l+0x262>
 8007700:	9e07      	ldr	r6, [sp, #28]
 8007702:	434e      	muls	r6, r1
 8007704:	9607      	str	r6, [sp, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	e7e2      	b.n	80076d0 <_strtod_l+0x228>
 800770a:	f103 0c01 	add.w	ip, r3, #1
 800770e:	f1bc 0f10 	cmp.w	ip, #16
 8007712:	bfd8      	it	le
 8007714:	fb01 f909 	mulle.w	r9, r1, r9
 8007718:	e7f5      	b.n	8007706 <_strtod_l+0x25e>
 800771a:	2d10      	cmp	r5, #16
 800771c:	bfdc      	itt	le
 800771e:	230a      	movle	r3, #10
 8007720:	fb03 2909 	mlale	r9, r3, r9, r2
 8007724:	e7e1      	b.n	80076ea <_strtod_l+0x242>
 8007726:	2300      	movs	r3, #0
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	2301      	movs	r3, #1
 800772c:	e77c      	b.n	8007628 <_strtod_l+0x180>
 800772e:	f04f 0c00 	mov.w	ip, #0
 8007732:	f108 0202 	add.w	r2, r8, #2
 8007736:	9217      	str	r2, [sp, #92]	; 0x5c
 8007738:	f898 2002 	ldrb.w	r2, [r8, #2]
 800773c:	e785      	b.n	800764a <_strtod_l+0x1a2>
 800773e:	f04f 0c01 	mov.w	ip, #1
 8007742:	e7f6      	b.n	8007732 <_strtod_l+0x28a>
 8007744:	0800c0a0 	.word	0x0800c0a0
 8007748:	0800be54 	.word	0x0800be54
 800774c:	7ff00000 	.word	0x7ff00000
 8007750:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007752:	1c51      	adds	r1, r2, #1
 8007754:	9117      	str	r1, [sp, #92]	; 0x5c
 8007756:	7852      	ldrb	r2, [r2, #1]
 8007758:	2a30      	cmp	r2, #48	; 0x30
 800775a:	d0f9      	beq.n	8007750 <_strtod_l+0x2a8>
 800775c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007760:	2908      	cmp	r1, #8
 8007762:	f63f af79 	bhi.w	8007658 <_strtod_l+0x1b0>
 8007766:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800776a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800776c:	9206      	str	r2, [sp, #24]
 800776e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007770:	1c51      	adds	r1, r2, #1
 8007772:	9117      	str	r1, [sp, #92]	; 0x5c
 8007774:	7852      	ldrb	r2, [r2, #1]
 8007776:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800777a:	2e09      	cmp	r6, #9
 800777c:	d937      	bls.n	80077ee <_strtod_l+0x346>
 800777e:	9e06      	ldr	r6, [sp, #24]
 8007780:	1b89      	subs	r1, r1, r6
 8007782:	2908      	cmp	r1, #8
 8007784:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007788:	dc02      	bgt.n	8007790 <_strtod_l+0x2e8>
 800778a:	4576      	cmp	r6, lr
 800778c:	bfa8      	it	ge
 800778e:	4676      	movge	r6, lr
 8007790:	f1bc 0f00 	cmp.w	ip, #0
 8007794:	d000      	beq.n	8007798 <_strtod_l+0x2f0>
 8007796:	4276      	negs	r6, r6
 8007798:	2d00      	cmp	r5, #0
 800779a:	d14d      	bne.n	8007838 <_strtod_l+0x390>
 800779c:	9904      	ldr	r1, [sp, #16]
 800779e:	4301      	orrs	r1, r0
 80077a0:	f47f aec6 	bne.w	8007530 <_strtod_l+0x88>
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f47f aee1 	bne.w	800756c <_strtod_l+0xc4>
 80077aa:	2a69      	cmp	r2, #105	; 0x69
 80077ac:	d027      	beq.n	80077fe <_strtod_l+0x356>
 80077ae:	dc24      	bgt.n	80077fa <_strtod_l+0x352>
 80077b0:	2a49      	cmp	r2, #73	; 0x49
 80077b2:	d024      	beq.n	80077fe <_strtod_l+0x356>
 80077b4:	2a4e      	cmp	r2, #78	; 0x4e
 80077b6:	f47f aed9 	bne.w	800756c <_strtod_l+0xc4>
 80077ba:	499f      	ldr	r1, [pc, #636]	; (8007a38 <_strtod_l+0x590>)
 80077bc:	a817      	add	r0, sp, #92	; 0x5c
 80077be:	f001 fe3d 	bl	800943c <__match>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aed2 	beq.w	800756c <_strtod_l+0xc4>
 80077c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b28      	cmp	r3, #40	; 0x28
 80077ce:	d12d      	bne.n	800782c <_strtod_l+0x384>
 80077d0:	499a      	ldr	r1, [pc, #616]	; (8007a3c <_strtod_l+0x594>)
 80077d2:	aa1a      	add	r2, sp, #104	; 0x68
 80077d4:	a817      	add	r0, sp, #92	; 0x5c
 80077d6:	f001 fe45 	bl	8009464 <__hexnan>
 80077da:	2805      	cmp	r0, #5
 80077dc:	d126      	bne.n	800782c <_strtod_l+0x384>
 80077de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80077e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80077e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80077ec:	e6a0      	b.n	8007530 <_strtod_l+0x88>
 80077ee:	210a      	movs	r1, #10
 80077f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80077f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80077f8:	e7b9      	b.n	800776e <_strtod_l+0x2c6>
 80077fa:	2a6e      	cmp	r2, #110	; 0x6e
 80077fc:	e7db      	b.n	80077b6 <_strtod_l+0x30e>
 80077fe:	4990      	ldr	r1, [pc, #576]	; (8007a40 <_strtod_l+0x598>)
 8007800:	a817      	add	r0, sp, #92	; 0x5c
 8007802:	f001 fe1b 	bl	800943c <__match>
 8007806:	2800      	cmp	r0, #0
 8007808:	f43f aeb0 	beq.w	800756c <_strtod_l+0xc4>
 800780c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800780e:	498d      	ldr	r1, [pc, #564]	; (8007a44 <_strtod_l+0x59c>)
 8007810:	3b01      	subs	r3, #1
 8007812:	a817      	add	r0, sp, #92	; 0x5c
 8007814:	9317      	str	r3, [sp, #92]	; 0x5c
 8007816:	f001 fe11 	bl	800943c <__match>
 800781a:	b910      	cbnz	r0, 8007822 <_strtod_l+0x37a>
 800781c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800781e:	3301      	adds	r3, #1
 8007820:	9317      	str	r3, [sp, #92]	; 0x5c
 8007822:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007a54 <_strtod_l+0x5ac>
 8007826:	f04f 0a00 	mov.w	sl, #0
 800782a:	e681      	b.n	8007530 <_strtod_l+0x88>
 800782c:	4886      	ldr	r0, [pc, #536]	; (8007a48 <_strtod_l+0x5a0>)
 800782e:	f002 fdf7 	bl	800a420 <nan>
 8007832:	ec5b ab10 	vmov	sl, fp, d0
 8007836:	e67b      	b.n	8007530 <_strtod_l+0x88>
 8007838:	9b05      	ldr	r3, [sp, #20]
 800783a:	9807      	ldr	r0, [sp, #28]
 800783c:	1af3      	subs	r3, r6, r3
 800783e:	2f00      	cmp	r7, #0
 8007840:	bf08      	it	eq
 8007842:	462f      	moveq	r7, r5
 8007844:	2d10      	cmp	r5, #16
 8007846:	9306      	str	r3, [sp, #24]
 8007848:	46a8      	mov	r8, r5
 800784a:	bfa8      	it	ge
 800784c:	f04f 0810 	movge.w	r8, #16
 8007850:	f7f8 fe70 	bl	8000534 <__aeabi_ui2d>
 8007854:	2d09      	cmp	r5, #9
 8007856:	4682      	mov	sl, r0
 8007858:	468b      	mov	fp, r1
 800785a:	dd13      	ble.n	8007884 <_strtod_l+0x3dc>
 800785c:	4b7b      	ldr	r3, [pc, #492]	; (8007a4c <_strtod_l+0x5a4>)
 800785e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007862:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007866:	f7f8 fedf 	bl	8000628 <__aeabi_dmul>
 800786a:	4682      	mov	sl, r0
 800786c:	4648      	mov	r0, r9
 800786e:	468b      	mov	fp, r1
 8007870:	f7f8 fe60 	bl	8000534 <__aeabi_ui2d>
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	4650      	mov	r0, sl
 800787a:	4659      	mov	r1, fp
 800787c:	f7f8 fd1e 	bl	80002bc <__adddf3>
 8007880:	4682      	mov	sl, r0
 8007882:	468b      	mov	fp, r1
 8007884:	2d0f      	cmp	r5, #15
 8007886:	dc38      	bgt.n	80078fa <_strtod_l+0x452>
 8007888:	9b06      	ldr	r3, [sp, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f43f ae50 	beq.w	8007530 <_strtod_l+0x88>
 8007890:	dd24      	ble.n	80078dc <_strtod_l+0x434>
 8007892:	2b16      	cmp	r3, #22
 8007894:	dc0b      	bgt.n	80078ae <_strtod_l+0x406>
 8007896:	496d      	ldr	r1, [pc, #436]	; (8007a4c <_strtod_l+0x5a4>)
 8007898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800789c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	f7f8 fec0 	bl	8000628 <__aeabi_dmul>
 80078a8:	4682      	mov	sl, r0
 80078aa:	468b      	mov	fp, r1
 80078ac:	e640      	b.n	8007530 <_strtod_l+0x88>
 80078ae:	9a06      	ldr	r2, [sp, #24]
 80078b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80078b4:	4293      	cmp	r3, r2
 80078b6:	db20      	blt.n	80078fa <_strtod_l+0x452>
 80078b8:	4c64      	ldr	r4, [pc, #400]	; (8007a4c <_strtod_l+0x5a4>)
 80078ba:	f1c5 050f 	rsb	r5, r5, #15
 80078be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078c2:	4652      	mov	r2, sl
 80078c4:	465b      	mov	r3, fp
 80078c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ca:	f7f8 fead 	bl	8000628 <__aeabi_dmul>
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	1b5d      	subs	r5, r3, r5
 80078d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078da:	e7e3      	b.n	80078a4 <_strtod_l+0x3fc>
 80078dc:	9b06      	ldr	r3, [sp, #24]
 80078de:	3316      	adds	r3, #22
 80078e0:	db0b      	blt.n	80078fa <_strtod_l+0x452>
 80078e2:	9b05      	ldr	r3, [sp, #20]
 80078e4:	1b9e      	subs	r6, r3, r6
 80078e6:	4b59      	ldr	r3, [pc, #356]	; (8007a4c <_strtod_l+0x5a4>)
 80078e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80078ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078f0:	4650      	mov	r0, sl
 80078f2:	4659      	mov	r1, fp
 80078f4:	f7f8 ffc2 	bl	800087c <__aeabi_ddiv>
 80078f8:	e7d6      	b.n	80078a8 <_strtod_l+0x400>
 80078fa:	9b06      	ldr	r3, [sp, #24]
 80078fc:	eba5 0808 	sub.w	r8, r5, r8
 8007900:	4498      	add	r8, r3
 8007902:	f1b8 0f00 	cmp.w	r8, #0
 8007906:	dd74      	ble.n	80079f2 <_strtod_l+0x54a>
 8007908:	f018 030f 	ands.w	r3, r8, #15
 800790c:	d00a      	beq.n	8007924 <_strtod_l+0x47c>
 800790e:	494f      	ldr	r1, [pc, #316]	; (8007a4c <_strtod_l+0x5a4>)
 8007910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007914:	4652      	mov	r2, sl
 8007916:	465b      	mov	r3, fp
 8007918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800791c:	f7f8 fe84 	bl	8000628 <__aeabi_dmul>
 8007920:	4682      	mov	sl, r0
 8007922:	468b      	mov	fp, r1
 8007924:	f038 080f 	bics.w	r8, r8, #15
 8007928:	d04f      	beq.n	80079ca <_strtod_l+0x522>
 800792a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800792e:	dd22      	ble.n	8007976 <_strtod_l+0x4ce>
 8007930:	2500      	movs	r5, #0
 8007932:	462e      	mov	r6, r5
 8007934:	9507      	str	r5, [sp, #28]
 8007936:	9505      	str	r5, [sp, #20]
 8007938:	2322      	movs	r3, #34	; 0x22
 800793a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007a54 <_strtod_l+0x5ac>
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	f04f 0a00 	mov.w	sl, #0
 8007944:	9b07      	ldr	r3, [sp, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f43f adf2 	beq.w	8007530 <_strtod_l+0x88>
 800794c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800794e:	4620      	mov	r0, r4
 8007950:	f001 fe90 	bl	8009674 <_Bfree>
 8007954:	9905      	ldr	r1, [sp, #20]
 8007956:	4620      	mov	r0, r4
 8007958:	f001 fe8c 	bl	8009674 <_Bfree>
 800795c:	4631      	mov	r1, r6
 800795e:	4620      	mov	r0, r4
 8007960:	f001 fe88 	bl	8009674 <_Bfree>
 8007964:	9907      	ldr	r1, [sp, #28]
 8007966:	4620      	mov	r0, r4
 8007968:	f001 fe84 	bl	8009674 <_Bfree>
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f001 fe80 	bl	8009674 <_Bfree>
 8007974:	e5dc      	b.n	8007530 <_strtod_l+0x88>
 8007976:	4b36      	ldr	r3, [pc, #216]	; (8007a50 <_strtod_l+0x5a8>)
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	2300      	movs	r3, #0
 800797c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007980:	4650      	mov	r0, sl
 8007982:	4659      	mov	r1, fp
 8007984:	4699      	mov	r9, r3
 8007986:	f1b8 0f01 	cmp.w	r8, #1
 800798a:	dc21      	bgt.n	80079d0 <_strtod_l+0x528>
 800798c:	b10b      	cbz	r3, 8007992 <_strtod_l+0x4ea>
 800798e:	4682      	mov	sl, r0
 8007990:	468b      	mov	fp, r1
 8007992:	4b2f      	ldr	r3, [pc, #188]	; (8007a50 <_strtod_l+0x5a8>)
 8007994:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007998:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800799c:	4652      	mov	r2, sl
 800799e:	465b      	mov	r3, fp
 80079a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80079a4:	f7f8 fe40 	bl	8000628 <__aeabi_dmul>
 80079a8:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <_strtod_l+0x5ac>)
 80079aa:	460a      	mov	r2, r1
 80079ac:	400b      	ands	r3, r1
 80079ae:	492a      	ldr	r1, [pc, #168]	; (8007a58 <_strtod_l+0x5b0>)
 80079b0:	428b      	cmp	r3, r1
 80079b2:	4682      	mov	sl, r0
 80079b4:	d8bc      	bhi.n	8007930 <_strtod_l+0x488>
 80079b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ba:	428b      	cmp	r3, r1
 80079bc:	bf86      	itte	hi
 80079be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007a5c <_strtod_l+0x5b4>
 80079c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80079c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80079ca:	2300      	movs	r3, #0
 80079cc:	9304      	str	r3, [sp, #16]
 80079ce:	e084      	b.n	8007ada <_strtod_l+0x632>
 80079d0:	f018 0f01 	tst.w	r8, #1
 80079d4:	d005      	beq.n	80079e2 <_strtod_l+0x53a>
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f7f8 fe24 	bl	8000628 <__aeabi_dmul>
 80079e0:	2301      	movs	r3, #1
 80079e2:	9a04      	ldr	r2, [sp, #16]
 80079e4:	3208      	adds	r2, #8
 80079e6:	f109 0901 	add.w	r9, r9, #1
 80079ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079ee:	9204      	str	r2, [sp, #16]
 80079f0:	e7c9      	b.n	8007986 <_strtod_l+0x4de>
 80079f2:	d0ea      	beq.n	80079ca <_strtod_l+0x522>
 80079f4:	f1c8 0800 	rsb	r8, r8, #0
 80079f8:	f018 020f 	ands.w	r2, r8, #15
 80079fc:	d00a      	beq.n	8007a14 <_strtod_l+0x56c>
 80079fe:	4b13      	ldr	r3, [pc, #76]	; (8007a4c <_strtod_l+0x5a4>)
 8007a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a04:	4650      	mov	r0, sl
 8007a06:	4659      	mov	r1, fp
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f7f8 ff36 	bl	800087c <__aeabi_ddiv>
 8007a10:	4682      	mov	sl, r0
 8007a12:	468b      	mov	fp, r1
 8007a14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007a18:	d0d7      	beq.n	80079ca <_strtod_l+0x522>
 8007a1a:	f1b8 0f1f 	cmp.w	r8, #31
 8007a1e:	dd1f      	ble.n	8007a60 <_strtod_l+0x5b8>
 8007a20:	2500      	movs	r5, #0
 8007a22:	462e      	mov	r6, r5
 8007a24:	9507      	str	r5, [sp, #28]
 8007a26:	9505      	str	r5, [sp, #20]
 8007a28:	2322      	movs	r3, #34	; 0x22
 8007a2a:	f04f 0a00 	mov.w	sl, #0
 8007a2e:	f04f 0b00 	mov.w	fp, #0
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	e786      	b.n	8007944 <_strtod_l+0x49c>
 8007a36:	bf00      	nop
 8007a38:	0800be25 	.word	0x0800be25
 8007a3c:	0800be68 	.word	0x0800be68
 8007a40:	0800be1d 	.word	0x0800be1d
 8007a44:	0800bfac 	.word	0x0800bfac
 8007a48:	0800c258 	.word	0x0800c258
 8007a4c:	0800c138 	.word	0x0800c138
 8007a50:	0800c110 	.word	0x0800c110
 8007a54:	7ff00000 	.word	0x7ff00000
 8007a58:	7ca00000 	.word	0x7ca00000
 8007a5c:	7fefffff 	.word	0x7fefffff
 8007a60:	f018 0310 	ands.w	r3, r8, #16
 8007a64:	bf18      	it	ne
 8007a66:	236a      	movne	r3, #106	; 0x6a
 8007a68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007e18 <_strtod_l+0x970>
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	2300      	movs	r3, #0
 8007a74:	f018 0f01 	tst.w	r8, #1
 8007a78:	d004      	beq.n	8007a84 <_strtod_l+0x5dc>
 8007a7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a7e:	f7f8 fdd3 	bl	8000628 <__aeabi_dmul>
 8007a82:	2301      	movs	r3, #1
 8007a84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a88:	f109 0908 	add.w	r9, r9, #8
 8007a8c:	d1f2      	bne.n	8007a74 <_strtod_l+0x5cc>
 8007a8e:	b10b      	cbz	r3, 8007a94 <_strtod_l+0x5ec>
 8007a90:	4682      	mov	sl, r0
 8007a92:	468b      	mov	fp, r1
 8007a94:	9b04      	ldr	r3, [sp, #16]
 8007a96:	b1c3      	cbz	r3, 8007aca <_strtod_l+0x622>
 8007a98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	dd11      	ble.n	8007aca <_strtod_l+0x622>
 8007aa6:	2b1f      	cmp	r3, #31
 8007aa8:	f340 8124 	ble.w	8007cf4 <_strtod_l+0x84c>
 8007aac:	2b34      	cmp	r3, #52	; 0x34
 8007aae:	bfde      	ittt	le
 8007ab0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ab4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ab8:	fa03 f202 	lslle.w	r2, r3, r2
 8007abc:	f04f 0a00 	mov.w	sl, #0
 8007ac0:	bfcc      	ite	gt
 8007ac2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007ac6:	ea02 0b01 	andle.w	fp, r2, r1
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4650      	mov	r0, sl
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	f7f9 f811 	bl	8000af8 <__aeabi_dcmpeq>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d1a2      	bne.n	8007a20 <_strtod_l+0x578>
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	9908      	ldr	r1, [sp, #32]
 8007ae0:	462b      	mov	r3, r5
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f001 fe2d 	bl	8009744 <__s2b>
 8007aea:	9007      	str	r0, [sp, #28]
 8007aec:	2800      	cmp	r0, #0
 8007aee:	f43f af1f 	beq.w	8007930 <_strtod_l+0x488>
 8007af2:	9b05      	ldr	r3, [sp, #20]
 8007af4:	1b9e      	subs	r6, r3, r6
 8007af6:	9b06      	ldr	r3, [sp, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfb4      	ite	lt
 8007afc:	4633      	movlt	r3, r6
 8007afe:	2300      	movge	r3, #0
 8007b00:	930c      	str	r3, [sp, #48]	; 0x30
 8007b02:	9b06      	ldr	r3, [sp, #24]
 8007b04:	2500      	movs	r5, #0
 8007b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b0a:	9312      	str	r3, [sp, #72]	; 0x48
 8007b0c:	462e      	mov	r6, r5
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	4620      	mov	r0, r4
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	f001 fd6e 	bl	80095f4 <_Balloc>
 8007b18:	9005      	str	r0, [sp, #20]
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f43f af0c 	beq.w	8007938 <_strtod_l+0x490>
 8007b20:	9b07      	ldr	r3, [sp, #28]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	3202      	adds	r2, #2
 8007b26:	f103 010c 	add.w	r1, r3, #12
 8007b2a:	0092      	lsls	r2, r2, #2
 8007b2c:	300c      	adds	r0, #12
 8007b2e:	f001 fd53 	bl	80095d8 <memcpy>
 8007b32:	ec4b ab10 	vmov	d0, sl, fp
 8007b36:	aa1a      	add	r2, sp, #104	; 0x68
 8007b38:	a919      	add	r1, sp, #100	; 0x64
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f002 f948 	bl	8009dd0 <__d2b>
 8007b40:	ec4b ab18 	vmov	d8, sl, fp
 8007b44:	9018      	str	r0, [sp, #96]	; 0x60
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f aef6 	beq.w	8007938 <_strtod_l+0x490>
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f001 fe92 	bl	8009878 <__i2b>
 8007b54:	4606      	mov	r6, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f aeee 	beq.w	8007938 <_strtod_l+0x490>
 8007b5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b5e:	9904      	ldr	r1, [sp, #16]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfab      	itete	ge
 8007b64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007b66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b6e:	bfac      	ite	ge
 8007b70:	eb03 0902 	addge.w	r9, r3, r2
 8007b74:	1ad7      	sublt	r7, r2, r3
 8007b76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b78:	eba3 0801 	sub.w	r8, r3, r1
 8007b7c:	4490      	add	r8, r2
 8007b7e:	4ba1      	ldr	r3, [pc, #644]	; (8007e04 <_strtod_l+0x95c>)
 8007b80:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b84:	4598      	cmp	r8, r3
 8007b86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b8a:	f280 80c7 	bge.w	8007d1c <_strtod_l+0x874>
 8007b8e:	eba3 0308 	sub.w	r3, r3, r8
 8007b92:	2b1f      	cmp	r3, #31
 8007b94:	eba2 0203 	sub.w	r2, r2, r3
 8007b98:	f04f 0101 	mov.w	r1, #1
 8007b9c:	f300 80b1 	bgt.w	8007d02 <_strtod_l+0x85a>
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	eb09 0802 	add.w	r8, r9, r2
 8007bae:	9b04      	ldr	r3, [sp, #16]
 8007bb0:	45c1      	cmp	r9, r8
 8007bb2:	4417      	add	r7, r2
 8007bb4:	441f      	add	r7, r3
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	bfa8      	it	ge
 8007bba:	4643      	movge	r3, r8
 8007bbc:	42bb      	cmp	r3, r7
 8007bbe:	bfa8      	it	ge
 8007bc0:	463b      	movge	r3, r7
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bfc2      	ittt	gt
 8007bc6:	eba8 0803 	subgt.w	r8, r8, r3
 8007bca:	1aff      	subgt	r7, r7, r3
 8007bcc:	eba9 0903 	subgt.w	r9, r9, r3
 8007bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	dd17      	ble.n	8007c06 <_strtod_l+0x75e>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f001 ff0c 	bl	80099f8 <__pow5mult>
 8007be0:	4606      	mov	r6, r0
 8007be2:	2800      	cmp	r0, #0
 8007be4:	f43f aea8 	beq.w	8007938 <_strtod_l+0x490>
 8007be8:	4601      	mov	r1, r0
 8007bea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007bec:	4620      	mov	r0, r4
 8007bee:	f001 fe59 	bl	80098a4 <__multiply>
 8007bf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f ae9f 	beq.w	8007938 <_strtod_l+0x490>
 8007bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 fd39 	bl	8009674 <_Bfree>
 8007c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c04:	9318      	str	r3, [sp, #96]	; 0x60
 8007c06:	f1b8 0f00 	cmp.w	r8, #0
 8007c0a:	f300 808c 	bgt.w	8007d26 <_strtod_l+0x87e>
 8007c0e:	9b06      	ldr	r3, [sp, #24]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dd08      	ble.n	8007c26 <_strtod_l+0x77e>
 8007c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c16:	9905      	ldr	r1, [sp, #20]
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 feed 	bl	80099f8 <__pow5mult>
 8007c1e:	9005      	str	r0, [sp, #20]
 8007c20:	2800      	cmp	r0, #0
 8007c22:	f43f ae89 	beq.w	8007938 <_strtod_l+0x490>
 8007c26:	2f00      	cmp	r7, #0
 8007c28:	dd08      	ble.n	8007c3c <_strtod_l+0x794>
 8007c2a:	9905      	ldr	r1, [sp, #20]
 8007c2c:	463a      	mov	r2, r7
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f001 ff3c 	bl	8009aac <__lshift>
 8007c34:	9005      	str	r0, [sp, #20]
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f ae7e 	beq.w	8007938 <_strtod_l+0x490>
 8007c3c:	f1b9 0f00 	cmp.w	r9, #0
 8007c40:	dd08      	ble.n	8007c54 <_strtod_l+0x7ac>
 8007c42:	4631      	mov	r1, r6
 8007c44:	464a      	mov	r2, r9
 8007c46:	4620      	mov	r0, r4
 8007c48:	f001 ff30 	bl	8009aac <__lshift>
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f ae72 	beq.w	8007938 <_strtod_l+0x490>
 8007c54:	9a05      	ldr	r2, [sp, #20]
 8007c56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f001 ffb3 	bl	8009bc4 <__mdiff>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	2800      	cmp	r0, #0
 8007c62:	f43f ae69 	beq.w	8007938 <_strtod_l+0x490>
 8007c66:	68c3      	ldr	r3, [r0, #12]
 8007c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60c3      	str	r3, [r0, #12]
 8007c6e:	4631      	mov	r1, r6
 8007c70:	f001 ff8c 	bl	8009b8c <__mcmp>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	da60      	bge.n	8007d3a <_strtod_l+0x892>
 8007c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007c7e:	f040 8082 	bne.w	8007d86 <_strtod_l+0x8de>
 8007c82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d17d      	bne.n	8007d86 <_strtod_l+0x8de>
 8007c8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c8e:	0d1b      	lsrs	r3, r3, #20
 8007c90:	051b      	lsls	r3, r3, #20
 8007c92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c96:	d976      	bls.n	8007d86 <_strtod_l+0x8de>
 8007c98:	696b      	ldr	r3, [r5, #20]
 8007c9a:	b913      	cbnz	r3, 8007ca2 <_strtod_l+0x7fa>
 8007c9c:	692b      	ldr	r3, [r5, #16]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	dd71      	ble.n	8007d86 <_strtod_l+0x8de>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 ff00 	bl	8009aac <__lshift>
 8007cac:	4631      	mov	r1, r6
 8007cae:	4605      	mov	r5, r0
 8007cb0:	f001 ff6c 	bl	8009b8c <__mcmp>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	dd66      	ble.n	8007d86 <_strtod_l+0x8de>
 8007cb8:	9904      	ldr	r1, [sp, #16]
 8007cba:	4a53      	ldr	r2, [pc, #332]	; (8007e08 <_strtod_l+0x960>)
 8007cbc:	465b      	mov	r3, fp
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	f000 8081 	beq.w	8007dc6 <_strtod_l+0x91e>
 8007cc4:	ea02 010b 	and.w	r1, r2, fp
 8007cc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ccc:	dc7b      	bgt.n	8007dc6 <_strtod_l+0x91e>
 8007cce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007cd2:	f77f aea9 	ble.w	8007a28 <_strtod_l+0x580>
 8007cd6:	4b4d      	ldr	r3, [pc, #308]	; (8007e0c <_strtod_l+0x964>)
 8007cd8:	4650      	mov	r0, sl
 8007cda:	4659      	mov	r1, fp
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f7f8 fca3 	bl	8000628 <__aeabi_dmul>
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4303      	orrs	r3, r0
 8007ce6:	bf08      	it	eq
 8007ce8:	2322      	moveq	r3, #34	; 0x22
 8007cea:	4682      	mov	sl, r0
 8007cec:	468b      	mov	fp, r1
 8007cee:	bf08      	it	eq
 8007cf0:	6023      	streq	r3, [r4, #0]
 8007cf2:	e62b      	b.n	800794c <_strtod_l+0x4a4>
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	ea03 0a0a 	and.w	sl, r3, sl
 8007d00:	e6e3      	b.n	8007aca <_strtod_l+0x622>
 8007d02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007d06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007d0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007d0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007d12:	fa01 f308 	lsl.w	r3, r1, r8
 8007d16:	9308      	str	r3, [sp, #32]
 8007d18:	910d      	str	r1, [sp, #52]	; 0x34
 8007d1a:	e746      	b.n	8007baa <_strtod_l+0x702>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9308      	str	r3, [sp, #32]
 8007d20:	2301      	movs	r3, #1
 8007d22:	930d      	str	r3, [sp, #52]	; 0x34
 8007d24:	e741      	b.n	8007baa <_strtod_l+0x702>
 8007d26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d28:	4642      	mov	r2, r8
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f001 febe 	bl	8009aac <__lshift>
 8007d30:	9018      	str	r0, [sp, #96]	; 0x60
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f47f af6b 	bne.w	8007c0e <_strtod_l+0x766>
 8007d38:	e5fe      	b.n	8007938 <_strtod_l+0x490>
 8007d3a:	465f      	mov	r7, fp
 8007d3c:	d16e      	bne.n	8007e1c <_strtod_l+0x974>
 8007d3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d44:	b342      	cbz	r2, 8007d98 <_strtod_l+0x8f0>
 8007d46:	4a32      	ldr	r2, [pc, #200]	; (8007e10 <_strtod_l+0x968>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d128      	bne.n	8007d9e <_strtod_l+0x8f6>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	4651      	mov	r1, sl
 8007d50:	b1eb      	cbz	r3, 8007d8e <_strtod_l+0x8e6>
 8007d52:	4b2d      	ldr	r3, [pc, #180]	; (8007e08 <_strtod_l+0x960>)
 8007d54:	403b      	ands	r3, r7
 8007d56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5e:	d819      	bhi.n	8007d94 <_strtod_l+0x8ec>
 8007d60:	0d1b      	lsrs	r3, r3, #20
 8007d62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d66:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	d117      	bne.n	8007d9e <_strtod_l+0x8f6>
 8007d6e:	4b29      	ldr	r3, [pc, #164]	; (8007e14 <_strtod_l+0x96c>)
 8007d70:	429f      	cmp	r7, r3
 8007d72:	d102      	bne.n	8007d7a <_strtod_l+0x8d2>
 8007d74:	3101      	adds	r1, #1
 8007d76:	f43f addf 	beq.w	8007938 <_strtod_l+0x490>
 8007d7a:	4b23      	ldr	r3, [pc, #140]	; (8007e08 <_strtod_l+0x960>)
 8007d7c:	403b      	ands	r3, r7
 8007d7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d82:	f04f 0a00 	mov.w	sl, #0
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1a4      	bne.n	8007cd6 <_strtod_l+0x82e>
 8007d8c:	e5de      	b.n	800794c <_strtod_l+0x4a4>
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d92:	e7ea      	b.n	8007d6a <_strtod_l+0x8c2>
 8007d94:	4613      	mov	r3, r2
 8007d96:	e7e8      	b.n	8007d6a <_strtod_l+0x8c2>
 8007d98:	ea53 030a 	orrs.w	r3, r3, sl
 8007d9c:	d08c      	beq.n	8007cb8 <_strtod_l+0x810>
 8007d9e:	9b08      	ldr	r3, [sp, #32]
 8007da0:	b1db      	cbz	r3, 8007dda <_strtod_l+0x932>
 8007da2:	423b      	tst	r3, r7
 8007da4:	d0ef      	beq.n	8007d86 <_strtod_l+0x8de>
 8007da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da8:	9a04      	ldr	r2, [sp, #16]
 8007daa:	4650      	mov	r0, sl
 8007dac:	4659      	mov	r1, fp
 8007dae:	b1c3      	cbz	r3, 8007de2 <_strtod_l+0x93a>
 8007db0:	f7ff fb5c 	bl	800746c <sulp>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	ec51 0b18 	vmov	r0, r1, d8
 8007dbc:	f7f8 fa7e 	bl	80002bc <__adddf3>
 8007dc0:	4682      	mov	sl, r0
 8007dc2:	468b      	mov	fp, r1
 8007dc4:	e7df      	b.n	8007d86 <_strtod_l+0x8de>
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007dcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007dd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007dd4:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd8:	e7d5      	b.n	8007d86 <_strtod_l+0x8de>
 8007dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ddc:	ea13 0f0a 	tst.w	r3, sl
 8007de0:	e7e0      	b.n	8007da4 <_strtod_l+0x8fc>
 8007de2:	f7ff fb43 	bl	800746c <sulp>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	ec51 0b18 	vmov	r0, r1, d8
 8007dee:	f7f8 fa63 	bl	80002b8 <__aeabi_dsub>
 8007df2:	2200      	movs	r2, #0
 8007df4:	2300      	movs	r3, #0
 8007df6:	4682      	mov	sl, r0
 8007df8:	468b      	mov	fp, r1
 8007dfa:	f7f8 fe7d 	bl	8000af8 <__aeabi_dcmpeq>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d0c1      	beq.n	8007d86 <_strtod_l+0x8de>
 8007e02:	e611      	b.n	8007a28 <_strtod_l+0x580>
 8007e04:	fffffc02 	.word	0xfffffc02
 8007e08:	7ff00000 	.word	0x7ff00000
 8007e0c:	39500000 	.word	0x39500000
 8007e10:	000fffff 	.word	0x000fffff
 8007e14:	7fefffff 	.word	0x7fefffff
 8007e18:	0800be80 	.word	0x0800be80
 8007e1c:	4631      	mov	r1, r6
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f002 f832 	bl	8009e88 <__ratio>
 8007e24:	ec59 8b10 	vmov	r8, r9, d0
 8007e28:	ee10 0a10 	vmov	r0, s0
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e32:	4649      	mov	r1, r9
 8007e34:	f7f8 fe74 	bl	8000b20 <__aeabi_dcmple>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d07a      	beq.n	8007f32 <_strtod_l+0xa8a>
 8007e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d04a      	beq.n	8007ed8 <_strtod_l+0xa30>
 8007e42:	4b95      	ldr	r3, [pc, #596]	; (8008098 <_strtod_l+0xbf0>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008098 <_strtod_l+0xbf0>
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	4b92      	ldr	r3, [pc, #584]	; (800809c <_strtod_l+0xbf4>)
 8007e54:	403b      	ands	r3, r7
 8007e56:	930d      	str	r3, [sp, #52]	; 0x34
 8007e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e5a:	4b91      	ldr	r3, [pc, #580]	; (80080a0 <_strtod_l+0xbf8>)
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	f040 80b0 	bne.w	8007fc2 <_strtod_l+0xb1a>
 8007e62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e6a:	ec4b ab10 	vmov	d0, sl, fp
 8007e6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e72:	f001 ff31 	bl	8009cd8 <__ulp>
 8007e76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e7a:	ec53 2b10 	vmov	r2, r3, d0
 8007e7e:	f7f8 fbd3 	bl	8000628 <__aeabi_dmul>
 8007e82:	4652      	mov	r2, sl
 8007e84:	465b      	mov	r3, fp
 8007e86:	f7f8 fa19 	bl	80002bc <__adddf3>
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4983      	ldr	r1, [pc, #524]	; (800809c <_strtod_l+0xbf4>)
 8007e8e:	4a85      	ldr	r2, [pc, #532]	; (80080a4 <_strtod_l+0xbfc>)
 8007e90:	4019      	ands	r1, r3
 8007e92:	4291      	cmp	r1, r2
 8007e94:	4682      	mov	sl, r0
 8007e96:	d960      	bls.n	8007f5a <_strtod_l+0xab2>
 8007e98:	ee18 3a90 	vmov	r3, s17
 8007e9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d104      	bne.n	8007eae <_strtod_l+0xa06>
 8007ea4:	ee18 3a10 	vmov	r3, s16
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	f43f ad45 	beq.w	8007938 <_strtod_l+0x490>
 8007eae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80080b0 <_strtod_l+0xc08>
 8007eb2:	f04f 3aff 	mov.w	sl, #4294967295
 8007eb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f001 fbdb 	bl	8009674 <_Bfree>
 8007ebe:	9905      	ldr	r1, [sp, #20]
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 fbd7 	bl	8009674 <_Bfree>
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f001 fbd3 	bl	8009674 <_Bfree>
 8007ece:	4629      	mov	r1, r5
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f001 fbcf 	bl	8009674 <_Bfree>
 8007ed6:	e61a      	b.n	8007b0e <_strtod_l+0x666>
 8007ed8:	f1ba 0f00 	cmp.w	sl, #0
 8007edc:	d11b      	bne.n	8007f16 <_strtod_l+0xa6e>
 8007ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ee2:	b9f3      	cbnz	r3, 8007f22 <_strtod_l+0xa7a>
 8007ee4:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <_strtod_l+0xbf0>)
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 fe0e 	bl	8000b0c <__aeabi_dcmplt>
 8007ef0:	b9d0      	cbnz	r0, 8007f28 <_strtod_l+0xa80>
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	4b6c      	ldr	r3, [pc, #432]	; (80080a8 <_strtod_l+0xc00>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7f8 fb95 	bl	8000628 <__aeabi_dmul>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007f0a:	9315      	str	r3, [sp, #84]	; 0x54
 8007f0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f14:	e79d      	b.n	8007e52 <_strtod_l+0x9aa>
 8007f16:	f1ba 0f01 	cmp.w	sl, #1
 8007f1a:	d102      	bne.n	8007f22 <_strtod_l+0xa7a>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	f43f ad83 	beq.w	8007a28 <_strtod_l+0x580>
 8007f22:	4b62      	ldr	r3, [pc, #392]	; (80080ac <_strtod_l+0xc04>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	e78e      	b.n	8007e46 <_strtod_l+0x99e>
 8007f28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80080a8 <_strtod_l+0xc00>
 8007f2c:	f04f 0800 	mov.w	r8, #0
 8007f30:	e7e7      	b.n	8007f02 <_strtod_l+0xa5a>
 8007f32:	4b5d      	ldr	r3, [pc, #372]	; (80080a8 <_strtod_l+0xc00>)
 8007f34:	4640      	mov	r0, r8
 8007f36:	4649      	mov	r1, r9
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f7f8 fb75 	bl	8000628 <__aeabi_dmul>
 8007f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f40:	4680      	mov	r8, r0
 8007f42:	4689      	mov	r9, r1
 8007f44:	b933      	cbnz	r3, 8007f54 <_strtod_l+0xaac>
 8007f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f4a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007f52:	e7dd      	b.n	8007f10 <_strtod_l+0xa68>
 8007f54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007f58:	e7f9      	b.n	8007f4e <_strtod_l+0xaa6>
 8007f5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007f5e:	9b04      	ldr	r3, [sp, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1a8      	bne.n	8007eb6 <_strtod_l+0xa0e>
 8007f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f6a:	0d1b      	lsrs	r3, r3, #20
 8007f6c:	051b      	lsls	r3, r3, #20
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d1a1      	bne.n	8007eb6 <_strtod_l+0xa0e>
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 feb7 	bl	8000ce8 <__aeabi_d2lz>
 8007f7a:	f7f8 fb27 	bl	80005cc <__aeabi_l2d>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4640      	mov	r0, r8
 8007f84:	4649      	mov	r1, r9
 8007f86:	f7f8 f997 	bl	80002b8 <__aeabi_dsub>
 8007f8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f90:	ea43 030a 	orr.w	r3, r3, sl
 8007f94:	4313      	orrs	r3, r2
 8007f96:	4680      	mov	r8, r0
 8007f98:	4689      	mov	r9, r1
 8007f9a:	d055      	beq.n	8008048 <_strtod_l+0xba0>
 8007f9c:	a336      	add	r3, pc, #216	; (adr r3, 8008078 <_strtod_l+0xbd0>)
 8007f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa2:	f7f8 fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f47f acd0 	bne.w	800794c <_strtod_l+0x4a4>
 8007fac:	a334      	add	r3, pc, #208	; (adr r3, 8008080 <_strtod_l+0xbd8>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	f7f8 fdc7 	bl	8000b48 <__aeabi_dcmpgt>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f43f af7b 	beq.w	8007eb6 <_strtod_l+0xa0e>
 8007fc0:	e4c4      	b.n	800794c <_strtod_l+0x4a4>
 8007fc2:	9b04      	ldr	r3, [sp, #16]
 8007fc4:	b333      	cbz	r3, 8008014 <_strtod_l+0xb6c>
 8007fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fc8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007fcc:	d822      	bhi.n	8008014 <_strtod_l+0xb6c>
 8007fce:	a32e      	add	r3, pc, #184	; (adr r3, 8008088 <_strtod_l+0xbe0>)
 8007fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 fda2 	bl	8000b20 <__aeabi_dcmple>
 8007fdc:	b1a0      	cbz	r0, 8008008 <_strtod_l+0xb60>
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	f7f8 fdf9 	bl	8000bd8 <__aeabi_d2uiz>
 8007fe6:	2801      	cmp	r0, #1
 8007fe8:	bf38      	it	cc
 8007fea:	2001      	movcc	r0, #1
 8007fec:	f7f8 faa2 	bl	8000534 <__aeabi_ui2d>
 8007ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4689      	mov	r9, r1
 8007ff6:	bb23      	cbnz	r3, 8008042 <_strtod_l+0xb9a>
 8007ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ffc:	9010      	str	r0, [sp, #64]	; 0x40
 8007ffe:	9311      	str	r3, [sp, #68]	; 0x44
 8008000:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008004:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800800c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008010:	1a9b      	subs	r3, r3, r2
 8008012:	9309      	str	r3, [sp, #36]	; 0x24
 8008014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008018:	eeb0 0a48 	vmov.f32	s0, s16
 800801c:	eef0 0a68 	vmov.f32	s1, s17
 8008020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008024:	f001 fe58 	bl	8009cd8 <__ulp>
 8008028:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800802c:	ec53 2b10 	vmov	r2, r3, d0
 8008030:	f7f8 fafa 	bl	8000628 <__aeabi_dmul>
 8008034:	ec53 2b18 	vmov	r2, r3, d8
 8008038:	f7f8 f940 	bl	80002bc <__adddf3>
 800803c:	4682      	mov	sl, r0
 800803e:	468b      	mov	fp, r1
 8008040:	e78d      	b.n	8007f5e <_strtod_l+0xab6>
 8008042:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008046:	e7db      	b.n	8008000 <_strtod_l+0xb58>
 8008048:	a311      	add	r3, pc, #68	; (adr r3, 8008090 <_strtod_l+0xbe8>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fd5d 	bl	8000b0c <__aeabi_dcmplt>
 8008052:	e7b2      	b.n	8007fba <_strtod_l+0xb12>
 8008054:	2300      	movs	r3, #0
 8008056:	930a      	str	r3, [sp, #40]	; 0x28
 8008058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800805a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	f7ff ba6b 	b.w	8007538 <_strtod_l+0x90>
 8008062:	2a65      	cmp	r2, #101	; 0x65
 8008064:	f43f ab5f 	beq.w	8007726 <_strtod_l+0x27e>
 8008068:	2a45      	cmp	r2, #69	; 0x45
 800806a:	f43f ab5c 	beq.w	8007726 <_strtod_l+0x27e>
 800806e:	2301      	movs	r3, #1
 8008070:	f7ff bb94 	b.w	800779c <_strtod_l+0x2f4>
 8008074:	f3af 8000 	nop.w
 8008078:	94a03595 	.word	0x94a03595
 800807c:	3fdfffff 	.word	0x3fdfffff
 8008080:	35afe535 	.word	0x35afe535
 8008084:	3fe00000 	.word	0x3fe00000
 8008088:	ffc00000 	.word	0xffc00000
 800808c:	41dfffff 	.word	0x41dfffff
 8008090:	94a03595 	.word	0x94a03595
 8008094:	3fcfffff 	.word	0x3fcfffff
 8008098:	3ff00000 	.word	0x3ff00000
 800809c:	7ff00000 	.word	0x7ff00000
 80080a0:	7fe00000 	.word	0x7fe00000
 80080a4:	7c9fffff 	.word	0x7c9fffff
 80080a8:	3fe00000 	.word	0x3fe00000
 80080ac:	bff00000 	.word	0xbff00000
 80080b0:	7fefffff 	.word	0x7fefffff

080080b4 <_strtod_r>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <_strtod_r+0x8>)
 80080b6:	f7ff b9f7 	b.w	80074a8 <_strtod_l>
 80080ba:	bf00      	nop
 80080bc:	20000098 	.word	0x20000098

080080c0 <_strtol_l.constprop.0>:
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c6:	d001      	beq.n	80080cc <_strtol_l.constprop.0+0xc>
 80080c8:	2b24      	cmp	r3, #36	; 0x24
 80080ca:	d906      	bls.n	80080da <_strtol_l.constprop.0+0x1a>
 80080cc:	f7fe fafc 	bl	80066c8 <__errno>
 80080d0:	2316      	movs	r3, #22
 80080d2:	6003      	str	r3, [r0, #0]
 80080d4:	2000      	movs	r0, #0
 80080d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80081c0 <_strtol_l.constprop.0+0x100>
 80080de:	460d      	mov	r5, r1
 80080e0:	462e      	mov	r6, r5
 80080e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80080ea:	f017 0708 	ands.w	r7, r7, #8
 80080ee:	d1f7      	bne.n	80080e0 <_strtol_l.constprop.0+0x20>
 80080f0:	2c2d      	cmp	r4, #45	; 0x2d
 80080f2:	d132      	bne.n	800815a <_strtol_l.constprop.0+0x9a>
 80080f4:	782c      	ldrb	r4, [r5, #0]
 80080f6:	2701      	movs	r7, #1
 80080f8:	1cb5      	adds	r5, r6, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d05b      	beq.n	80081b6 <_strtol_l.constprop.0+0xf6>
 80080fe:	2b10      	cmp	r3, #16
 8008100:	d109      	bne.n	8008116 <_strtol_l.constprop.0+0x56>
 8008102:	2c30      	cmp	r4, #48	; 0x30
 8008104:	d107      	bne.n	8008116 <_strtol_l.constprop.0+0x56>
 8008106:	782c      	ldrb	r4, [r5, #0]
 8008108:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800810c:	2c58      	cmp	r4, #88	; 0x58
 800810e:	d14d      	bne.n	80081ac <_strtol_l.constprop.0+0xec>
 8008110:	786c      	ldrb	r4, [r5, #1]
 8008112:	2310      	movs	r3, #16
 8008114:	3502      	adds	r5, #2
 8008116:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800811a:	f108 38ff 	add.w	r8, r8, #4294967295
 800811e:	f04f 0c00 	mov.w	ip, #0
 8008122:	fbb8 f9f3 	udiv	r9, r8, r3
 8008126:	4666      	mov	r6, ip
 8008128:	fb03 8a19 	mls	sl, r3, r9, r8
 800812c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008130:	f1be 0f09 	cmp.w	lr, #9
 8008134:	d816      	bhi.n	8008164 <_strtol_l.constprop.0+0xa4>
 8008136:	4674      	mov	r4, lr
 8008138:	42a3      	cmp	r3, r4
 800813a:	dd24      	ble.n	8008186 <_strtol_l.constprop.0+0xc6>
 800813c:	f1bc 0f00 	cmp.w	ip, #0
 8008140:	db1e      	blt.n	8008180 <_strtol_l.constprop.0+0xc0>
 8008142:	45b1      	cmp	r9, r6
 8008144:	d31c      	bcc.n	8008180 <_strtol_l.constprop.0+0xc0>
 8008146:	d101      	bne.n	800814c <_strtol_l.constprop.0+0x8c>
 8008148:	45a2      	cmp	sl, r4
 800814a:	db19      	blt.n	8008180 <_strtol_l.constprop.0+0xc0>
 800814c:	fb06 4603 	mla	r6, r6, r3, r4
 8008150:	f04f 0c01 	mov.w	ip, #1
 8008154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008158:	e7e8      	b.n	800812c <_strtol_l.constprop.0+0x6c>
 800815a:	2c2b      	cmp	r4, #43	; 0x2b
 800815c:	bf04      	itt	eq
 800815e:	782c      	ldrbeq	r4, [r5, #0]
 8008160:	1cb5      	addeq	r5, r6, #2
 8008162:	e7ca      	b.n	80080fa <_strtol_l.constprop.0+0x3a>
 8008164:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008168:	f1be 0f19 	cmp.w	lr, #25
 800816c:	d801      	bhi.n	8008172 <_strtol_l.constprop.0+0xb2>
 800816e:	3c37      	subs	r4, #55	; 0x37
 8008170:	e7e2      	b.n	8008138 <_strtol_l.constprop.0+0x78>
 8008172:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008176:	f1be 0f19 	cmp.w	lr, #25
 800817a:	d804      	bhi.n	8008186 <_strtol_l.constprop.0+0xc6>
 800817c:	3c57      	subs	r4, #87	; 0x57
 800817e:	e7db      	b.n	8008138 <_strtol_l.constprop.0+0x78>
 8008180:	f04f 3cff 	mov.w	ip, #4294967295
 8008184:	e7e6      	b.n	8008154 <_strtol_l.constprop.0+0x94>
 8008186:	f1bc 0f00 	cmp.w	ip, #0
 800818a:	da05      	bge.n	8008198 <_strtol_l.constprop.0+0xd8>
 800818c:	2322      	movs	r3, #34	; 0x22
 800818e:	6003      	str	r3, [r0, #0]
 8008190:	4646      	mov	r6, r8
 8008192:	b942      	cbnz	r2, 80081a6 <_strtol_l.constprop.0+0xe6>
 8008194:	4630      	mov	r0, r6
 8008196:	e79e      	b.n	80080d6 <_strtol_l.constprop.0+0x16>
 8008198:	b107      	cbz	r7, 800819c <_strtol_l.constprop.0+0xdc>
 800819a:	4276      	negs	r6, r6
 800819c:	2a00      	cmp	r2, #0
 800819e:	d0f9      	beq.n	8008194 <_strtol_l.constprop.0+0xd4>
 80081a0:	f1bc 0f00 	cmp.w	ip, #0
 80081a4:	d000      	beq.n	80081a8 <_strtol_l.constprop.0+0xe8>
 80081a6:	1e69      	subs	r1, r5, #1
 80081a8:	6011      	str	r1, [r2, #0]
 80081aa:	e7f3      	b.n	8008194 <_strtol_l.constprop.0+0xd4>
 80081ac:	2430      	movs	r4, #48	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1b1      	bne.n	8008116 <_strtol_l.constprop.0+0x56>
 80081b2:	2308      	movs	r3, #8
 80081b4:	e7af      	b.n	8008116 <_strtol_l.constprop.0+0x56>
 80081b6:	2c30      	cmp	r4, #48	; 0x30
 80081b8:	d0a5      	beq.n	8008106 <_strtol_l.constprop.0+0x46>
 80081ba:	230a      	movs	r3, #10
 80081bc:	e7ab      	b.n	8008116 <_strtol_l.constprop.0+0x56>
 80081be:	bf00      	nop
 80081c0:	0800bea9 	.word	0x0800bea9

080081c4 <_strtol_r>:
 80081c4:	f7ff bf7c 	b.w	80080c0 <_strtol_l.constprop.0>

080081c8 <quorem>:
 80081c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	6903      	ldr	r3, [r0, #16]
 80081ce:	690c      	ldr	r4, [r1, #16]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	4607      	mov	r7, r0
 80081d4:	f2c0 8081 	blt.w	80082da <quorem+0x112>
 80081d8:	3c01      	subs	r4, #1
 80081da:	f101 0814 	add.w	r8, r1, #20
 80081de:	f100 0514 	add.w	r5, r0, #20
 80081e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081e6:	9301      	str	r3, [sp, #4]
 80081e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081f0:	3301      	adds	r3, #1
 80081f2:	429a      	cmp	r2, r3
 80081f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80081f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008200:	d331      	bcc.n	8008266 <quorem+0x9e>
 8008202:	f04f 0e00 	mov.w	lr, #0
 8008206:	4640      	mov	r0, r8
 8008208:	46ac      	mov	ip, r5
 800820a:	46f2      	mov	sl, lr
 800820c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008210:	b293      	uxth	r3, r2
 8008212:	fb06 e303 	mla	r3, r6, r3, lr
 8008216:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800821a:	b29b      	uxth	r3, r3
 800821c:	ebaa 0303 	sub.w	r3, sl, r3
 8008220:	f8dc a000 	ldr.w	sl, [ip]
 8008224:	0c12      	lsrs	r2, r2, #16
 8008226:	fa13 f38a 	uxtah	r3, r3, sl
 800822a:	fb06 e202 	mla	r2, r6, r2, lr
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	9b00      	ldr	r3, [sp, #0]
 8008232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008236:	b292      	uxth	r2, r2
 8008238:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800823c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008240:	f8bd 3000 	ldrh.w	r3, [sp]
 8008244:	4581      	cmp	r9, r0
 8008246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800824a:	f84c 3b04 	str.w	r3, [ip], #4
 800824e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008252:	d2db      	bcs.n	800820c <quorem+0x44>
 8008254:	f855 300b 	ldr.w	r3, [r5, fp]
 8008258:	b92b      	cbnz	r3, 8008266 <quorem+0x9e>
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	3b04      	subs	r3, #4
 800825e:	429d      	cmp	r5, r3
 8008260:	461a      	mov	r2, r3
 8008262:	d32e      	bcc.n	80082c2 <quorem+0xfa>
 8008264:	613c      	str	r4, [r7, #16]
 8008266:	4638      	mov	r0, r7
 8008268:	f001 fc90 	bl	8009b8c <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	db24      	blt.n	80082ba <quorem+0xf2>
 8008270:	3601      	adds	r6, #1
 8008272:	4628      	mov	r0, r5
 8008274:	f04f 0c00 	mov.w	ip, #0
 8008278:	f858 2b04 	ldr.w	r2, [r8], #4
 800827c:	f8d0 e000 	ldr.w	lr, [r0]
 8008280:	b293      	uxth	r3, r2
 8008282:	ebac 0303 	sub.w	r3, ip, r3
 8008286:	0c12      	lsrs	r2, r2, #16
 8008288:	fa13 f38e 	uxtah	r3, r3, lr
 800828c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008290:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008294:	b29b      	uxth	r3, r3
 8008296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800829a:	45c1      	cmp	r9, r8
 800829c:	f840 3b04 	str.w	r3, [r0], #4
 80082a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082a4:	d2e8      	bcs.n	8008278 <quorem+0xb0>
 80082a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082ae:	b922      	cbnz	r2, 80082ba <quorem+0xf2>
 80082b0:	3b04      	subs	r3, #4
 80082b2:	429d      	cmp	r5, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	d30a      	bcc.n	80082ce <quorem+0x106>
 80082b8:	613c      	str	r4, [r7, #16]
 80082ba:	4630      	mov	r0, r6
 80082bc:	b003      	add	sp, #12
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	3b04      	subs	r3, #4
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d1cc      	bne.n	8008264 <quorem+0x9c>
 80082ca:	3c01      	subs	r4, #1
 80082cc:	e7c7      	b.n	800825e <quorem+0x96>
 80082ce:	6812      	ldr	r2, [r2, #0]
 80082d0:	3b04      	subs	r3, #4
 80082d2:	2a00      	cmp	r2, #0
 80082d4:	d1f0      	bne.n	80082b8 <quorem+0xf0>
 80082d6:	3c01      	subs	r4, #1
 80082d8:	e7eb      	b.n	80082b2 <quorem+0xea>
 80082da:	2000      	movs	r0, #0
 80082dc:	e7ee      	b.n	80082bc <quorem+0xf4>
	...

080082e0 <_dtoa_r>:
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	ed2d 8b04 	vpush	{d8-d9}
 80082e8:	ec57 6b10 	vmov	r6, r7, d0
 80082ec:	b093      	sub	sp, #76	; 0x4c
 80082ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80082f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80082f4:	9106      	str	r1, [sp, #24]
 80082f6:	ee10 aa10 	vmov	sl, s0
 80082fa:	4604      	mov	r4, r0
 80082fc:	9209      	str	r2, [sp, #36]	; 0x24
 80082fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008300:	46bb      	mov	fp, r7
 8008302:	b975      	cbnz	r5, 8008322 <_dtoa_r+0x42>
 8008304:	2010      	movs	r0, #16
 8008306:	f001 f94d 	bl	80095a4 <malloc>
 800830a:	4602      	mov	r2, r0
 800830c:	6260      	str	r0, [r4, #36]	; 0x24
 800830e:	b920      	cbnz	r0, 800831a <_dtoa_r+0x3a>
 8008310:	4ba7      	ldr	r3, [pc, #668]	; (80085b0 <_dtoa_r+0x2d0>)
 8008312:	21ea      	movs	r1, #234	; 0xea
 8008314:	48a7      	ldr	r0, [pc, #668]	; (80085b4 <_dtoa_r+0x2d4>)
 8008316:	f002 f8bd 	bl	800a494 <__assert_func>
 800831a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800831e:	6005      	str	r5, [r0, #0]
 8008320:	60c5      	str	r5, [r0, #12]
 8008322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008324:	6819      	ldr	r1, [r3, #0]
 8008326:	b151      	cbz	r1, 800833e <_dtoa_r+0x5e>
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	604a      	str	r2, [r1, #4]
 800832c:	2301      	movs	r3, #1
 800832e:	4093      	lsls	r3, r2
 8008330:	608b      	str	r3, [r1, #8]
 8008332:	4620      	mov	r0, r4
 8008334:	f001 f99e 	bl	8009674 <_Bfree>
 8008338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	1e3b      	subs	r3, r7, #0
 8008340:	bfaa      	itet	ge
 8008342:	2300      	movge	r3, #0
 8008344:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008348:	f8c8 3000 	strge.w	r3, [r8]
 800834c:	4b9a      	ldr	r3, [pc, #616]	; (80085b8 <_dtoa_r+0x2d8>)
 800834e:	bfbc      	itt	lt
 8008350:	2201      	movlt	r2, #1
 8008352:	f8c8 2000 	strlt.w	r2, [r8]
 8008356:	ea33 030b 	bics.w	r3, r3, fp
 800835a:	d11b      	bne.n	8008394 <_dtoa_r+0xb4>
 800835c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800835e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008362:	6013      	str	r3, [r2, #0]
 8008364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008368:	4333      	orrs	r3, r6
 800836a:	f000 8592 	beq.w	8008e92 <_dtoa_r+0xbb2>
 800836e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008370:	b963      	cbnz	r3, 800838c <_dtoa_r+0xac>
 8008372:	4b92      	ldr	r3, [pc, #584]	; (80085bc <_dtoa_r+0x2dc>)
 8008374:	e022      	b.n	80083bc <_dtoa_r+0xdc>
 8008376:	4b92      	ldr	r3, [pc, #584]	; (80085c0 <_dtoa_r+0x2e0>)
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	3308      	adds	r3, #8
 800837c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800837e:	6013      	str	r3, [r2, #0]
 8008380:	9801      	ldr	r0, [sp, #4]
 8008382:	b013      	add	sp, #76	; 0x4c
 8008384:	ecbd 8b04 	vpop	{d8-d9}
 8008388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838c:	4b8b      	ldr	r3, [pc, #556]	; (80085bc <_dtoa_r+0x2dc>)
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	3303      	adds	r3, #3
 8008392:	e7f3      	b.n	800837c <_dtoa_r+0x9c>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4650      	mov	r0, sl
 800839a:	4659      	mov	r1, fp
 800839c:	f7f8 fbac 	bl	8000af8 <__aeabi_dcmpeq>
 80083a0:	ec4b ab19 	vmov	d9, sl, fp
 80083a4:	4680      	mov	r8, r0
 80083a6:	b158      	cbz	r0, 80083c0 <_dtoa_r+0xe0>
 80083a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083aa:	2301      	movs	r3, #1
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 856b 	beq.w	8008e8c <_dtoa_r+0xbac>
 80083b6:	4883      	ldr	r0, [pc, #524]	; (80085c4 <_dtoa_r+0x2e4>)
 80083b8:	6018      	str	r0, [r3, #0]
 80083ba:	1e43      	subs	r3, r0, #1
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	e7df      	b.n	8008380 <_dtoa_r+0xa0>
 80083c0:	ec4b ab10 	vmov	d0, sl, fp
 80083c4:	aa10      	add	r2, sp, #64	; 0x40
 80083c6:	a911      	add	r1, sp, #68	; 0x44
 80083c8:	4620      	mov	r0, r4
 80083ca:	f001 fd01 	bl	8009dd0 <__d2b>
 80083ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80083d2:	ee08 0a10 	vmov	s16, r0
 80083d6:	2d00      	cmp	r5, #0
 80083d8:	f000 8084 	beq.w	80084e4 <_dtoa_r+0x204>
 80083dc:	ee19 3a90 	vmov	r3, s19
 80083e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80083e8:	4656      	mov	r6, sl
 80083ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80083ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80083f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80083f6:	4b74      	ldr	r3, [pc, #464]	; (80085c8 <_dtoa_r+0x2e8>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	f7f7 ff5b 	bl	80002b8 <__aeabi_dsub>
 8008402:	a365      	add	r3, pc, #404	; (adr r3, 8008598 <_dtoa_r+0x2b8>)
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	f7f8 f90e 	bl	8000628 <__aeabi_dmul>
 800840c:	a364      	add	r3, pc, #400	; (adr r3, 80085a0 <_dtoa_r+0x2c0>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	f7f7 ff53 	bl	80002bc <__adddf3>
 8008416:	4606      	mov	r6, r0
 8008418:	4628      	mov	r0, r5
 800841a:	460f      	mov	r7, r1
 800841c:	f7f8 f89a 	bl	8000554 <__aeabi_i2d>
 8008420:	a361      	add	r3, pc, #388	; (adr r3, 80085a8 <_dtoa_r+0x2c8>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f8 f8ff 	bl	8000628 <__aeabi_dmul>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	4630      	mov	r0, r6
 8008430:	4639      	mov	r1, r7
 8008432:	f7f7 ff43 	bl	80002bc <__adddf3>
 8008436:	4606      	mov	r6, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f7f8 fba5 	bl	8000b88 <__aeabi_d2iz>
 800843e:	2200      	movs	r2, #0
 8008440:	9000      	str	r0, [sp, #0]
 8008442:	2300      	movs	r3, #0
 8008444:	4630      	mov	r0, r6
 8008446:	4639      	mov	r1, r7
 8008448:	f7f8 fb60 	bl	8000b0c <__aeabi_dcmplt>
 800844c:	b150      	cbz	r0, 8008464 <_dtoa_r+0x184>
 800844e:	9800      	ldr	r0, [sp, #0]
 8008450:	f7f8 f880 	bl	8000554 <__aeabi_i2d>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	f7f8 fb4e 	bl	8000af8 <__aeabi_dcmpeq>
 800845c:	b910      	cbnz	r0, 8008464 <_dtoa_r+0x184>
 800845e:	9b00      	ldr	r3, [sp, #0]
 8008460:	3b01      	subs	r3, #1
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	2b16      	cmp	r3, #22
 8008468:	d85a      	bhi.n	8008520 <_dtoa_r+0x240>
 800846a:	9a00      	ldr	r2, [sp, #0]
 800846c:	4b57      	ldr	r3, [pc, #348]	; (80085cc <_dtoa_r+0x2ec>)
 800846e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	ec51 0b19 	vmov	r0, r1, d9
 800847a:	f7f8 fb47 	bl	8000b0c <__aeabi_dcmplt>
 800847e:	2800      	cmp	r0, #0
 8008480:	d050      	beq.n	8008524 <_dtoa_r+0x244>
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	3b01      	subs	r3, #1
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	930b      	str	r3, [sp, #44]	; 0x2c
 800848c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800848e:	1b5d      	subs	r5, r3, r5
 8008490:	1e6b      	subs	r3, r5, #1
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	bf45      	ittet	mi
 8008496:	f1c5 0301 	rsbmi	r3, r5, #1
 800849a:	9304      	strmi	r3, [sp, #16]
 800849c:	2300      	movpl	r3, #0
 800849e:	2300      	movmi	r3, #0
 80084a0:	bf4c      	ite	mi
 80084a2:	9305      	strmi	r3, [sp, #20]
 80084a4:	9304      	strpl	r3, [sp, #16]
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db3d      	blt.n	8008528 <_dtoa_r+0x248>
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	9a00      	ldr	r2, [sp, #0]
 80084b0:	920a      	str	r2, [sp, #40]	; 0x28
 80084b2:	4413      	add	r3, r2
 80084b4:	9305      	str	r3, [sp, #20]
 80084b6:	2300      	movs	r3, #0
 80084b8:	9307      	str	r3, [sp, #28]
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	2b09      	cmp	r3, #9
 80084be:	f200 8089 	bhi.w	80085d4 <_dtoa_r+0x2f4>
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	bfc4      	itt	gt
 80084c6:	3b04      	subgt	r3, #4
 80084c8:	9306      	strgt	r3, [sp, #24]
 80084ca:	9b06      	ldr	r3, [sp, #24]
 80084cc:	f1a3 0302 	sub.w	r3, r3, #2
 80084d0:	bfcc      	ite	gt
 80084d2:	2500      	movgt	r5, #0
 80084d4:	2501      	movle	r5, #1
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	f200 8087 	bhi.w	80085ea <_dtoa_r+0x30a>
 80084dc:	e8df f003 	tbb	[pc, r3]
 80084e0:	59383a2d 	.word	0x59383a2d
 80084e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80084e8:	441d      	add	r5, r3
 80084ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	bfc1      	itttt	gt
 80084f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80084f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80084fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80084fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008502:	bfda      	itte	le
 8008504:	f1c3 0320 	rsble	r3, r3, #32
 8008508:	fa06 f003 	lslle.w	r0, r6, r3
 800850c:	4318      	orrgt	r0, r3
 800850e:	f7f8 f811 	bl	8000534 <__aeabi_ui2d>
 8008512:	2301      	movs	r3, #1
 8008514:	4606      	mov	r6, r0
 8008516:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800851a:	3d01      	subs	r5, #1
 800851c:	930e      	str	r3, [sp, #56]	; 0x38
 800851e:	e76a      	b.n	80083f6 <_dtoa_r+0x116>
 8008520:	2301      	movs	r3, #1
 8008522:	e7b2      	b.n	800848a <_dtoa_r+0x1aa>
 8008524:	900b      	str	r0, [sp, #44]	; 0x2c
 8008526:	e7b1      	b.n	800848c <_dtoa_r+0x1ac>
 8008528:	9b04      	ldr	r3, [sp, #16]
 800852a:	9a00      	ldr	r2, [sp, #0]
 800852c:	1a9b      	subs	r3, r3, r2
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	4253      	negs	r3, r2
 8008532:	9307      	str	r3, [sp, #28]
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	; 0x28
 8008538:	e7bf      	b.n	80084ba <_dtoa_r+0x1da>
 800853a:	2300      	movs	r3, #0
 800853c:	9308      	str	r3, [sp, #32]
 800853e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc55      	bgt.n	80085f0 <_dtoa_r+0x310>
 8008544:	2301      	movs	r3, #1
 8008546:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800854a:	461a      	mov	r2, r3
 800854c:	9209      	str	r2, [sp, #36]	; 0x24
 800854e:	e00c      	b.n	800856a <_dtoa_r+0x28a>
 8008550:	2301      	movs	r3, #1
 8008552:	e7f3      	b.n	800853c <_dtoa_r+0x25c>
 8008554:	2300      	movs	r3, #0
 8008556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	4413      	add	r3, r2
 800855e:	9302      	str	r3, [sp, #8]
 8008560:	3301      	adds	r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	9303      	str	r3, [sp, #12]
 8008566:	bfb8      	it	lt
 8008568:	2301      	movlt	r3, #1
 800856a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800856c:	2200      	movs	r2, #0
 800856e:	6042      	str	r2, [r0, #4]
 8008570:	2204      	movs	r2, #4
 8008572:	f102 0614 	add.w	r6, r2, #20
 8008576:	429e      	cmp	r6, r3
 8008578:	6841      	ldr	r1, [r0, #4]
 800857a:	d93d      	bls.n	80085f8 <_dtoa_r+0x318>
 800857c:	4620      	mov	r0, r4
 800857e:	f001 f839 	bl	80095f4 <_Balloc>
 8008582:	9001      	str	r0, [sp, #4]
 8008584:	2800      	cmp	r0, #0
 8008586:	d13b      	bne.n	8008600 <_dtoa_r+0x320>
 8008588:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <_dtoa_r+0x2f0>)
 800858a:	4602      	mov	r2, r0
 800858c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008590:	e6c0      	b.n	8008314 <_dtoa_r+0x34>
 8008592:	2301      	movs	r3, #1
 8008594:	e7df      	b.n	8008556 <_dtoa_r+0x276>
 8008596:	bf00      	nop
 8008598:	636f4361 	.word	0x636f4361
 800859c:	3fd287a7 	.word	0x3fd287a7
 80085a0:	8b60c8b3 	.word	0x8b60c8b3
 80085a4:	3fc68a28 	.word	0x3fc68a28
 80085a8:	509f79fb 	.word	0x509f79fb
 80085ac:	3fd34413 	.word	0x3fd34413
 80085b0:	0800bfb6 	.word	0x0800bfb6
 80085b4:	0800bfcd 	.word	0x0800bfcd
 80085b8:	7ff00000 	.word	0x7ff00000
 80085bc:	0800bfb2 	.word	0x0800bfb2
 80085c0:	0800bfa9 	.word	0x0800bfa9
 80085c4:	0800be29 	.word	0x0800be29
 80085c8:	3ff80000 	.word	0x3ff80000
 80085cc:	0800c138 	.word	0x0800c138
 80085d0:	0800c028 	.word	0x0800c028
 80085d4:	2501      	movs	r5, #1
 80085d6:	2300      	movs	r3, #0
 80085d8:	9306      	str	r3, [sp, #24]
 80085da:	9508      	str	r5, [sp, #32]
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085e4:	2200      	movs	r2, #0
 80085e6:	2312      	movs	r3, #18
 80085e8:	e7b0      	b.n	800854c <_dtoa_r+0x26c>
 80085ea:	2301      	movs	r3, #1
 80085ec:	9308      	str	r3, [sp, #32]
 80085ee:	e7f5      	b.n	80085dc <_dtoa_r+0x2fc>
 80085f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80085f6:	e7b8      	b.n	800856a <_dtoa_r+0x28a>
 80085f8:	3101      	adds	r1, #1
 80085fa:	6041      	str	r1, [r0, #4]
 80085fc:	0052      	lsls	r2, r2, #1
 80085fe:	e7b8      	b.n	8008572 <_dtoa_r+0x292>
 8008600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	2b0e      	cmp	r3, #14
 800860a:	f200 809d 	bhi.w	8008748 <_dtoa_r+0x468>
 800860e:	2d00      	cmp	r5, #0
 8008610:	f000 809a 	beq.w	8008748 <_dtoa_r+0x468>
 8008614:	9b00      	ldr	r3, [sp, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	dd32      	ble.n	8008680 <_dtoa_r+0x3a0>
 800861a:	4ab7      	ldr	r2, [pc, #732]	; (80088f8 <_dtoa_r+0x618>)
 800861c:	f003 030f 	and.w	r3, r3, #15
 8008620:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008628:	9b00      	ldr	r3, [sp, #0]
 800862a:	05d8      	lsls	r0, r3, #23
 800862c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008630:	d516      	bpl.n	8008660 <_dtoa_r+0x380>
 8008632:	4bb2      	ldr	r3, [pc, #712]	; (80088fc <_dtoa_r+0x61c>)
 8008634:	ec51 0b19 	vmov	r0, r1, d9
 8008638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800863c:	f7f8 f91e 	bl	800087c <__aeabi_ddiv>
 8008640:	f007 070f 	and.w	r7, r7, #15
 8008644:	4682      	mov	sl, r0
 8008646:	468b      	mov	fp, r1
 8008648:	2503      	movs	r5, #3
 800864a:	4eac      	ldr	r6, [pc, #688]	; (80088fc <_dtoa_r+0x61c>)
 800864c:	b957      	cbnz	r7, 8008664 <_dtoa_r+0x384>
 800864e:	4642      	mov	r2, r8
 8008650:	464b      	mov	r3, r9
 8008652:	4650      	mov	r0, sl
 8008654:	4659      	mov	r1, fp
 8008656:	f7f8 f911 	bl	800087c <__aeabi_ddiv>
 800865a:	4682      	mov	sl, r0
 800865c:	468b      	mov	fp, r1
 800865e:	e028      	b.n	80086b2 <_dtoa_r+0x3d2>
 8008660:	2502      	movs	r5, #2
 8008662:	e7f2      	b.n	800864a <_dtoa_r+0x36a>
 8008664:	07f9      	lsls	r1, r7, #31
 8008666:	d508      	bpl.n	800867a <_dtoa_r+0x39a>
 8008668:	4640      	mov	r0, r8
 800866a:	4649      	mov	r1, r9
 800866c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008670:	f7f7 ffda 	bl	8000628 <__aeabi_dmul>
 8008674:	3501      	adds	r5, #1
 8008676:	4680      	mov	r8, r0
 8008678:	4689      	mov	r9, r1
 800867a:	107f      	asrs	r7, r7, #1
 800867c:	3608      	adds	r6, #8
 800867e:	e7e5      	b.n	800864c <_dtoa_r+0x36c>
 8008680:	f000 809b 	beq.w	80087ba <_dtoa_r+0x4da>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	4f9d      	ldr	r7, [pc, #628]	; (80088fc <_dtoa_r+0x61c>)
 8008688:	425e      	negs	r6, r3
 800868a:	4b9b      	ldr	r3, [pc, #620]	; (80088f8 <_dtoa_r+0x618>)
 800868c:	f006 020f 	and.w	r2, r6, #15
 8008690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	ec51 0b19 	vmov	r0, r1, d9
 800869c:	f7f7 ffc4 	bl	8000628 <__aeabi_dmul>
 80086a0:	1136      	asrs	r6, r6, #4
 80086a2:	4682      	mov	sl, r0
 80086a4:	468b      	mov	fp, r1
 80086a6:	2300      	movs	r3, #0
 80086a8:	2502      	movs	r5, #2
 80086aa:	2e00      	cmp	r6, #0
 80086ac:	d17a      	bne.n	80087a4 <_dtoa_r+0x4c4>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1d3      	bne.n	800865a <_dtoa_r+0x37a>
 80086b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8082 	beq.w	80087be <_dtoa_r+0x4de>
 80086ba:	4b91      	ldr	r3, [pc, #580]	; (8008900 <_dtoa_r+0x620>)
 80086bc:	2200      	movs	r2, #0
 80086be:	4650      	mov	r0, sl
 80086c0:	4659      	mov	r1, fp
 80086c2:	f7f8 fa23 	bl	8000b0c <__aeabi_dcmplt>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d079      	beq.n	80087be <_dtoa_r+0x4de>
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d076      	beq.n	80087be <_dtoa_r+0x4de>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dd36      	ble.n	8008744 <_dtoa_r+0x464>
 80086d6:	9b00      	ldr	r3, [sp, #0]
 80086d8:	4650      	mov	r0, sl
 80086da:	4659      	mov	r1, fp
 80086dc:	1e5f      	subs	r7, r3, #1
 80086de:	2200      	movs	r2, #0
 80086e0:	4b88      	ldr	r3, [pc, #544]	; (8008904 <_dtoa_r+0x624>)
 80086e2:	f7f7 ffa1 	bl	8000628 <__aeabi_dmul>
 80086e6:	9e02      	ldr	r6, [sp, #8]
 80086e8:	4682      	mov	sl, r0
 80086ea:	468b      	mov	fp, r1
 80086ec:	3501      	adds	r5, #1
 80086ee:	4628      	mov	r0, r5
 80086f0:	f7f7 ff30 	bl	8000554 <__aeabi_i2d>
 80086f4:	4652      	mov	r2, sl
 80086f6:	465b      	mov	r3, fp
 80086f8:	f7f7 ff96 	bl	8000628 <__aeabi_dmul>
 80086fc:	4b82      	ldr	r3, [pc, #520]	; (8008908 <_dtoa_r+0x628>)
 80086fe:	2200      	movs	r2, #0
 8008700:	f7f7 fddc 	bl	80002bc <__adddf3>
 8008704:	46d0      	mov	r8, sl
 8008706:	46d9      	mov	r9, fp
 8008708:	4682      	mov	sl, r0
 800870a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800870e:	2e00      	cmp	r6, #0
 8008710:	d158      	bne.n	80087c4 <_dtoa_r+0x4e4>
 8008712:	4b7e      	ldr	r3, [pc, #504]	; (800890c <_dtoa_r+0x62c>)
 8008714:	2200      	movs	r2, #0
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f7 fdcd 	bl	80002b8 <__aeabi_dsub>
 800871e:	4652      	mov	r2, sl
 8008720:	465b      	mov	r3, fp
 8008722:	4680      	mov	r8, r0
 8008724:	4689      	mov	r9, r1
 8008726:	f7f8 fa0f 	bl	8000b48 <__aeabi_dcmpgt>
 800872a:	2800      	cmp	r0, #0
 800872c:	f040 8295 	bne.w	8008c5a <_dtoa_r+0x97a>
 8008730:	4652      	mov	r2, sl
 8008732:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	f7f8 f9e7 	bl	8000b0c <__aeabi_dcmplt>
 800873e:	2800      	cmp	r0, #0
 8008740:	f040 8289 	bne.w	8008c56 <_dtoa_r+0x976>
 8008744:	ec5b ab19 	vmov	sl, fp, d9
 8008748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800874a:	2b00      	cmp	r3, #0
 800874c:	f2c0 8148 	blt.w	80089e0 <_dtoa_r+0x700>
 8008750:	9a00      	ldr	r2, [sp, #0]
 8008752:	2a0e      	cmp	r2, #14
 8008754:	f300 8144 	bgt.w	80089e0 <_dtoa_r+0x700>
 8008758:	4b67      	ldr	r3, [pc, #412]	; (80088f8 <_dtoa_r+0x618>)
 800875a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800875e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008764:	2b00      	cmp	r3, #0
 8008766:	f280 80d5 	bge.w	8008914 <_dtoa_r+0x634>
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f300 80d1 	bgt.w	8008914 <_dtoa_r+0x634>
 8008772:	f040 826f 	bne.w	8008c54 <_dtoa_r+0x974>
 8008776:	4b65      	ldr	r3, [pc, #404]	; (800890c <_dtoa_r+0x62c>)
 8008778:	2200      	movs	r2, #0
 800877a:	4640      	mov	r0, r8
 800877c:	4649      	mov	r1, r9
 800877e:	f7f7 ff53 	bl	8000628 <__aeabi_dmul>
 8008782:	4652      	mov	r2, sl
 8008784:	465b      	mov	r3, fp
 8008786:	f7f8 f9d5 	bl	8000b34 <__aeabi_dcmpge>
 800878a:	9e03      	ldr	r6, [sp, #12]
 800878c:	4637      	mov	r7, r6
 800878e:	2800      	cmp	r0, #0
 8008790:	f040 8245 	bne.w	8008c1e <_dtoa_r+0x93e>
 8008794:	9d01      	ldr	r5, [sp, #4]
 8008796:	2331      	movs	r3, #49	; 0x31
 8008798:	f805 3b01 	strb.w	r3, [r5], #1
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	3301      	adds	r3, #1
 80087a0:	9300      	str	r3, [sp, #0]
 80087a2:	e240      	b.n	8008c26 <_dtoa_r+0x946>
 80087a4:	07f2      	lsls	r2, r6, #31
 80087a6:	d505      	bpl.n	80087b4 <_dtoa_r+0x4d4>
 80087a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087ac:	f7f7 ff3c 	bl	8000628 <__aeabi_dmul>
 80087b0:	3501      	adds	r5, #1
 80087b2:	2301      	movs	r3, #1
 80087b4:	1076      	asrs	r6, r6, #1
 80087b6:	3708      	adds	r7, #8
 80087b8:	e777      	b.n	80086aa <_dtoa_r+0x3ca>
 80087ba:	2502      	movs	r5, #2
 80087bc:	e779      	b.n	80086b2 <_dtoa_r+0x3d2>
 80087be:	9f00      	ldr	r7, [sp, #0]
 80087c0:	9e03      	ldr	r6, [sp, #12]
 80087c2:	e794      	b.n	80086ee <_dtoa_r+0x40e>
 80087c4:	9901      	ldr	r1, [sp, #4]
 80087c6:	4b4c      	ldr	r3, [pc, #304]	; (80088f8 <_dtoa_r+0x618>)
 80087c8:	4431      	add	r1, r6
 80087ca:	910d      	str	r1, [sp, #52]	; 0x34
 80087cc:	9908      	ldr	r1, [sp, #32]
 80087ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80087d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087d6:	2900      	cmp	r1, #0
 80087d8:	d043      	beq.n	8008862 <_dtoa_r+0x582>
 80087da:	494d      	ldr	r1, [pc, #308]	; (8008910 <_dtoa_r+0x630>)
 80087dc:	2000      	movs	r0, #0
 80087de:	f7f8 f84d 	bl	800087c <__aeabi_ddiv>
 80087e2:	4652      	mov	r2, sl
 80087e4:	465b      	mov	r3, fp
 80087e6:	f7f7 fd67 	bl	80002b8 <__aeabi_dsub>
 80087ea:	9d01      	ldr	r5, [sp, #4]
 80087ec:	4682      	mov	sl, r0
 80087ee:	468b      	mov	fp, r1
 80087f0:	4649      	mov	r1, r9
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7f8 f9c8 	bl	8000b88 <__aeabi_d2iz>
 80087f8:	4606      	mov	r6, r0
 80087fa:	f7f7 feab 	bl	8000554 <__aeabi_i2d>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4640      	mov	r0, r8
 8008804:	4649      	mov	r1, r9
 8008806:	f7f7 fd57 	bl	80002b8 <__aeabi_dsub>
 800880a:	3630      	adds	r6, #48	; 0x30
 800880c:	f805 6b01 	strb.w	r6, [r5], #1
 8008810:	4652      	mov	r2, sl
 8008812:	465b      	mov	r3, fp
 8008814:	4680      	mov	r8, r0
 8008816:	4689      	mov	r9, r1
 8008818:	f7f8 f978 	bl	8000b0c <__aeabi_dcmplt>
 800881c:	2800      	cmp	r0, #0
 800881e:	d163      	bne.n	80088e8 <_dtoa_r+0x608>
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	4936      	ldr	r1, [pc, #216]	; (8008900 <_dtoa_r+0x620>)
 8008826:	2000      	movs	r0, #0
 8008828:	f7f7 fd46 	bl	80002b8 <__aeabi_dsub>
 800882c:	4652      	mov	r2, sl
 800882e:	465b      	mov	r3, fp
 8008830:	f7f8 f96c 	bl	8000b0c <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	f040 80b5 	bne.w	80089a4 <_dtoa_r+0x6c4>
 800883a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800883c:	429d      	cmp	r5, r3
 800883e:	d081      	beq.n	8008744 <_dtoa_r+0x464>
 8008840:	4b30      	ldr	r3, [pc, #192]	; (8008904 <_dtoa_r+0x624>)
 8008842:	2200      	movs	r2, #0
 8008844:	4650      	mov	r0, sl
 8008846:	4659      	mov	r1, fp
 8008848:	f7f7 feee 	bl	8000628 <__aeabi_dmul>
 800884c:	4b2d      	ldr	r3, [pc, #180]	; (8008904 <_dtoa_r+0x624>)
 800884e:	4682      	mov	sl, r0
 8008850:	468b      	mov	fp, r1
 8008852:	4640      	mov	r0, r8
 8008854:	4649      	mov	r1, r9
 8008856:	2200      	movs	r2, #0
 8008858:	f7f7 fee6 	bl	8000628 <__aeabi_dmul>
 800885c:	4680      	mov	r8, r0
 800885e:	4689      	mov	r9, r1
 8008860:	e7c6      	b.n	80087f0 <_dtoa_r+0x510>
 8008862:	4650      	mov	r0, sl
 8008864:	4659      	mov	r1, fp
 8008866:	f7f7 fedf 	bl	8000628 <__aeabi_dmul>
 800886a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800886c:	9d01      	ldr	r5, [sp, #4]
 800886e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008870:	4682      	mov	sl, r0
 8008872:	468b      	mov	fp, r1
 8008874:	4649      	mov	r1, r9
 8008876:	4640      	mov	r0, r8
 8008878:	f7f8 f986 	bl	8000b88 <__aeabi_d2iz>
 800887c:	4606      	mov	r6, r0
 800887e:	f7f7 fe69 	bl	8000554 <__aeabi_i2d>
 8008882:	3630      	adds	r6, #48	; 0x30
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4640      	mov	r0, r8
 800888a:	4649      	mov	r1, r9
 800888c:	f7f7 fd14 	bl	80002b8 <__aeabi_dsub>
 8008890:	f805 6b01 	strb.w	r6, [r5], #1
 8008894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008896:	429d      	cmp	r5, r3
 8008898:	4680      	mov	r8, r0
 800889a:	4689      	mov	r9, r1
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	d124      	bne.n	80088ec <_dtoa_r+0x60c>
 80088a2:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <_dtoa_r+0x630>)
 80088a4:	4650      	mov	r0, sl
 80088a6:	4659      	mov	r1, fp
 80088a8:	f7f7 fd08 	bl	80002bc <__adddf3>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4640      	mov	r0, r8
 80088b2:	4649      	mov	r1, r9
 80088b4:	f7f8 f948 	bl	8000b48 <__aeabi_dcmpgt>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d173      	bne.n	80089a4 <_dtoa_r+0x6c4>
 80088bc:	4652      	mov	r2, sl
 80088be:	465b      	mov	r3, fp
 80088c0:	4913      	ldr	r1, [pc, #76]	; (8008910 <_dtoa_r+0x630>)
 80088c2:	2000      	movs	r0, #0
 80088c4:	f7f7 fcf8 	bl	80002b8 <__aeabi_dsub>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4640      	mov	r0, r8
 80088ce:	4649      	mov	r1, r9
 80088d0:	f7f8 f91c 	bl	8000b0c <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f43f af35 	beq.w	8008744 <_dtoa_r+0x464>
 80088da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80088dc:	1e6b      	subs	r3, r5, #1
 80088de:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80088e4:	2b30      	cmp	r3, #48	; 0x30
 80088e6:	d0f8      	beq.n	80088da <_dtoa_r+0x5fa>
 80088e8:	9700      	str	r7, [sp, #0]
 80088ea:	e049      	b.n	8008980 <_dtoa_r+0x6a0>
 80088ec:	4b05      	ldr	r3, [pc, #20]	; (8008904 <_dtoa_r+0x624>)
 80088ee:	f7f7 fe9b 	bl	8000628 <__aeabi_dmul>
 80088f2:	4680      	mov	r8, r0
 80088f4:	4689      	mov	r9, r1
 80088f6:	e7bd      	b.n	8008874 <_dtoa_r+0x594>
 80088f8:	0800c138 	.word	0x0800c138
 80088fc:	0800c110 	.word	0x0800c110
 8008900:	3ff00000 	.word	0x3ff00000
 8008904:	40240000 	.word	0x40240000
 8008908:	401c0000 	.word	0x401c0000
 800890c:	40140000 	.word	0x40140000
 8008910:	3fe00000 	.word	0x3fe00000
 8008914:	9d01      	ldr	r5, [sp, #4]
 8008916:	4656      	mov	r6, sl
 8008918:	465f      	mov	r7, fp
 800891a:	4642      	mov	r2, r8
 800891c:	464b      	mov	r3, r9
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	f7f7 ffab 	bl	800087c <__aeabi_ddiv>
 8008926:	f7f8 f92f 	bl	8000b88 <__aeabi_d2iz>
 800892a:	4682      	mov	sl, r0
 800892c:	f7f7 fe12 	bl	8000554 <__aeabi_i2d>
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	f7f7 fe78 	bl	8000628 <__aeabi_dmul>
 8008938:	4602      	mov	r2, r0
 800893a:	460b      	mov	r3, r1
 800893c:	4630      	mov	r0, r6
 800893e:	4639      	mov	r1, r7
 8008940:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008944:	f7f7 fcb8 	bl	80002b8 <__aeabi_dsub>
 8008948:	f805 6b01 	strb.w	r6, [r5], #1
 800894c:	9e01      	ldr	r6, [sp, #4]
 800894e:	9f03      	ldr	r7, [sp, #12]
 8008950:	1bae      	subs	r6, r5, r6
 8008952:	42b7      	cmp	r7, r6
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	d135      	bne.n	80089c6 <_dtoa_r+0x6e6>
 800895a:	f7f7 fcaf 	bl	80002bc <__adddf3>
 800895e:	4642      	mov	r2, r8
 8008960:	464b      	mov	r3, r9
 8008962:	4606      	mov	r6, r0
 8008964:	460f      	mov	r7, r1
 8008966:	f7f8 f8ef 	bl	8000b48 <__aeabi_dcmpgt>
 800896a:	b9d0      	cbnz	r0, 80089a2 <_dtoa_r+0x6c2>
 800896c:	4642      	mov	r2, r8
 800896e:	464b      	mov	r3, r9
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	f7f8 f8c0 	bl	8000af8 <__aeabi_dcmpeq>
 8008978:	b110      	cbz	r0, 8008980 <_dtoa_r+0x6a0>
 800897a:	f01a 0f01 	tst.w	sl, #1
 800897e:	d110      	bne.n	80089a2 <_dtoa_r+0x6c2>
 8008980:	4620      	mov	r0, r4
 8008982:	ee18 1a10 	vmov	r1, s16
 8008986:	f000 fe75 	bl	8009674 <_Bfree>
 800898a:	2300      	movs	r3, #0
 800898c:	9800      	ldr	r0, [sp, #0]
 800898e:	702b      	strb	r3, [r5, #0]
 8008990:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008992:	3001      	adds	r0, #1
 8008994:	6018      	str	r0, [r3, #0]
 8008996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008998:	2b00      	cmp	r3, #0
 800899a:	f43f acf1 	beq.w	8008380 <_dtoa_r+0xa0>
 800899e:	601d      	str	r5, [r3, #0]
 80089a0:	e4ee      	b.n	8008380 <_dtoa_r+0xa0>
 80089a2:	9f00      	ldr	r7, [sp, #0]
 80089a4:	462b      	mov	r3, r5
 80089a6:	461d      	mov	r5, r3
 80089a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ac:	2a39      	cmp	r2, #57	; 0x39
 80089ae:	d106      	bne.n	80089be <_dtoa_r+0x6de>
 80089b0:	9a01      	ldr	r2, [sp, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d1f7      	bne.n	80089a6 <_dtoa_r+0x6c6>
 80089b6:	9901      	ldr	r1, [sp, #4]
 80089b8:	2230      	movs	r2, #48	; 0x30
 80089ba:	3701      	adds	r7, #1
 80089bc:	700a      	strb	r2, [r1, #0]
 80089be:	781a      	ldrb	r2, [r3, #0]
 80089c0:	3201      	adds	r2, #1
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	e790      	b.n	80088e8 <_dtoa_r+0x608>
 80089c6:	4ba6      	ldr	r3, [pc, #664]	; (8008c60 <_dtoa_r+0x980>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	f7f7 fe2d 	bl	8000628 <__aeabi_dmul>
 80089ce:	2200      	movs	r2, #0
 80089d0:	2300      	movs	r3, #0
 80089d2:	4606      	mov	r6, r0
 80089d4:	460f      	mov	r7, r1
 80089d6:	f7f8 f88f 	bl	8000af8 <__aeabi_dcmpeq>
 80089da:	2800      	cmp	r0, #0
 80089dc:	d09d      	beq.n	800891a <_dtoa_r+0x63a>
 80089de:	e7cf      	b.n	8008980 <_dtoa_r+0x6a0>
 80089e0:	9a08      	ldr	r2, [sp, #32]
 80089e2:	2a00      	cmp	r2, #0
 80089e4:	f000 80d7 	beq.w	8008b96 <_dtoa_r+0x8b6>
 80089e8:	9a06      	ldr	r2, [sp, #24]
 80089ea:	2a01      	cmp	r2, #1
 80089ec:	f300 80ba 	bgt.w	8008b64 <_dtoa_r+0x884>
 80089f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	f000 80b2 	beq.w	8008b5c <_dtoa_r+0x87c>
 80089f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089fc:	9e07      	ldr	r6, [sp, #28]
 80089fe:	9d04      	ldr	r5, [sp, #16]
 8008a00:	9a04      	ldr	r2, [sp, #16]
 8008a02:	441a      	add	r2, r3
 8008a04:	9204      	str	r2, [sp, #16]
 8008a06:	9a05      	ldr	r2, [sp, #20]
 8008a08:	2101      	movs	r1, #1
 8008a0a:	441a      	add	r2, r3
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	9205      	str	r2, [sp, #20]
 8008a10:	f000 ff32 	bl	8009878 <__i2b>
 8008a14:	4607      	mov	r7, r0
 8008a16:	2d00      	cmp	r5, #0
 8008a18:	dd0c      	ble.n	8008a34 <_dtoa_r+0x754>
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	dd09      	ble.n	8008a34 <_dtoa_r+0x754>
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	9a04      	ldr	r2, [sp, #16]
 8008a24:	bfa8      	it	ge
 8008a26:	462b      	movge	r3, r5
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	9204      	str	r2, [sp, #16]
 8008a2c:	9a05      	ldr	r2, [sp, #20]
 8008a2e:	1aed      	subs	r5, r5, r3
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	b31b      	cbz	r3, 8008a80 <_dtoa_r+0x7a0>
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80af 	beq.w	8008b9e <_dtoa_r+0x8be>
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	dd13      	ble.n	8008a6c <_dtoa_r+0x78c>
 8008a44:	4639      	mov	r1, r7
 8008a46:	4632      	mov	r2, r6
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 ffd5 	bl	80099f8 <__pow5mult>
 8008a4e:	ee18 2a10 	vmov	r2, s16
 8008a52:	4601      	mov	r1, r0
 8008a54:	4607      	mov	r7, r0
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 ff24 	bl	80098a4 <__multiply>
 8008a5c:	ee18 1a10 	vmov	r1, s16
 8008a60:	4680      	mov	r8, r0
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fe06 	bl	8009674 <_Bfree>
 8008a68:	ee08 8a10 	vmov	s16, r8
 8008a6c:	9b07      	ldr	r3, [sp, #28]
 8008a6e:	1b9a      	subs	r2, r3, r6
 8008a70:	d006      	beq.n	8008a80 <_dtoa_r+0x7a0>
 8008a72:	ee18 1a10 	vmov	r1, s16
 8008a76:	4620      	mov	r0, r4
 8008a78:	f000 ffbe 	bl	80099f8 <__pow5mult>
 8008a7c:	ee08 0a10 	vmov	s16, r0
 8008a80:	2101      	movs	r1, #1
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fef8 	bl	8009878 <__i2b>
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	f340 8088 	ble.w	8008ba2 <_dtoa_r+0x8c2>
 8008a92:	461a      	mov	r2, r3
 8008a94:	4601      	mov	r1, r0
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 ffae 	bl	80099f8 <__pow5mult>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	f340 8081 	ble.w	8008ba8 <_dtoa_r+0x8c8>
 8008aa6:	f04f 0800 	mov.w	r8, #0
 8008aaa:	6933      	ldr	r3, [r6, #16]
 8008aac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ab0:	6918      	ldr	r0, [r3, #16]
 8008ab2:	f000 fe91 	bl	80097d8 <__hi0bits>
 8008ab6:	f1c0 0020 	rsb	r0, r0, #32
 8008aba:	9b05      	ldr	r3, [sp, #20]
 8008abc:	4418      	add	r0, r3
 8008abe:	f010 001f 	ands.w	r0, r0, #31
 8008ac2:	f000 8092 	beq.w	8008bea <_dtoa_r+0x90a>
 8008ac6:	f1c0 0320 	rsb	r3, r0, #32
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	f340 808a 	ble.w	8008be4 <_dtoa_r+0x904>
 8008ad0:	f1c0 001c 	rsb	r0, r0, #28
 8008ad4:	9b04      	ldr	r3, [sp, #16]
 8008ad6:	4403      	add	r3, r0
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	9b05      	ldr	r3, [sp, #20]
 8008adc:	4403      	add	r3, r0
 8008ade:	4405      	add	r5, r0
 8008ae0:	9305      	str	r3, [sp, #20]
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd07      	ble.n	8008af8 <_dtoa_r+0x818>
 8008ae8:	ee18 1a10 	vmov	r1, s16
 8008aec:	461a      	mov	r2, r3
 8008aee:	4620      	mov	r0, r4
 8008af0:	f000 ffdc 	bl	8009aac <__lshift>
 8008af4:	ee08 0a10 	vmov	s16, r0
 8008af8:	9b05      	ldr	r3, [sp, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dd05      	ble.n	8008b0a <_dtoa_r+0x82a>
 8008afe:	4631      	mov	r1, r6
 8008b00:	461a      	mov	r2, r3
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 ffd2 	bl	8009aac <__lshift>
 8008b08:	4606      	mov	r6, r0
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d06e      	beq.n	8008bee <_dtoa_r+0x90e>
 8008b10:	ee18 0a10 	vmov	r0, s16
 8008b14:	4631      	mov	r1, r6
 8008b16:	f001 f839 	bl	8009b8c <__mcmp>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	da67      	bge.n	8008bee <_dtoa_r+0x90e>
 8008b1e:	9b00      	ldr	r3, [sp, #0]
 8008b20:	3b01      	subs	r3, #1
 8008b22:	ee18 1a10 	vmov	r1, s16
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	220a      	movs	r2, #10
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fdc3 	bl	80096b8 <__multadd>
 8008b32:	9b08      	ldr	r3, [sp, #32]
 8008b34:	ee08 0a10 	vmov	s16, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 81b1 	beq.w	8008ea0 <_dtoa_r+0xbc0>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4639      	mov	r1, r7
 8008b42:	220a      	movs	r2, #10
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fdb7 	bl	80096b8 <__multadd>
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	4607      	mov	r7, r0
 8008b50:	f300 808e 	bgt.w	8008c70 <_dtoa_r+0x990>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	dc51      	bgt.n	8008bfe <_dtoa_r+0x91e>
 8008b5a:	e089      	b.n	8008c70 <_dtoa_r+0x990>
 8008b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b62:	e74b      	b.n	80089fc <_dtoa_r+0x71c>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	1e5e      	subs	r6, r3, #1
 8008b68:	9b07      	ldr	r3, [sp, #28]
 8008b6a:	42b3      	cmp	r3, r6
 8008b6c:	bfbf      	itttt	lt
 8008b6e:	9b07      	ldrlt	r3, [sp, #28]
 8008b70:	9607      	strlt	r6, [sp, #28]
 8008b72:	1af2      	sublt	r2, r6, r3
 8008b74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b76:	bfb6      	itet	lt
 8008b78:	189b      	addlt	r3, r3, r2
 8008b7a:	1b9e      	subge	r6, r3, r6
 8008b7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	bfb8      	it	lt
 8008b82:	2600      	movlt	r6, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfb7      	itett	lt
 8008b88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b90:	1a9d      	sublt	r5, r3, r2
 8008b92:	2300      	movlt	r3, #0
 8008b94:	e734      	b.n	8008a00 <_dtoa_r+0x720>
 8008b96:	9e07      	ldr	r6, [sp, #28]
 8008b98:	9d04      	ldr	r5, [sp, #16]
 8008b9a:	9f08      	ldr	r7, [sp, #32]
 8008b9c:	e73b      	b.n	8008a16 <_dtoa_r+0x736>
 8008b9e:	9a07      	ldr	r2, [sp, #28]
 8008ba0:	e767      	b.n	8008a72 <_dtoa_r+0x792>
 8008ba2:	9b06      	ldr	r3, [sp, #24]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	dc18      	bgt.n	8008bda <_dtoa_r+0x8fa>
 8008ba8:	f1ba 0f00 	cmp.w	sl, #0
 8008bac:	d115      	bne.n	8008bda <_dtoa_r+0x8fa>
 8008bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bb2:	b993      	cbnz	r3, 8008bda <_dtoa_r+0x8fa>
 8008bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb8:	0d1b      	lsrs	r3, r3, #20
 8008bba:	051b      	lsls	r3, r3, #20
 8008bbc:	b183      	cbz	r3, 8008be0 <_dtoa_r+0x900>
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	9305      	str	r3, [sp, #20]
 8008bca:	f04f 0801 	mov.w	r8, #1
 8008bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f47f af6a 	bne.w	8008aaa <_dtoa_r+0x7ca>
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	e76f      	b.n	8008aba <_dtoa_r+0x7da>
 8008bda:	f04f 0800 	mov.w	r8, #0
 8008bde:	e7f6      	b.n	8008bce <_dtoa_r+0x8ee>
 8008be0:	4698      	mov	r8, r3
 8008be2:	e7f4      	b.n	8008bce <_dtoa_r+0x8ee>
 8008be4:	f43f af7d 	beq.w	8008ae2 <_dtoa_r+0x802>
 8008be8:	4618      	mov	r0, r3
 8008bea:	301c      	adds	r0, #28
 8008bec:	e772      	b.n	8008ad4 <_dtoa_r+0x7f4>
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	dc37      	bgt.n	8008c64 <_dtoa_r+0x984>
 8008bf4:	9b06      	ldr	r3, [sp, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	dd34      	ble.n	8008c64 <_dtoa_r+0x984>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	9302      	str	r3, [sp, #8]
 8008bfe:	9b02      	ldr	r3, [sp, #8]
 8008c00:	b96b      	cbnz	r3, 8008c1e <_dtoa_r+0x93e>
 8008c02:	4631      	mov	r1, r6
 8008c04:	2205      	movs	r2, #5
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 fd56 	bl	80096b8 <__multadd>
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	4606      	mov	r6, r0
 8008c10:	ee18 0a10 	vmov	r0, s16
 8008c14:	f000 ffba 	bl	8009b8c <__mcmp>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	f73f adbb 	bgt.w	8008794 <_dtoa_r+0x4b4>
 8008c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c20:	9d01      	ldr	r5, [sp, #4]
 8008c22:	43db      	mvns	r3, r3
 8008c24:	9300      	str	r3, [sp, #0]
 8008c26:	f04f 0800 	mov.w	r8, #0
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fd21 	bl	8009674 <_Bfree>
 8008c32:	2f00      	cmp	r7, #0
 8008c34:	f43f aea4 	beq.w	8008980 <_dtoa_r+0x6a0>
 8008c38:	f1b8 0f00 	cmp.w	r8, #0
 8008c3c:	d005      	beq.n	8008c4a <_dtoa_r+0x96a>
 8008c3e:	45b8      	cmp	r8, r7
 8008c40:	d003      	beq.n	8008c4a <_dtoa_r+0x96a>
 8008c42:	4641      	mov	r1, r8
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fd15 	bl	8009674 <_Bfree>
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f000 fd11 	bl	8009674 <_Bfree>
 8008c52:	e695      	b.n	8008980 <_dtoa_r+0x6a0>
 8008c54:	2600      	movs	r6, #0
 8008c56:	4637      	mov	r7, r6
 8008c58:	e7e1      	b.n	8008c1e <_dtoa_r+0x93e>
 8008c5a:	9700      	str	r7, [sp, #0]
 8008c5c:	4637      	mov	r7, r6
 8008c5e:	e599      	b.n	8008794 <_dtoa_r+0x4b4>
 8008c60:	40240000 	.word	0x40240000
 8008c64:	9b08      	ldr	r3, [sp, #32]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 80ca 	beq.w	8008e00 <_dtoa_r+0xb20>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	9302      	str	r3, [sp, #8]
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	dd05      	ble.n	8008c80 <_dtoa_r+0x9a0>
 8008c74:	4639      	mov	r1, r7
 8008c76:	462a      	mov	r2, r5
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 ff17 	bl	8009aac <__lshift>
 8008c7e:	4607      	mov	r7, r0
 8008c80:	f1b8 0f00 	cmp.w	r8, #0
 8008c84:	d05b      	beq.n	8008d3e <_dtoa_r+0xa5e>
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fcb3 	bl	80095f4 <_Balloc>
 8008c8e:	4605      	mov	r5, r0
 8008c90:	b928      	cbnz	r0, 8008c9e <_dtoa_r+0x9be>
 8008c92:	4b87      	ldr	r3, [pc, #540]	; (8008eb0 <_dtoa_r+0xbd0>)
 8008c94:	4602      	mov	r2, r0
 8008c96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c9a:	f7ff bb3b 	b.w	8008314 <_dtoa_r+0x34>
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	3202      	adds	r2, #2
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	f107 010c 	add.w	r1, r7, #12
 8008ca8:	300c      	adds	r0, #12
 8008caa:	f000 fc95 	bl	80095d8 <memcpy>
 8008cae:	2201      	movs	r2, #1
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fefa 	bl	8009aac <__lshift>
 8008cb8:	9b01      	ldr	r3, [sp, #4]
 8008cba:	f103 0901 	add.w	r9, r3, #1
 8008cbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	9305      	str	r3, [sp, #20]
 8008cc6:	f00a 0301 	and.w	r3, sl, #1
 8008cca:	46b8      	mov	r8, r7
 8008ccc:	9304      	str	r3, [sp, #16]
 8008cce:	4607      	mov	r7, r0
 8008cd0:	4631      	mov	r1, r6
 8008cd2:	ee18 0a10 	vmov	r0, s16
 8008cd6:	f7ff fa77 	bl	80081c8 <quorem>
 8008cda:	4641      	mov	r1, r8
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ce2:	ee18 0a10 	vmov	r0, s16
 8008ce6:	f000 ff51 	bl	8009b8c <__mcmp>
 8008cea:	463a      	mov	r2, r7
 8008cec:	9003      	str	r0, [sp, #12]
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f000 ff67 	bl	8009bc4 <__mdiff>
 8008cf6:	68c2      	ldr	r2, [r0, #12]
 8008cf8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	bb02      	cbnz	r2, 8008d42 <_dtoa_r+0xa62>
 8008d00:	4601      	mov	r1, r0
 8008d02:	ee18 0a10 	vmov	r0, s16
 8008d06:	f000 ff41 	bl	8009b8c <__mcmp>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4620      	mov	r0, r4
 8008d10:	9207      	str	r2, [sp, #28]
 8008d12:	f000 fcaf 	bl	8009674 <_Bfree>
 8008d16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d1a:	ea43 0102 	orr.w	r1, r3, r2
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	430b      	orrs	r3, r1
 8008d22:	464d      	mov	r5, r9
 8008d24:	d10f      	bne.n	8008d46 <_dtoa_r+0xa66>
 8008d26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d2a:	d02a      	beq.n	8008d82 <_dtoa_r+0xaa2>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dd02      	ble.n	8008d38 <_dtoa_r+0xa58>
 8008d32:	9b02      	ldr	r3, [sp, #8]
 8008d34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d38:	f88b a000 	strb.w	sl, [fp]
 8008d3c:	e775      	b.n	8008c2a <_dtoa_r+0x94a>
 8008d3e:	4638      	mov	r0, r7
 8008d40:	e7ba      	b.n	8008cb8 <_dtoa_r+0x9d8>
 8008d42:	2201      	movs	r2, #1
 8008d44:	e7e2      	b.n	8008d0c <_dtoa_r+0xa2c>
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	db04      	blt.n	8008d56 <_dtoa_r+0xa76>
 8008d4c:	9906      	ldr	r1, [sp, #24]
 8008d4e:	430b      	orrs	r3, r1
 8008d50:	9904      	ldr	r1, [sp, #16]
 8008d52:	430b      	orrs	r3, r1
 8008d54:	d122      	bne.n	8008d9c <_dtoa_r+0xabc>
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	ddee      	ble.n	8008d38 <_dtoa_r+0xa58>
 8008d5a:	ee18 1a10 	vmov	r1, s16
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fea3 	bl	8009aac <__lshift>
 8008d66:	4631      	mov	r1, r6
 8008d68:	ee08 0a10 	vmov	s16, r0
 8008d6c:	f000 ff0e 	bl	8009b8c <__mcmp>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	dc03      	bgt.n	8008d7c <_dtoa_r+0xa9c>
 8008d74:	d1e0      	bne.n	8008d38 <_dtoa_r+0xa58>
 8008d76:	f01a 0f01 	tst.w	sl, #1
 8008d7a:	d0dd      	beq.n	8008d38 <_dtoa_r+0xa58>
 8008d7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d80:	d1d7      	bne.n	8008d32 <_dtoa_r+0xa52>
 8008d82:	2339      	movs	r3, #57	; 0x39
 8008d84:	f88b 3000 	strb.w	r3, [fp]
 8008d88:	462b      	mov	r3, r5
 8008d8a:	461d      	mov	r5, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d92:	2a39      	cmp	r2, #57	; 0x39
 8008d94:	d071      	beq.n	8008e7a <_dtoa_r+0xb9a>
 8008d96:	3201      	adds	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	e746      	b.n	8008c2a <_dtoa_r+0x94a>
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	dd07      	ble.n	8008db0 <_dtoa_r+0xad0>
 8008da0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008da4:	d0ed      	beq.n	8008d82 <_dtoa_r+0xaa2>
 8008da6:	f10a 0301 	add.w	r3, sl, #1
 8008daa:	f88b 3000 	strb.w	r3, [fp]
 8008dae:	e73c      	b.n	8008c2a <_dtoa_r+0x94a>
 8008db0:	9b05      	ldr	r3, [sp, #20]
 8008db2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008db6:	4599      	cmp	r9, r3
 8008db8:	d047      	beq.n	8008e4a <_dtoa_r+0xb6a>
 8008dba:	ee18 1a10 	vmov	r1, s16
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fc78 	bl	80096b8 <__multadd>
 8008dc8:	45b8      	cmp	r8, r7
 8008dca:	ee08 0a10 	vmov	s16, r0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	f04f 020a 	mov.w	r2, #10
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	4620      	mov	r0, r4
 8008dda:	d106      	bne.n	8008dea <_dtoa_r+0xb0a>
 8008ddc:	f000 fc6c 	bl	80096b8 <__multadd>
 8008de0:	4680      	mov	r8, r0
 8008de2:	4607      	mov	r7, r0
 8008de4:	f109 0901 	add.w	r9, r9, #1
 8008de8:	e772      	b.n	8008cd0 <_dtoa_r+0x9f0>
 8008dea:	f000 fc65 	bl	80096b8 <__multadd>
 8008dee:	4639      	mov	r1, r7
 8008df0:	4680      	mov	r8, r0
 8008df2:	2300      	movs	r3, #0
 8008df4:	220a      	movs	r2, #10
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fc5e 	bl	80096b8 <__multadd>
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	e7f1      	b.n	8008de4 <_dtoa_r+0xb04>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	9302      	str	r3, [sp, #8]
 8008e04:	9d01      	ldr	r5, [sp, #4]
 8008e06:	ee18 0a10 	vmov	r0, s16
 8008e0a:	4631      	mov	r1, r6
 8008e0c:	f7ff f9dc 	bl	80081c8 <quorem>
 8008e10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e14:	9b01      	ldr	r3, [sp, #4]
 8008e16:	f805 ab01 	strb.w	sl, [r5], #1
 8008e1a:	1aea      	subs	r2, r5, r3
 8008e1c:	9b02      	ldr	r3, [sp, #8]
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	dd09      	ble.n	8008e36 <_dtoa_r+0xb56>
 8008e22:	ee18 1a10 	vmov	r1, s16
 8008e26:	2300      	movs	r3, #0
 8008e28:	220a      	movs	r2, #10
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 fc44 	bl	80096b8 <__multadd>
 8008e30:	ee08 0a10 	vmov	s16, r0
 8008e34:	e7e7      	b.n	8008e06 <_dtoa_r+0xb26>
 8008e36:	9b02      	ldr	r3, [sp, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	bfc8      	it	gt
 8008e3c:	461d      	movgt	r5, r3
 8008e3e:	9b01      	ldr	r3, [sp, #4]
 8008e40:	bfd8      	it	le
 8008e42:	2501      	movle	r5, #1
 8008e44:	441d      	add	r5, r3
 8008e46:	f04f 0800 	mov.w	r8, #0
 8008e4a:	ee18 1a10 	vmov	r1, s16
 8008e4e:	2201      	movs	r2, #1
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fe2b 	bl	8009aac <__lshift>
 8008e56:	4631      	mov	r1, r6
 8008e58:	ee08 0a10 	vmov	s16, r0
 8008e5c:	f000 fe96 	bl	8009b8c <__mcmp>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	dc91      	bgt.n	8008d88 <_dtoa_r+0xaa8>
 8008e64:	d102      	bne.n	8008e6c <_dtoa_r+0xb8c>
 8008e66:	f01a 0f01 	tst.w	sl, #1
 8008e6a:	d18d      	bne.n	8008d88 <_dtoa_r+0xaa8>
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	461d      	mov	r5, r3
 8008e70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e74:	2a30      	cmp	r2, #48	; 0x30
 8008e76:	d0fa      	beq.n	8008e6e <_dtoa_r+0xb8e>
 8008e78:	e6d7      	b.n	8008c2a <_dtoa_r+0x94a>
 8008e7a:	9a01      	ldr	r2, [sp, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d184      	bne.n	8008d8a <_dtoa_r+0xaaa>
 8008e80:	9b00      	ldr	r3, [sp, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	2331      	movs	r3, #49	; 0x31
 8008e88:	7013      	strb	r3, [r2, #0]
 8008e8a:	e6ce      	b.n	8008c2a <_dtoa_r+0x94a>
 8008e8c:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <_dtoa_r+0xbd4>)
 8008e8e:	f7ff ba95 	b.w	80083bc <_dtoa_r+0xdc>
 8008e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f47f aa6e 	bne.w	8008376 <_dtoa_r+0x96>
 8008e9a:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <_dtoa_r+0xbd8>)
 8008e9c:	f7ff ba8e 	b.w	80083bc <_dtoa_r+0xdc>
 8008ea0:	9b02      	ldr	r3, [sp, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dcae      	bgt.n	8008e04 <_dtoa_r+0xb24>
 8008ea6:	9b06      	ldr	r3, [sp, #24]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	f73f aea8 	bgt.w	8008bfe <_dtoa_r+0x91e>
 8008eae:	e7a9      	b.n	8008e04 <_dtoa_r+0xb24>
 8008eb0:	0800c028 	.word	0x0800c028
 8008eb4:	0800be28 	.word	0x0800be28
 8008eb8:	0800bfa9 	.word	0x0800bfa9

08008ebc <rshift>:
 8008ebc:	6903      	ldr	r3, [r0, #16]
 8008ebe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ec2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008eca:	f100 0414 	add.w	r4, r0, #20
 8008ece:	dd45      	ble.n	8008f5c <rshift+0xa0>
 8008ed0:	f011 011f 	ands.w	r1, r1, #31
 8008ed4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ed8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008edc:	d10c      	bne.n	8008ef8 <rshift+0x3c>
 8008ede:	f100 0710 	add.w	r7, r0, #16
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	42b1      	cmp	r1, r6
 8008ee6:	d334      	bcc.n	8008f52 <rshift+0x96>
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	1eea      	subs	r2, r5, #3
 8008eee:	4296      	cmp	r6, r2
 8008ef0:	bf38      	it	cc
 8008ef2:	2300      	movcc	r3, #0
 8008ef4:	4423      	add	r3, r4
 8008ef6:	e015      	b.n	8008f24 <rshift+0x68>
 8008ef8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008efc:	f1c1 0820 	rsb	r8, r1, #32
 8008f00:	40cf      	lsrs	r7, r1
 8008f02:	f105 0e04 	add.w	lr, r5, #4
 8008f06:	46a1      	mov	r9, r4
 8008f08:	4576      	cmp	r6, lr
 8008f0a:	46f4      	mov	ip, lr
 8008f0c:	d815      	bhi.n	8008f3a <rshift+0x7e>
 8008f0e:	1a9a      	subs	r2, r3, r2
 8008f10:	0092      	lsls	r2, r2, #2
 8008f12:	3a04      	subs	r2, #4
 8008f14:	3501      	adds	r5, #1
 8008f16:	42ae      	cmp	r6, r5
 8008f18:	bf38      	it	cc
 8008f1a:	2200      	movcc	r2, #0
 8008f1c:	18a3      	adds	r3, r4, r2
 8008f1e:	50a7      	str	r7, [r4, r2]
 8008f20:	b107      	cbz	r7, 8008f24 <rshift+0x68>
 8008f22:	3304      	adds	r3, #4
 8008f24:	1b1a      	subs	r2, r3, r4
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008f2c:	bf08      	it	eq
 8008f2e:	2300      	moveq	r3, #0
 8008f30:	6102      	str	r2, [r0, #16]
 8008f32:	bf08      	it	eq
 8008f34:	6143      	streq	r3, [r0, #20]
 8008f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3a:	f8dc c000 	ldr.w	ip, [ip]
 8008f3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008f42:	ea4c 0707 	orr.w	r7, ip, r7
 8008f46:	f849 7b04 	str.w	r7, [r9], #4
 8008f4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f4e:	40cf      	lsrs	r7, r1
 8008f50:	e7da      	b.n	8008f08 <rshift+0x4c>
 8008f52:	f851 cb04 	ldr.w	ip, [r1], #4
 8008f56:	f847 cf04 	str.w	ip, [r7, #4]!
 8008f5a:	e7c3      	b.n	8008ee4 <rshift+0x28>
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	e7e1      	b.n	8008f24 <rshift+0x68>

08008f60 <__hexdig_fun>:
 8008f60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008f64:	2b09      	cmp	r3, #9
 8008f66:	d802      	bhi.n	8008f6e <__hexdig_fun+0xe>
 8008f68:	3820      	subs	r0, #32
 8008f6a:	b2c0      	uxtb	r0, r0
 8008f6c:	4770      	bx	lr
 8008f6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008f72:	2b05      	cmp	r3, #5
 8008f74:	d801      	bhi.n	8008f7a <__hexdig_fun+0x1a>
 8008f76:	3847      	subs	r0, #71	; 0x47
 8008f78:	e7f7      	b.n	8008f6a <__hexdig_fun+0xa>
 8008f7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d801      	bhi.n	8008f86 <__hexdig_fun+0x26>
 8008f82:	3827      	subs	r0, #39	; 0x27
 8008f84:	e7f1      	b.n	8008f6a <__hexdig_fun+0xa>
 8008f86:	2000      	movs	r0, #0
 8008f88:	4770      	bx	lr
	...

08008f8c <__gethex>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	ed2d 8b02 	vpush	{d8}
 8008f94:	b089      	sub	sp, #36	; 0x24
 8008f96:	ee08 0a10 	vmov	s16, r0
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	4bb4      	ldr	r3, [pc, #720]	; (8009270 <__gethex+0x2e4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	468b      	mov	fp, r1
 8008fa6:	4690      	mov	r8, r2
 8008fa8:	f7f7 f924 	bl	80001f4 <strlen>
 8008fac:	9b01      	ldr	r3, [sp, #4]
 8008fae:	f8db 2000 	ldr.w	r2, [fp]
 8008fb2:	4403      	add	r3, r0
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008fba:	9305      	str	r3, [sp, #20]
 8008fbc:	1c93      	adds	r3, r2, #2
 8008fbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008fc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008fc6:	32fe      	adds	r2, #254	; 0xfe
 8008fc8:	18d1      	adds	r1, r2, r3
 8008fca:	461f      	mov	r7, r3
 8008fcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008fd0:	9100      	str	r1, [sp, #0]
 8008fd2:	2830      	cmp	r0, #48	; 0x30
 8008fd4:	d0f8      	beq.n	8008fc8 <__gethex+0x3c>
 8008fd6:	f7ff ffc3 	bl	8008f60 <__hexdig_fun>
 8008fda:	4604      	mov	r4, r0
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d13a      	bne.n	8009056 <__gethex+0xca>
 8008fe0:	9901      	ldr	r1, [sp, #4]
 8008fe2:	4652      	mov	r2, sl
 8008fe4:	4638      	mov	r0, r7
 8008fe6:	f001 fa33 	bl	800a450 <strncmp>
 8008fea:	4605      	mov	r5, r0
 8008fec:	2800      	cmp	r0, #0
 8008fee:	d168      	bne.n	80090c2 <__gethex+0x136>
 8008ff0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ff4:	eb07 060a 	add.w	r6, r7, sl
 8008ff8:	f7ff ffb2 	bl	8008f60 <__hexdig_fun>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	d062      	beq.n	80090c6 <__gethex+0x13a>
 8009000:	4633      	mov	r3, r6
 8009002:	7818      	ldrb	r0, [r3, #0]
 8009004:	2830      	cmp	r0, #48	; 0x30
 8009006:	461f      	mov	r7, r3
 8009008:	f103 0301 	add.w	r3, r3, #1
 800900c:	d0f9      	beq.n	8009002 <__gethex+0x76>
 800900e:	f7ff ffa7 	bl	8008f60 <__hexdig_fun>
 8009012:	2301      	movs	r3, #1
 8009014:	fab0 f480 	clz	r4, r0
 8009018:	0964      	lsrs	r4, r4, #5
 800901a:	4635      	mov	r5, r6
 800901c:	9300      	str	r3, [sp, #0]
 800901e:	463a      	mov	r2, r7
 8009020:	4616      	mov	r6, r2
 8009022:	3201      	adds	r2, #1
 8009024:	7830      	ldrb	r0, [r6, #0]
 8009026:	f7ff ff9b 	bl	8008f60 <__hexdig_fun>
 800902a:	2800      	cmp	r0, #0
 800902c:	d1f8      	bne.n	8009020 <__gethex+0x94>
 800902e:	9901      	ldr	r1, [sp, #4]
 8009030:	4652      	mov	r2, sl
 8009032:	4630      	mov	r0, r6
 8009034:	f001 fa0c 	bl	800a450 <strncmp>
 8009038:	b980      	cbnz	r0, 800905c <__gethex+0xd0>
 800903a:	b94d      	cbnz	r5, 8009050 <__gethex+0xc4>
 800903c:	eb06 050a 	add.w	r5, r6, sl
 8009040:	462a      	mov	r2, r5
 8009042:	4616      	mov	r6, r2
 8009044:	3201      	adds	r2, #1
 8009046:	7830      	ldrb	r0, [r6, #0]
 8009048:	f7ff ff8a 	bl	8008f60 <__hexdig_fun>
 800904c:	2800      	cmp	r0, #0
 800904e:	d1f8      	bne.n	8009042 <__gethex+0xb6>
 8009050:	1bad      	subs	r5, r5, r6
 8009052:	00ad      	lsls	r5, r5, #2
 8009054:	e004      	b.n	8009060 <__gethex+0xd4>
 8009056:	2400      	movs	r4, #0
 8009058:	4625      	mov	r5, r4
 800905a:	e7e0      	b.n	800901e <__gethex+0x92>
 800905c:	2d00      	cmp	r5, #0
 800905e:	d1f7      	bne.n	8009050 <__gethex+0xc4>
 8009060:	7833      	ldrb	r3, [r6, #0]
 8009062:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009066:	2b50      	cmp	r3, #80	; 0x50
 8009068:	d13b      	bne.n	80090e2 <__gethex+0x156>
 800906a:	7873      	ldrb	r3, [r6, #1]
 800906c:	2b2b      	cmp	r3, #43	; 0x2b
 800906e:	d02c      	beq.n	80090ca <__gethex+0x13e>
 8009070:	2b2d      	cmp	r3, #45	; 0x2d
 8009072:	d02e      	beq.n	80090d2 <__gethex+0x146>
 8009074:	1c71      	adds	r1, r6, #1
 8009076:	f04f 0900 	mov.w	r9, #0
 800907a:	7808      	ldrb	r0, [r1, #0]
 800907c:	f7ff ff70 	bl	8008f60 <__hexdig_fun>
 8009080:	1e43      	subs	r3, r0, #1
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b18      	cmp	r3, #24
 8009086:	d82c      	bhi.n	80090e2 <__gethex+0x156>
 8009088:	f1a0 0210 	sub.w	r2, r0, #16
 800908c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009090:	f7ff ff66 	bl	8008f60 <__hexdig_fun>
 8009094:	1e43      	subs	r3, r0, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	2b18      	cmp	r3, #24
 800909a:	d91d      	bls.n	80090d8 <__gethex+0x14c>
 800909c:	f1b9 0f00 	cmp.w	r9, #0
 80090a0:	d000      	beq.n	80090a4 <__gethex+0x118>
 80090a2:	4252      	negs	r2, r2
 80090a4:	4415      	add	r5, r2
 80090a6:	f8cb 1000 	str.w	r1, [fp]
 80090aa:	b1e4      	cbz	r4, 80090e6 <__gethex+0x15a>
 80090ac:	9b00      	ldr	r3, [sp, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	bf14      	ite	ne
 80090b2:	2700      	movne	r7, #0
 80090b4:	2706      	moveq	r7, #6
 80090b6:	4638      	mov	r0, r7
 80090b8:	b009      	add	sp, #36	; 0x24
 80090ba:	ecbd 8b02 	vpop	{d8}
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	463e      	mov	r6, r7
 80090c4:	4625      	mov	r5, r4
 80090c6:	2401      	movs	r4, #1
 80090c8:	e7ca      	b.n	8009060 <__gethex+0xd4>
 80090ca:	f04f 0900 	mov.w	r9, #0
 80090ce:	1cb1      	adds	r1, r6, #2
 80090d0:	e7d3      	b.n	800907a <__gethex+0xee>
 80090d2:	f04f 0901 	mov.w	r9, #1
 80090d6:	e7fa      	b.n	80090ce <__gethex+0x142>
 80090d8:	230a      	movs	r3, #10
 80090da:	fb03 0202 	mla	r2, r3, r2, r0
 80090de:	3a10      	subs	r2, #16
 80090e0:	e7d4      	b.n	800908c <__gethex+0x100>
 80090e2:	4631      	mov	r1, r6
 80090e4:	e7df      	b.n	80090a6 <__gethex+0x11a>
 80090e6:	1bf3      	subs	r3, r6, r7
 80090e8:	3b01      	subs	r3, #1
 80090ea:	4621      	mov	r1, r4
 80090ec:	2b07      	cmp	r3, #7
 80090ee:	dc0b      	bgt.n	8009108 <__gethex+0x17c>
 80090f0:	ee18 0a10 	vmov	r0, s16
 80090f4:	f000 fa7e 	bl	80095f4 <_Balloc>
 80090f8:	4604      	mov	r4, r0
 80090fa:	b940      	cbnz	r0, 800910e <__gethex+0x182>
 80090fc:	4b5d      	ldr	r3, [pc, #372]	; (8009274 <__gethex+0x2e8>)
 80090fe:	4602      	mov	r2, r0
 8009100:	21de      	movs	r1, #222	; 0xde
 8009102:	485d      	ldr	r0, [pc, #372]	; (8009278 <__gethex+0x2ec>)
 8009104:	f001 f9c6 	bl	800a494 <__assert_func>
 8009108:	3101      	adds	r1, #1
 800910a:	105b      	asrs	r3, r3, #1
 800910c:	e7ee      	b.n	80090ec <__gethex+0x160>
 800910e:	f100 0914 	add.w	r9, r0, #20
 8009112:	f04f 0b00 	mov.w	fp, #0
 8009116:	f1ca 0301 	rsb	r3, sl, #1
 800911a:	f8cd 9008 	str.w	r9, [sp, #8]
 800911e:	f8cd b000 	str.w	fp, [sp]
 8009122:	9306      	str	r3, [sp, #24]
 8009124:	42b7      	cmp	r7, r6
 8009126:	d340      	bcc.n	80091aa <__gethex+0x21e>
 8009128:	9802      	ldr	r0, [sp, #8]
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	f840 3b04 	str.w	r3, [r0], #4
 8009130:	eba0 0009 	sub.w	r0, r0, r9
 8009134:	1080      	asrs	r0, r0, #2
 8009136:	0146      	lsls	r6, r0, #5
 8009138:	6120      	str	r0, [r4, #16]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fb4c 	bl	80097d8 <__hi0bits>
 8009140:	1a30      	subs	r0, r6, r0
 8009142:	f8d8 6000 	ldr.w	r6, [r8]
 8009146:	42b0      	cmp	r0, r6
 8009148:	dd63      	ble.n	8009212 <__gethex+0x286>
 800914a:	1b87      	subs	r7, r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fef0 	bl	8009f34 <__any_on>
 8009154:	4682      	mov	sl, r0
 8009156:	b1a8      	cbz	r0, 8009184 <__gethex+0x1f8>
 8009158:	1e7b      	subs	r3, r7, #1
 800915a:	1159      	asrs	r1, r3, #5
 800915c:	f003 021f 	and.w	r2, r3, #31
 8009160:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009164:	f04f 0a01 	mov.w	sl, #1
 8009168:	fa0a f202 	lsl.w	r2, sl, r2
 800916c:	420a      	tst	r2, r1
 800916e:	d009      	beq.n	8009184 <__gethex+0x1f8>
 8009170:	4553      	cmp	r3, sl
 8009172:	dd05      	ble.n	8009180 <__gethex+0x1f4>
 8009174:	1eb9      	subs	r1, r7, #2
 8009176:	4620      	mov	r0, r4
 8009178:	f000 fedc 	bl	8009f34 <__any_on>
 800917c:	2800      	cmp	r0, #0
 800917e:	d145      	bne.n	800920c <__gethex+0x280>
 8009180:	f04f 0a02 	mov.w	sl, #2
 8009184:	4639      	mov	r1, r7
 8009186:	4620      	mov	r0, r4
 8009188:	f7ff fe98 	bl	8008ebc <rshift>
 800918c:	443d      	add	r5, r7
 800918e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009192:	42ab      	cmp	r3, r5
 8009194:	da4c      	bge.n	8009230 <__gethex+0x2a4>
 8009196:	ee18 0a10 	vmov	r0, s16
 800919a:	4621      	mov	r1, r4
 800919c:	f000 fa6a 	bl	8009674 <_Bfree>
 80091a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091a2:	2300      	movs	r3, #0
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	27a3      	movs	r7, #163	; 0xa3
 80091a8:	e785      	b.n	80090b6 <__gethex+0x12a>
 80091aa:	1e73      	subs	r3, r6, #1
 80091ac:	9a05      	ldr	r2, [sp, #20]
 80091ae:	9303      	str	r3, [sp, #12]
 80091b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d019      	beq.n	80091ec <__gethex+0x260>
 80091b8:	f1bb 0f20 	cmp.w	fp, #32
 80091bc:	d107      	bne.n	80091ce <__gethex+0x242>
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	9a00      	ldr	r2, [sp, #0]
 80091c2:	f843 2b04 	str.w	r2, [r3], #4
 80091c6:	9302      	str	r3, [sp, #8]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	469b      	mov	fp, r3
 80091ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80091d2:	f7ff fec5 	bl	8008f60 <__hexdig_fun>
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	f000 000f 	and.w	r0, r0, #15
 80091dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80091e0:	4303      	orrs	r3, r0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	f10b 0b04 	add.w	fp, fp, #4
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	e00d      	b.n	8009208 <__gethex+0x27c>
 80091ec:	9b03      	ldr	r3, [sp, #12]
 80091ee:	9a06      	ldr	r2, [sp, #24]
 80091f0:	4413      	add	r3, r2
 80091f2:	42bb      	cmp	r3, r7
 80091f4:	d3e0      	bcc.n	80091b8 <__gethex+0x22c>
 80091f6:	4618      	mov	r0, r3
 80091f8:	9901      	ldr	r1, [sp, #4]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	4652      	mov	r2, sl
 80091fe:	f001 f927 	bl	800a450 <strncmp>
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	2800      	cmp	r0, #0
 8009206:	d1d7      	bne.n	80091b8 <__gethex+0x22c>
 8009208:	461e      	mov	r6, r3
 800920a:	e78b      	b.n	8009124 <__gethex+0x198>
 800920c:	f04f 0a03 	mov.w	sl, #3
 8009210:	e7b8      	b.n	8009184 <__gethex+0x1f8>
 8009212:	da0a      	bge.n	800922a <__gethex+0x29e>
 8009214:	1a37      	subs	r7, r6, r0
 8009216:	4621      	mov	r1, r4
 8009218:	ee18 0a10 	vmov	r0, s16
 800921c:	463a      	mov	r2, r7
 800921e:	f000 fc45 	bl	8009aac <__lshift>
 8009222:	1bed      	subs	r5, r5, r7
 8009224:	4604      	mov	r4, r0
 8009226:	f100 0914 	add.w	r9, r0, #20
 800922a:	f04f 0a00 	mov.w	sl, #0
 800922e:	e7ae      	b.n	800918e <__gethex+0x202>
 8009230:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009234:	42a8      	cmp	r0, r5
 8009236:	dd72      	ble.n	800931e <__gethex+0x392>
 8009238:	1b45      	subs	r5, r0, r5
 800923a:	42ae      	cmp	r6, r5
 800923c:	dc36      	bgt.n	80092ac <__gethex+0x320>
 800923e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009242:	2b02      	cmp	r3, #2
 8009244:	d02a      	beq.n	800929c <__gethex+0x310>
 8009246:	2b03      	cmp	r3, #3
 8009248:	d02c      	beq.n	80092a4 <__gethex+0x318>
 800924a:	2b01      	cmp	r3, #1
 800924c:	d11c      	bne.n	8009288 <__gethex+0x2fc>
 800924e:	42ae      	cmp	r6, r5
 8009250:	d11a      	bne.n	8009288 <__gethex+0x2fc>
 8009252:	2e01      	cmp	r6, #1
 8009254:	d112      	bne.n	800927c <__gethex+0x2f0>
 8009256:	9a04      	ldr	r2, [sp, #16]
 8009258:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	2301      	movs	r3, #1
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	f8c9 3000 	str.w	r3, [r9]
 8009266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009268:	2762      	movs	r7, #98	; 0x62
 800926a:	601c      	str	r4, [r3, #0]
 800926c:	e723      	b.n	80090b6 <__gethex+0x12a>
 800926e:	bf00      	nop
 8009270:	0800c0a0 	.word	0x0800c0a0
 8009274:	0800c028 	.word	0x0800c028
 8009278:	0800c039 	.word	0x0800c039
 800927c:	1e71      	subs	r1, r6, #1
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fe58 	bl	8009f34 <__any_on>
 8009284:	2800      	cmp	r0, #0
 8009286:	d1e6      	bne.n	8009256 <__gethex+0x2ca>
 8009288:	ee18 0a10 	vmov	r0, s16
 800928c:	4621      	mov	r1, r4
 800928e:	f000 f9f1 	bl	8009674 <_Bfree>
 8009292:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009294:	2300      	movs	r3, #0
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	2750      	movs	r7, #80	; 0x50
 800929a:	e70c      	b.n	80090b6 <__gethex+0x12a>
 800929c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f2      	bne.n	8009288 <__gethex+0x2fc>
 80092a2:	e7d8      	b.n	8009256 <__gethex+0x2ca>
 80092a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1d5      	bne.n	8009256 <__gethex+0x2ca>
 80092aa:	e7ed      	b.n	8009288 <__gethex+0x2fc>
 80092ac:	1e6f      	subs	r7, r5, #1
 80092ae:	f1ba 0f00 	cmp.w	sl, #0
 80092b2:	d131      	bne.n	8009318 <__gethex+0x38c>
 80092b4:	b127      	cbz	r7, 80092c0 <__gethex+0x334>
 80092b6:	4639      	mov	r1, r7
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 fe3b 	bl	8009f34 <__any_on>
 80092be:	4682      	mov	sl, r0
 80092c0:	117b      	asrs	r3, r7, #5
 80092c2:	2101      	movs	r1, #1
 80092c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092c8:	f007 071f 	and.w	r7, r7, #31
 80092cc:	fa01 f707 	lsl.w	r7, r1, r7
 80092d0:	421f      	tst	r7, r3
 80092d2:	4629      	mov	r1, r5
 80092d4:	4620      	mov	r0, r4
 80092d6:	bf18      	it	ne
 80092d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80092dc:	1b76      	subs	r6, r6, r5
 80092de:	f7ff fded 	bl	8008ebc <rshift>
 80092e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80092e6:	2702      	movs	r7, #2
 80092e8:	f1ba 0f00 	cmp.w	sl, #0
 80092ec:	d048      	beq.n	8009380 <__gethex+0x3f4>
 80092ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d015      	beq.n	8009322 <__gethex+0x396>
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d017      	beq.n	800932a <__gethex+0x39e>
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d109      	bne.n	8009312 <__gethex+0x386>
 80092fe:	f01a 0f02 	tst.w	sl, #2
 8009302:	d006      	beq.n	8009312 <__gethex+0x386>
 8009304:	f8d9 0000 	ldr.w	r0, [r9]
 8009308:	ea4a 0a00 	orr.w	sl, sl, r0
 800930c:	f01a 0f01 	tst.w	sl, #1
 8009310:	d10e      	bne.n	8009330 <__gethex+0x3a4>
 8009312:	f047 0710 	orr.w	r7, r7, #16
 8009316:	e033      	b.n	8009380 <__gethex+0x3f4>
 8009318:	f04f 0a01 	mov.w	sl, #1
 800931c:	e7d0      	b.n	80092c0 <__gethex+0x334>
 800931e:	2701      	movs	r7, #1
 8009320:	e7e2      	b.n	80092e8 <__gethex+0x35c>
 8009322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009324:	f1c3 0301 	rsb	r3, r3, #1
 8009328:	9315      	str	r3, [sp, #84]	; 0x54
 800932a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f0      	beq.n	8009312 <__gethex+0x386>
 8009330:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009334:	f104 0314 	add.w	r3, r4, #20
 8009338:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800933c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009340:	f04f 0c00 	mov.w	ip, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f853 2b04 	ldr.w	r2, [r3], #4
 800934a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800934e:	d01c      	beq.n	800938a <__gethex+0x3fe>
 8009350:	3201      	adds	r2, #1
 8009352:	6002      	str	r2, [r0, #0]
 8009354:	2f02      	cmp	r7, #2
 8009356:	f104 0314 	add.w	r3, r4, #20
 800935a:	d13f      	bne.n	80093dc <__gethex+0x450>
 800935c:	f8d8 2000 	ldr.w	r2, [r8]
 8009360:	3a01      	subs	r2, #1
 8009362:	42b2      	cmp	r2, r6
 8009364:	d10a      	bne.n	800937c <__gethex+0x3f0>
 8009366:	1171      	asrs	r1, r6, #5
 8009368:	2201      	movs	r2, #1
 800936a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800936e:	f006 061f 	and.w	r6, r6, #31
 8009372:	fa02 f606 	lsl.w	r6, r2, r6
 8009376:	421e      	tst	r6, r3
 8009378:	bf18      	it	ne
 800937a:	4617      	movne	r7, r2
 800937c:	f047 0720 	orr.w	r7, r7, #32
 8009380:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009382:	601c      	str	r4, [r3, #0]
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	601d      	str	r5, [r3, #0]
 8009388:	e695      	b.n	80090b6 <__gethex+0x12a>
 800938a:	4299      	cmp	r1, r3
 800938c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009390:	d8d8      	bhi.n	8009344 <__gethex+0x3b8>
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	459b      	cmp	fp, r3
 8009396:	db19      	blt.n	80093cc <__gethex+0x440>
 8009398:	6861      	ldr	r1, [r4, #4]
 800939a:	ee18 0a10 	vmov	r0, s16
 800939e:	3101      	adds	r1, #1
 80093a0:	f000 f928 	bl	80095f4 <_Balloc>
 80093a4:	4681      	mov	r9, r0
 80093a6:	b918      	cbnz	r0, 80093b0 <__gethex+0x424>
 80093a8:	4b1a      	ldr	r3, [pc, #104]	; (8009414 <__gethex+0x488>)
 80093aa:	4602      	mov	r2, r0
 80093ac:	2184      	movs	r1, #132	; 0x84
 80093ae:	e6a8      	b.n	8009102 <__gethex+0x176>
 80093b0:	6922      	ldr	r2, [r4, #16]
 80093b2:	3202      	adds	r2, #2
 80093b4:	f104 010c 	add.w	r1, r4, #12
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	300c      	adds	r0, #12
 80093bc:	f000 f90c 	bl	80095d8 <memcpy>
 80093c0:	4621      	mov	r1, r4
 80093c2:	ee18 0a10 	vmov	r0, s16
 80093c6:	f000 f955 	bl	8009674 <_Bfree>
 80093ca:	464c      	mov	r4, r9
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093d4:	6122      	str	r2, [r4, #16]
 80093d6:	2201      	movs	r2, #1
 80093d8:	615a      	str	r2, [r3, #20]
 80093da:	e7bb      	b.n	8009354 <__gethex+0x3c8>
 80093dc:	6922      	ldr	r2, [r4, #16]
 80093de:	455a      	cmp	r2, fp
 80093e0:	dd0b      	ble.n	80093fa <__gethex+0x46e>
 80093e2:	2101      	movs	r1, #1
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff fd69 	bl	8008ebc <rshift>
 80093ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093ee:	3501      	adds	r5, #1
 80093f0:	42ab      	cmp	r3, r5
 80093f2:	f6ff aed0 	blt.w	8009196 <__gethex+0x20a>
 80093f6:	2701      	movs	r7, #1
 80093f8:	e7c0      	b.n	800937c <__gethex+0x3f0>
 80093fa:	f016 061f 	ands.w	r6, r6, #31
 80093fe:	d0fa      	beq.n	80093f6 <__gethex+0x46a>
 8009400:	4453      	add	r3, sl
 8009402:	f1c6 0620 	rsb	r6, r6, #32
 8009406:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800940a:	f000 f9e5 	bl	80097d8 <__hi0bits>
 800940e:	42b0      	cmp	r0, r6
 8009410:	dbe7      	blt.n	80093e2 <__gethex+0x456>
 8009412:	e7f0      	b.n	80093f6 <__gethex+0x46a>
 8009414:	0800c028 	.word	0x0800c028

08009418 <L_shift>:
 8009418:	f1c2 0208 	rsb	r2, r2, #8
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	b570      	push	{r4, r5, r6, lr}
 8009420:	f1c2 0620 	rsb	r6, r2, #32
 8009424:	6843      	ldr	r3, [r0, #4]
 8009426:	6804      	ldr	r4, [r0, #0]
 8009428:	fa03 f506 	lsl.w	r5, r3, r6
 800942c:	432c      	orrs	r4, r5
 800942e:	40d3      	lsrs	r3, r2
 8009430:	6004      	str	r4, [r0, #0]
 8009432:	f840 3f04 	str.w	r3, [r0, #4]!
 8009436:	4288      	cmp	r0, r1
 8009438:	d3f4      	bcc.n	8009424 <L_shift+0xc>
 800943a:	bd70      	pop	{r4, r5, r6, pc}

0800943c <__match>:
 800943c:	b530      	push	{r4, r5, lr}
 800943e:	6803      	ldr	r3, [r0, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009446:	b914      	cbnz	r4, 800944e <__match+0x12>
 8009448:	6003      	str	r3, [r0, #0]
 800944a:	2001      	movs	r0, #1
 800944c:	bd30      	pop	{r4, r5, pc}
 800944e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009452:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009456:	2d19      	cmp	r5, #25
 8009458:	bf98      	it	ls
 800945a:	3220      	addls	r2, #32
 800945c:	42a2      	cmp	r2, r4
 800945e:	d0f0      	beq.n	8009442 <__match+0x6>
 8009460:	2000      	movs	r0, #0
 8009462:	e7f3      	b.n	800944c <__match+0x10>

08009464 <__hexnan>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	680b      	ldr	r3, [r1, #0]
 800946a:	115e      	asrs	r6, r3, #5
 800946c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009470:	f013 031f 	ands.w	r3, r3, #31
 8009474:	b087      	sub	sp, #28
 8009476:	bf18      	it	ne
 8009478:	3604      	addne	r6, #4
 800947a:	2500      	movs	r5, #0
 800947c:	1f37      	subs	r7, r6, #4
 800947e:	4690      	mov	r8, r2
 8009480:	6802      	ldr	r2, [r0, #0]
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	4682      	mov	sl, r0
 8009486:	f846 5c04 	str.w	r5, [r6, #-4]
 800948a:	46b9      	mov	r9, r7
 800948c:	463c      	mov	r4, r7
 800948e:	9502      	str	r5, [sp, #8]
 8009490:	46ab      	mov	fp, r5
 8009492:	7851      	ldrb	r1, [r2, #1]
 8009494:	1c53      	adds	r3, r2, #1
 8009496:	9303      	str	r3, [sp, #12]
 8009498:	b341      	cbz	r1, 80094ec <__hexnan+0x88>
 800949a:	4608      	mov	r0, r1
 800949c:	9205      	str	r2, [sp, #20]
 800949e:	9104      	str	r1, [sp, #16]
 80094a0:	f7ff fd5e 	bl	8008f60 <__hexdig_fun>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	d14f      	bne.n	8009548 <__hexnan+0xe4>
 80094a8:	9904      	ldr	r1, [sp, #16]
 80094aa:	9a05      	ldr	r2, [sp, #20]
 80094ac:	2920      	cmp	r1, #32
 80094ae:	d818      	bhi.n	80094e2 <__hexnan+0x7e>
 80094b0:	9b02      	ldr	r3, [sp, #8]
 80094b2:	459b      	cmp	fp, r3
 80094b4:	dd13      	ble.n	80094de <__hexnan+0x7a>
 80094b6:	454c      	cmp	r4, r9
 80094b8:	d206      	bcs.n	80094c8 <__hexnan+0x64>
 80094ba:	2d07      	cmp	r5, #7
 80094bc:	dc04      	bgt.n	80094c8 <__hexnan+0x64>
 80094be:	462a      	mov	r2, r5
 80094c0:	4649      	mov	r1, r9
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7ff ffa8 	bl	8009418 <L_shift>
 80094c8:	4544      	cmp	r4, r8
 80094ca:	d950      	bls.n	800956e <__hexnan+0x10a>
 80094cc:	2300      	movs	r3, #0
 80094ce:	f1a4 0904 	sub.w	r9, r4, #4
 80094d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80094d6:	f8cd b008 	str.w	fp, [sp, #8]
 80094da:	464c      	mov	r4, r9
 80094dc:	461d      	mov	r5, r3
 80094de:	9a03      	ldr	r2, [sp, #12]
 80094e0:	e7d7      	b.n	8009492 <__hexnan+0x2e>
 80094e2:	2929      	cmp	r1, #41	; 0x29
 80094e4:	d156      	bne.n	8009594 <__hexnan+0x130>
 80094e6:	3202      	adds	r2, #2
 80094e8:	f8ca 2000 	str.w	r2, [sl]
 80094ec:	f1bb 0f00 	cmp.w	fp, #0
 80094f0:	d050      	beq.n	8009594 <__hexnan+0x130>
 80094f2:	454c      	cmp	r4, r9
 80094f4:	d206      	bcs.n	8009504 <__hexnan+0xa0>
 80094f6:	2d07      	cmp	r5, #7
 80094f8:	dc04      	bgt.n	8009504 <__hexnan+0xa0>
 80094fa:	462a      	mov	r2, r5
 80094fc:	4649      	mov	r1, r9
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff ff8a 	bl	8009418 <L_shift>
 8009504:	4544      	cmp	r4, r8
 8009506:	d934      	bls.n	8009572 <__hexnan+0x10e>
 8009508:	f1a8 0204 	sub.w	r2, r8, #4
 800950c:	4623      	mov	r3, r4
 800950e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009512:	f842 1f04 	str.w	r1, [r2, #4]!
 8009516:	429f      	cmp	r7, r3
 8009518:	d2f9      	bcs.n	800950e <__hexnan+0xaa>
 800951a:	1b3b      	subs	r3, r7, r4
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3304      	adds	r3, #4
 8009522:	3401      	adds	r4, #1
 8009524:	3e03      	subs	r6, #3
 8009526:	42b4      	cmp	r4, r6
 8009528:	bf88      	it	hi
 800952a:	2304      	movhi	r3, #4
 800952c:	4443      	add	r3, r8
 800952e:	2200      	movs	r2, #0
 8009530:	f843 2b04 	str.w	r2, [r3], #4
 8009534:	429f      	cmp	r7, r3
 8009536:	d2fb      	bcs.n	8009530 <__hexnan+0xcc>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b91b      	cbnz	r3, 8009544 <__hexnan+0xe0>
 800953c:	4547      	cmp	r7, r8
 800953e:	d127      	bne.n	8009590 <__hexnan+0x12c>
 8009540:	2301      	movs	r3, #1
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	2005      	movs	r0, #5
 8009546:	e026      	b.n	8009596 <__hexnan+0x132>
 8009548:	3501      	adds	r5, #1
 800954a:	2d08      	cmp	r5, #8
 800954c:	f10b 0b01 	add.w	fp, fp, #1
 8009550:	dd06      	ble.n	8009560 <__hexnan+0xfc>
 8009552:	4544      	cmp	r4, r8
 8009554:	d9c3      	bls.n	80094de <__hexnan+0x7a>
 8009556:	2300      	movs	r3, #0
 8009558:	f844 3c04 	str.w	r3, [r4, #-4]
 800955c:	2501      	movs	r5, #1
 800955e:	3c04      	subs	r4, #4
 8009560:	6822      	ldr	r2, [r4, #0]
 8009562:	f000 000f 	and.w	r0, r0, #15
 8009566:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800956a:	6022      	str	r2, [r4, #0]
 800956c:	e7b7      	b.n	80094de <__hexnan+0x7a>
 800956e:	2508      	movs	r5, #8
 8009570:	e7b5      	b.n	80094de <__hexnan+0x7a>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0df      	beq.n	8009538 <__hexnan+0xd4>
 8009578:	f04f 32ff 	mov.w	r2, #4294967295
 800957c:	f1c3 0320 	rsb	r3, r3, #32
 8009580:	fa22 f303 	lsr.w	r3, r2, r3
 8009584:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009588:	401a      	ands	r2, r3
 800958a:	f846 2c04 	str.w	r2, [r6, #-4]
 800958e:	e7d3      	b.n	8009538 <__hexnan+0xd4>
 8009590:	3f04      	subs	r7, #4
 8009592:	e7d1      	b.n	8009538 <__hexnan+0xd4>
 8009594:	2004      	movs	r0, #4
 8009596:	b007      	add	sp, #28
 8009598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800959c <_localeconv_r>:
 800959c:	4800      	ldr	r0, [pc, #0]	; (80095a0 <_localeconv_r+0x4>)
 800959e:	4770      	bx	lr
 80095a0:	20000188 	.word	0x20000188

080095a4 <malloc>:
 80095a4:	4b02      	ldr	r3, [pc, #8]	; (80095b0 <malloc+0xc>)
 80095a6:	4601      	mov	r1, r0
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	f000 bd67 	b.w	800a07c <_malloc_r>
 80095ae:	bf00      	nop
 80095b0:	20000030 	.word	0x20000030

080095b4 <__ascii_mbtowc>:
 80095b4:	b082      	sub	sp, #8
 80095b6:	b901      	cbnz	r1, 80095ba <__ascii_mbtowc+0x6>
 80095b8:	a901      	add	r1, sp, #4
 80095ba:	b142      	cbz	r2, 80095ce <__ascii_mbtowc+0x1a>
 80095bc:	b14b      	cbz	r3, 80095d2 <__ascii_mbtowc+0x1e>
 80095be:	7813      	ldrb	r3, [r2, #0]
 80095c0:	600b      	str	r3, [r1, #0]
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	1e10      	subs	r0, r2, #0
 80095c6:	bf18      	it	ne
 80095c8:	2001      	movne	r0, #1
 80095ca:	b002      	add	sp, #8
 80095cc:	4770      	bx	lr
 80095ce:	4610      	mov	r0, r2
 80095d0:	e7fb      	b.n	80095ca <__ascii_mbtowc+0x16>
 80095d2:	f06f 0001 	mvn.w	r0, #1
 80095d6:	e7f8      	b.n	80095ca <__ascii_mbtowc+0x16>

080095d8 <memcpy>:
 80095d8:	440a      	add	r2, r1
 80095da:	4291      	cmp	r1, r2
 80095dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e0:	d100      	bne.n	80095e4 <memcpy+0xc>
 80095e2:	4770      	bx	lr
 80095e4:	b510      	push	{r4, lr}
 80095e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d1f9      	bne.n	80095e6 <memcpy+0xe>
 80095f2:	bd10      	pop	{r4, pc}

080095f4 <_Balloc>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	b976      	cbnz	r6, 800961c <_Balloc+0x28>
 80095fe:	2010      	movs	r0, #16
 8009600:	f7ff ffd0 	bl	80095a4 <malloc>
 8009604:	4602      	mov	r2, r0
 8009606:	6260      	str	r0, [r4, #36]	; 0x24
 8009608:	b920      	cbnz	r0, 8009614 <_Balloc+0x20>
 800960a:	4b18      	ldr	r3, [pc, #96]	; (800966c <_Balloc+0x78>)
 800960c:	4818      	ldr	r0, [pc, #96]	; (8009670 <_Balloc+0x7c>)
 800960e:	2166      	movs	r1, #102	; 0x66
 8009610:	f000 ff40 	bl	800a494 <__assert_func>
 8009614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009618:	6006      	str	r6, [r0, #0]
 800961a:	60c6      	str	r6, [r0, #12]
 800961c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800961e:	68f3      	ldr	r3, [r6, #12]
 8009620:	b183      	cbz	r3, 8009644 <_Balloc+0x50>
 8009622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800962a:	b9b8      	cbnz	r0, 800965c <_Balloc+0x68>
 800962c:	2101      	movs	r1, #1
 800962e:	fa01 f605 	lsl.w	r6, r1, r5
 8009632:	1d72      	adds	r2, r6, #5
 8009634:	0092      	lsls	r2, r2, #2
 8009636:	4620      	mov	r0, r4
 8009638:	f000 fc9d 	bl	8009f76 <_calloc_r>
 800963c:	b160      	cbz	r0, 8009658 <_Balloc+0x64>
 800963e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009642:	e00e      	b.n	8009662 <_Balloc+0x6e>
 8009644:	2221      	movs	r2, #33	; 0x21
 8009646:	2104      	movs	r1, #4
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fc94 	bl	8009f76 <_calloc_r>
 800964e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009650:	60f0      	str	r0, [r6, #12]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e4      	bne.n	8009622 <_Balloc+0x2e>
 8009658:	2000      	movs	r0, #0
 800965a:	bd70      	pop	{r4, r5, r6, pc}
 800965c:	6802      	ldr	r2, [r0, #0]
 800965e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009662:	2300      	movs	r3, #0
 8009664:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009668:	e7f7      	b.n	800965a <_Balloc+0x66>
 800966a:	bf00      	nop
 800966c:	0800bfb6 	.word	0x0800bfb6
 8009670:	0800c0b4 	.word	0x0800c0b4

08009674 <_Bfree>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009678:	4605      	mov	r5, r0
 800967a:	460c      	mov	r4, r1
 800967c:	b976      	cbnz	r6, 800969c <_Bfree+0x28>
 800967e:	2010      	movs	r0, #16
 8009680:	f7ff ff90 	bl	80095a4 <malloc>
 8009684:	4602      	mov	r2, r0
 8009686:	6268      	str	r0, [r5, #36]	; 0x24
 8009688:	b920      	cbnz	r0, 8009694 <_Bfree+0x20>
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <_Bfree+0x3c>)
 800968c:	4809      	ldr	r0, [pc, #36]	; (80096b4 <_Bfree+0x40>)
 800968e:	218a      	movs	r1, #138	; 0x8a
 8009690:	f000 ff00 	bl	800a494 <__assert_func>
 8009694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009698:	6006      	str	r6, [r0, #0]
 800969a:	60c6      	str	r6, [r0, #12]
 800969c:	b13c      	cbz	r4, 80096ae <_Bfree+0x3a>
 800969e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096a0:	6862      	ldr	r2, [r4, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096a8:	6021      	str	r1, [r4, #0]
 80096aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096ae:	bd70      	pop	{r4, r5, r6, pc}
 80096b0:	0800bfb6 	.word	0x0800bfb6
 80096b4:	0800c0b4 	.word	0x0800c0b4

080096b8 <__multadd>:
 80096b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096bc:	690d      	ldr	r5, [r1, #16]
 80096be:	4607      	mov	r7, r0
 80096c0:	460c      	mov	r4, r1
 80096c2:	461e      	mov	r6, r3
 80096c4:	f101 0c14 	add.w	ip, r1, #20
 80096c8:	2000      	movs	r0, #0
 80096ca:	f8dc 3000 	ldr.w	r3, [ip]
 80096ce:	b299      	uxth	r1, r3
 80096d0:	fb02 6101 	mla	r1, r2, r1, r6
 80096d4:	0c1e      	lsrs	r6, r3, #16
 80096d6:	0c0b      	lsrs	r3, r1, #16
 80096d8:	fb02 3306 	mla	r3, r2, r6, r3
 80096dc:	b289      	uxth	r1, r1
 80096de:	3001      	adds	r0, #1
 80096e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096e4:	4285      	cmp	r5, r0
 80096e6:	f84c 1b04 	str.w	r1, [ip], #4
 80096ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ee:	dcec      	bgt.n	80096ca <__multadd+0x12>
 80096f0:	b30e      	cbz	r6, 8009736 <__multadd+0x7e>
 80096f2:	68a3      	ldr	r3, [r4, #8]
 80096f4:	42ab      	cmp	r3, r5
 80096f6:	dc19      	bgt.n	800972c <__multadd+0x74>
 80096f8:	6861      	ldr	r1, [r4, #4]
 80096fa:	4638      	mov	r0, r7
 80096fc:	3101      	adds	r1, #1
 80096fe:	f7ff ff79 	bl	80095f4 <_Balloc>
 8009702:	4680      	mov	r8, r0
 8009704:	b928      	cbnz	r0, 8009712 <__multadd+0x5a>
 8009706:	4602      	mov	r2, r0
 8009708:	4b0c      	ldr	r3, [pc, #48]	; (800973c <__multadd+0x84>)
 800970a:	480d      	ldr	r0, [pc, #52]	; (8009740 <__multadd+0x88>)
 800970c:	21b5      	movs	r1, #181	; 0xb5
 800970e:	f000 fec1 	bl	800a494 <__assert_func>
 8009712:	6922      	ldr	r2, [r4, #16]
 8009714:	3202      	adds	r2, #2
 8009716:	f104 010c 	add.w	r1, r4, #12
 800971a:	0092      	lsls	r2, r2, #2
 800971c:	300c      	adds	r0, #12
 800971e:	f7ff ff5b 	bl	80095d8 <memcpy>
 8009722:	4621      	mov	r1, r4
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff ffa5 	bl	8009674 <_Bfree>
 800972a:	4644      	mov	r4, r8
 800972c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009730:	3501      	adds	r5, #1
 8009732:	615e      	str	r6, [r3, #20]
 8009734:	6125      	str	r5, [r4, #16]
 8009736:	4620      	mov	r0, r4
 8009738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800973c:	0800c028 	.word	0x0800c028
 8009740:	0800c0b4 	.word	0x0800c0b4

08009744 <__s2b>:
 8009744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009748:	460c      	mov	r4, r1
 800974a:	4615      	mov	r5, r2
 800974c:	461f      	mov	r7, r3
 800974e:	2209      	movs	r2, #9
 8009750:	3308      	adds	r3, #8
 8009752:	4606      	mov	r6, r0
 8009754:	fb93 f3f2 	sdiv	r3, r3, r2
 8009758:	2100      	movs	r1, #0
 800975a:	2201      	movs	r2, #1
 800975c:	429a      	cmp	r2, r3
 800975e:	db09      	blt.n	8009774 <__s2b+0x30>
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff ff47 	bl	80095f4 <_Balloc>
 8009766:	b940      	cbnz	r0, 800977a <__s2b+0x36>
 8009768:	4602      	mov	r2, r0
 800976a:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <__s2b+0x8c>)
 800976c:	4819      	ldr	r0, [pc, #100]	; (80097d4 <__s2b+0x90>)
 800976e:	21ce      	movs	r1, #206	; 0xce
 8009770:	f000 fe90 	bl	800a494 <__assert_func>
 8009774:	0052      	lsls	r2, r2, #1
 8009776:	3101      	adds	r1, #1
 8009778:	e7f0      	b.n	800975c <__s2b+0x18>
 800977a:	9b08      	ldr	r3, [sp, #32]
 800977c:	6143      	str	r3, [r0, #20]
 800977e:	2d09      	cmp	r5, #9
 8009780:	f04f 0301 	mov.w	r3, #1
 8009784:	6103      	str	r3, [r0, #16]
 8009786:	dd16      	ble.n	80097b6 <__s2b+0x72>
 8009788:	f104 0909 	add.w	r9, r4, #9
 800978c:	46c8      	mov	r8, r9
 800978e:	442c      	add	r4, r5
 8009790:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009794:	4601      	mov	r1, r0
 8009796:	3b30      	subs	r3, #48	; 0x30
 8009798:	220a      	movs	r2, #10
 800979a:	4630      	mov	r0, r6
 800979c:	f7ff ff8c 	bl	80096b8 <__multadd>
 80097a0:	45a0      	cmp	r8, r4
 80097a2:	d1f5      	bne.n	8009790 <__s2b+0x4c>
 80097a4:	f1a5 0408 	sub.w	r4, r5, #8
 80097a8:	444c      	add	r4, r9
 80097aa:	1b2d      	subs	r5, r5, r4
 80097ac:	1963      	adds	r3, r4, r5
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	db04      	blt.n	80097bc <__s2b+0x78>
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	340a      	adds	r4, #10
 80097b8:	2509      	movs	r5, #9
 80097ba:	e7f6      	b.n	80097aa <__s2b+0x66>
 80097bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097c0:	4601      	mov	r1, r0
 80097c2:	3b30      	subs	r3, #48	; 0x30
 80097c4:	220a      	movs	r2, #10
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ff76 	bl	80096b8 <__multadd>
 80097cc:	e7ee      	b.n	80097ac <__s2b+0x68>
 80097ce:	bf00      	nop
 80097d0:	0800c028 	.word	0x0800c028
 80097d4:	0800c0b4 	.word	0x0800c0b4

080097d8 <__hi0bits>:
 80097d8:	0c03      	lsrs	r3, r0, #16
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	b9d3      	cbnz	r3, 8009814 <__hi0bits+0x3c>
 80097de:	0400      	lsls	r0, r0, #16
 80097e0:	2310      	movs	r3, #16
 80097e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097e6:	bf04      	itt	eq
 80097e8:	0200      	lsleq	r0, r0, #8
 80097ea:	3308      	addeq	r3, #8
 80097ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097f0:	bf04      	itt	eq
 80097f2:	0100      	lsleq	r0, r0, #4
 80097f4:	3304      	addeq	r3, #4
 80097f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097fa:	bf04      	itt	eq
 80097fc:	0080      	lsleq	r0, r0, #2
 80097fe:	3302      	addeq	r3, #2
 8009800:	2800      	cmp	r0, #0
 8009802:	db05      	blt.n	8009810 <__hi0bits+0x38>
 8009804:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	bf08      	it	eq
 800980e:	2320      	moveq	r3, #32
 8009810:	4618      	mov	r0, r3
 8009812:	4770      	bx	lr
 8009814:	2300      	movs	r3, #0
 8009816:	e7e4      	b.n	80097e2 <__hi0bits+0xa>

08009818 <__lo0bits>:
 8009818:	6803      	ldr	r3, [r0, #0]
 800981a:	f013 0207 	ands.w	r2, r3, #7
 800981e:	4601      	mov	r1, r0
 8009820:	d00b      	beq.n	800983a <__lo0bits+0x22>
 8009822:	07da      	lsls	r2, r3, #31
 8009824:	d423      	bmi.n	800986e <__lo0bits+0x56>
 8009826:	0798      	lsls	r0, r3, #30
 8009828:	bf49      	itett	mi
 800982a:	085b      	lsrmi	r3, r3, #1
 800982c:	089b      	lsrpl	r3, r3, #2
 800982e:	2001      	movmi	r0, #1
 8009830:	600b      	strmi	r3, [r1, #0]
 8009832:	bf5c      	itt	pl
 8009834:	600b      	strpl	r3, [r1, #0]
 8009836:	2002      	movpl	r0, #2
 8009838:	4770      	bx	lr
 800983a:	b298      	uxth	r0, r3
 800983c:	b9a8      	cbnz	r0, 800986a <__lo0bits+0x52>
 800983e:	0c1b      	lsrs	r3, r3, #16
 8009840:	2010      	movs	r0, #16
 8009842:	b2da      	uxtb	r2, r3
 8009844:	b90a      	cbnz	r2, 800984a <__lo0bits+0x32>
 8009846:	3008      	adds	r0, #8
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	071a      	lsls	r2, r3, #28
 800984c:	bf04      	itt	eq
 800984e:	091b      	lsreq	r3, r3, #4
 8009850:	3004      	addeq	r0, #4
 8009852:	079a      	lsls	r2, r3, #30
 8009854:	bf04      	itt	eq
 8009856:	089b      	lsreq	r3, r3, #2
 8009858:	3002      	addeq	r0, #2
 800985a:	07da      	lsls	r2, r3, #31
 800985c:	d403      	bmi.n	8009866 <__lo0bits+0x4e>
 800985e:	085b      	lsrs	r3, r3, #1
 8009860:	f100 0001 	add.w	r0, r0, #1
 8009864:	d005      	beq.n	8009872 <__lo0bits+0x5a>
 8009866:	600b      	str	r3, [r1, #0]
 8009868:	4770      	bx	lr
 800986a:	4610      	mov	r0, r2
 800986c:	e7e9      	b.n	8009842 <__lo0bits+0x2a>
 800986e:	2000      	movs	r0, #0
 8009870:	4770      	bx	lr
 8009872:	2020      	movs	r0, #32
 8009874:	4770      	bx	lr
	...

08009878 <__i2b>:
 8009878:	b510      	push	{r4, lr}
 800987a:	460c      	mov	r4, r1
 800987c:	2101      	movs	r1, #1
 800987e:	f7ff feb9 	bl	80095f4 <_Balloc>
 8009882:	4602      	mov	r2, r0
 8009884:	b928      	cbnz	r0, 8009892 <__i2b+0x1a>
 8009886:	4b05      	ldr	r3, [pc, #20]	; (800989c <__i2b+0x24>)
 8009888:	4805      	ldr	r0, [pc, #20]	; (80098a0 <__i2b+0x28>)
 800988a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800988e:	f000 fe01 	bl	800a494 <__assert_func>
 8009892:	2301      	movs	r3, #1
 8009894:	6144      	str	r4, [r0, #20]
 8009896:	6103      	str	r3, [r0, #16]
 8009898:	bd10      	pop	{r4, pc}
 800989a:	bf00      	nop
 800989c:	0800c028 	.word	0x0800c028
 80098a0:	0800c0b4 	.word	0x0800c0b4

080098a4 <__multiply>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4691      	mov	r9, r2
 80098aa:	690a      	ldr	r2, [r1, #16]
 80098ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	bfb8      	it	lt
 80098b4:	460b      	movlt	r3, r1
 80098b6:	460c      	mov	r4, r1
 80098b8:	bfbc      	itt	lt
 80098ba:	464c      	movlt	r4, r9
 80098bc:	4699      	movlt	r9, r3
 80098be:	6927      	ldr	r7, [r4, #16]
 80098c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098c4:	68a3      	ldr	r3, [r4, #8]
 80098c6:	6861      	ldr	r1, [r4, #4]
 80098c8:	eb07 060a 	add.w	r6, r7, sl
 80098cc:	42b3      	cmp	r3, r6
 80098ce:	b085      	sub	sp, #20
 80098d0:	bfb8      	it	lt
 80098d2:	3101      	addlt	r1, #1
 80098d4:	f7ff fe8e 	bl	80095f4 <_Balloc>
 80098d8:	b930      	cbnz	r0, 80098e8 <__multiply+0x44>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b44      	ldr	r3, [pc, #272]	; (80099f0 <__multiply+0x14c>)
 80098de:	4845      	ldr	r0, [pc, #276]	; (80099f4 <__multiply+0x150>)
 80098e0:	f240 115d 	movw	r1, #349	; 0x15d
 80098e4:	f000 fdd6 	bl	800a494 <__assert_func>
 80098e8:	f100 0514 	add.w	r5, r0, #20
 80098ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098f0:	462b      	mov	r3, r5
 80098f2:	2200      	movs	r2, #0
 80098f4:	4543      	cmp	r3, r8
 80098f6:	d321      	bcc.n	800993c <__multiply+0x98>
 80098f8:	f104 0314 	add.w	r3, r4, #20
 80098fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009900:	f109 0314 	add.w	r3, r9, #20
 8009904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009908:	9202      	str	r2, [sp, #8]
 800990a:	1b3a      	subs	r2, r7, r4
 800990c:	3a15      	subs	r2, #21
 800990e:	f022 0203 	bic.w	r2, r2, #3
 8009912:	3204      	adds	r2, #4
 8009914:	f104 0115 	add.w	r1, r4, #21
 8009918:	428f      	cmp	r7, r1
 800991a:	bf38      	it	cc
 800991c:	2204      	movcc	r2, #4
 800991e:	9201      	str	r2, [sp, #4]
 8009920:	9a02      	ldr	r2, [sp, #8]
 8009922:	9303      	str	r3, [sp, #12]
 8009924:	429a      	cmp	r2, r3
 8009926:	d80c      	bhi.n	8009942 <__multiply+0x9e>
 8009928:	2e00      	cmp	r6, #0
 800992a:	dd03      	ble.n	8009934 <__multiply+0x90>
 800992c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009930:	2b00      	cmp	r3, #0
 8009932:	d05a      	beq.n	80099ea <__multiply+0x146>
 8009934:	6106      	str	r6, [r0, #16]
 8009936:	b005      	add	sp, #20
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	f843 2b04 	str.w	r2, [r3], #4
 8009940:	e7d8      	b.n	80098f4 <__multiply+0x50>
 8009942:	f8b3 a000 	ldrh.w	sl, [r3]
 8009946:	f1ba 0f00 	cmp.w	sl, #0
 800994a:	d024      	beq.n	8009996 <__multiply+0xf2>
 800994c:	f104 0e14 	add.w	lr, r4, #20
 8009950:	46a9      	mov	r9, r5
 8009952:	f04f 0c00 	mov.w	ip, #0
 8009956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800995a:	f8d9 1000 	ldr.w	r1, [r9]
 800995e:	fa1f fb82 	uxth.w	fp, r2
 8009962:	b289      	uxth	r1, r1
 8009964:	fb0a 110b 	mla	r1, sl, fp, r1
 8009968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800996c:	f8d9 2000 	ldr.w	r2, [r9]
 8009970:	4461      	add	r1, ip
 8009972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009976:	fb0a c20b 	mla	r2, sl, fp, ip
 800997a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800997e:	b289      	uxth	r1, r1
 8009980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009984:	4577      	cmp	r7, lr
 8009986:	f849 1b04 	str.w	r1, [r9], #4
 800998a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800998e:	d8e2      	bhi.n	8009956 <__multiply+0xb2>
 8009990:	9a01      	ldr	r2, [sp, #4]
 8009992:	f845 c002 	str.w	ip, [r5, r2]
 8009996:	9a03      	ldr	r2, [sp, #12]
 8009998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800999c:	3304      	adds	r3, #4
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	d020      	beq.n	80099e6 <__multiply+0x142>
 80099a4:	6829      	ldr	r1, [r5, #0]
 80099a6:	f104 0c14 	add.w	ip, r4, #20
 80099aa:	46ae      	mov	lr, r5
 80099ac:	f04f 0a00 	mov.w	sl, #0
 80099b0:	f8bc b000 	ldrh.w	fp, [ip]
 80099b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099b8:	fb09 220b 	mla	r2, r9, fp, r2
 80099bc:	4492      	add	sl, r2
 80099be:	b289      	uxth	r1, r1
 80099c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80099c4:	f84e 1b04 	str.w	r1, [lr], #4
 80099c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099cc:	f8be 1000 	ldrh.w	r1, [lr]
 80099d0:	0c12      	lsrs	r2, r2, #16
 80099d2:	fb09 1102 	mla	r1, r9, r2, r1
 80099d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099da:	4567      	cmp	r7, ip
 80099dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099e0:	d8e6      	bhi.n	80099b0 <__multiply+0x10c>
 80099e2:	9a01      	ldr	r2, [sp, #4]
 80099e4:	50a9      	str	r1, [r5, r2]
 80099e6:	3504      	adds	r5, #4
 80099e8:	e79a      	b.n	8009920 <__multiply+0x7c>
 80099ea:	3e01      	subs	r6, #1
 80099ec:	e79c      	b.n	8009928 <__multiply+0x84>
 80099ee:	bf00      	nop
 80099f0:	0800c028 	.word	0x0800c028
 80099f4:	0800c0b4 	.word	0x0800c0b4

080099f8 <__pow5mult>:
 80099f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099fc:	4615      	mov	r5, r2
 80099fe:	f012 0203 	ands.w	r2, r2, #3
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	d007      	beq.n	8009a18 <__pow5mult+0x20>
 8009a08:	4c25      	ldr	r4, [pc, #148]	; (8009aa0 <__pow5mult+0xa8>)
 8009a0a:	3a01      	subs	r2, #1
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a12:	f7ff fe51 	bl	80096b8 <__multadd>
 8009a16:	4607      	mov	r7, r0
 8009a18:	10ad      	asrs	r5, r5, #2
 8009a1a:	d03d      	beq.n	8009a98 <__pow5mult+0xa0>
 8009a1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a1e:	b97c      	cbnz	r4, 8009a40 <__pow5mult+0x48>
 8009a20:	2010      	movs	r0, #16
 8009a22:	f7ff fdbf 	bl	80095a4 <malloc>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6270      	str	r0, [r6, #36]	; 0x24
 8009a2a:	b928      	cbnz	r0, 8009a38 <__pow5mult+0x40>
 8009a2c:	4b1d      	ldr	r3, [pc, #116]	; (8009aa4 <__pow5mult+0xac>)
 8009a2e:	481e      	ldr	r0, [pc, #120]	; (8009aa8 <__pow5mult+0xb0>)
 8009a30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a34:	f000 fd2e 	bl	800a494 <__assert_func>
 8009a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a3c:	6004      	str	r4, [r0, #0]
 8009a3e:	60c4      	str	r4, [r0, #12]
 8009a40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a48:	b94c      	cbnz	r4, 8009a5e <__pow5mult+0x66>
 8009a4a:	f240 2171 	movw	r1, #625	; 0x271
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7ff ff12 	bl	8009878 <__i2b>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	6003      	str	r3, [r0, #0]
 8009a5e:	f04f 0900 	mov.w	r9, #0
 8009a62:	07eb      	lsls	r3, r5, #31
 8009a64:	d50a      	bpl.n	8009a7c <__pow5mult+0x84>
 8009a66:	4639      	mov	r1, r7
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f7ff ff1a 	bl	80098a4 <__multiply>
 8009a70:	4639      	mov	r1, r7
 8009a72:	4680      	mov	r8, r0
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7ff fdfd 	bl	8009674 <_Bfree>
 8009a7a:	4647      	mov	r7, r8
 8009a7c:	106d      	asrs	r5, r5, #1
 8009a7e:	d00b      	beq.n	8009a98 <__pow5mult+0xa0>
 8009a80:	6820      	ldr	r0, [r4, #0]
 8009a82:	b938      	cbnz	r0, 8009a94 <__pow5mult+0x9c>
 8009a84:	4622      	mov	r2, r4
 8009a86:	4621      	mov	r1, r4
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f7ff ff0b 	bl	80098a4 <__multiply>
 8009a8e:	6020      	str	r0, [r4, #0]
 8009a90:	f8c0 9000 	str.w	r9, [r0]
 8009a94:	4604      	mov	r4, r0
 8009a96:	e7e4      	b.n	8009a62 <__pow5mult+0x6a>
 8009a98:	4638      	mov	r0, r7
 8009a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a9e:	bf00      	nop
 8009aa0:	0800c200 	.word	0x0800c200
 8009aa4:	0800bfb6 	.word	0x0800bfb6
 8009aa8:	0800c0b4 	.word	0x0800c0b4

08009aac <__lshift>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	6849      	ldr	r1, [r1, #4]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	4607      	mov	r7, r0
 8009abe:	4691      	mov	r9, r2
 8009ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ac4:	f108 0601 	add.w	r6, r8, #1
 8009ac8:	42b3      	cmp	r3, r6
 8009aca:	db0b      	blt.n	8009ae4 <__lshift+0x38>
 8009acc:	4638      	mov	r0, r7
 8009ace:	f7ff fd91 	bl	80095f4 <_Balloc>
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	b948      	cbnz	r0, 8009aea <__lshift+0x3e>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	4b2a      	ldr	r3, [pc, #168]	; (8009b84 <__lshift+0xd8>)
 8009ada:	482b      	ldr	r0, [pc, #172]	; (8009b88 <__lshift+0xdc>)
 8009adc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ae0:	f000 fcd8 	bl	800a494 <__assert_func>
 8009ae4:	3101      	adds	r1, #1
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	e7ee      	b.n	8009ac8 <__lshift+0x1c>
 8009aea:	2300      	movs	r3, #0
 8009aec:	f100 0114 	add.w	r1, r0, #20
 8009af0:	f100 0210 	add.w	r2, r0, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	4553      	cmp	r3, sl
 8009af8:	db37      	blt.n	8009b6a <__lshift+0xbe>
 8009afa:	6920      	ldr	r0, [r4, #16]
 8009afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b00:	f104 0314 	add.w	r3, r4, #20
 8009b04:	f019 091f 	ands.w	r9, r9, #31
 8009b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b10:	d02f      	beq.n	8009b72 <__lshift+0xc6>
 8009b12:	f1c9 0e20 	rsb	lr, r9, #32
 8009b16:	468a      	mov	sl, r1
 8009b18:	f04f 0c00 	mov.w	ip, #0
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	fa02 f209 	lsl.w	r2, r2, r9
 8009b22:	ea42 020c 	orr.w	r2, r2, ip
 8009b26:	f84a 2b04 	str.w	r2, [sl], #4
 8009b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b2e:	4298      	cmp	r0, r3
 8009b30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009b34:	d8f2      	bhi.n	8009b1c <__lshift+0x70>
 8009b36:	1b03      	subs	r3, r0, r4
 8009b38:	3b15      	subs	r3, #21
 8009b3a:	f023 0303 	bic.w	r3, r3, #3
 8009b3e:	3304      	adds	r3, #4
 8009b40:	f104 0215 	add.w	r2, r4, #21
 8009b44:	4290      	cmp	r0, r2
 8009b46:	bf38      	it	cc
 8009b48:	2304      	movcc	r3, #4
 8009b4a:	f841 c003 	str.w	ip, [r1, r3]
 8009b4e:	f1bc 0f00 	cmp.w	ip, #0
 8009b52:	d001      	beq.n	8009b58 <__lshift+0xac>
 8009b54:	f108 0602 	add.w	r6, r8, #2
 8009b58:	3e01      	subs	r6, #1
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	612e      	str	r6, [r5, #16]
 8009b5e:	4621      	mov	r1, r4
 8009b60:	f7ff fd88 	bl	8009674 <_Bfree>
 8009b64:	4628      	mov	r0, r5
 8009b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b6e:	3301      	adds	r3, #1
 8009b70:	e7c1      	b.n	8009af6 <__lshift+0x4a>
 8009b72:	3904      	subs	r1, #4
 8009b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b78:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b7c:	4298      	cmp	r0, r3
 8009b7e:	d8f9      	bhi.n	8009b74 <__lshift+0xc8>
 8009b80:	e7ea      	b.n	8009b58 <__lshift+0xac>
 8009b82:	bf00      	nop
 8009b84:	0800c028 	.word	0x0800c028
 8009b88:	0800c0b4 	.word	0x0800c0b4

08009b8c <__mcmp>:
 8009b8c:	b530      	push	{r4, r5, lr}
 8009b8e:	6902      	ldr	r2, [r0, #16]
 8009b90:	690c      	ldr	r4, [r1, #16]
 8009b92:	1b12      	subs	r2, r2, r4
 8009b94:	d10e      	bne.n	8009bb4 <__mcmp+0x28>
 8009b96:	f100 0314 	add.w	r3, r0, #20
 8009b9a:	3114      	adds	r1, #20
 8009b9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ba0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ba4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ba8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bac:	42a5      	cmp	r5, r4
 8009bae:	d003      	beq.n	8009bb8 <__mcmp+0x2c>
 8009bb0:	d305      	bcc.n	8009bbe <__mcmp+0x32>
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	bd30      	pop	{r4, r5, pc}
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d3f3      	bcc.n	8009ba4 <__mcmp+0x18>
 8009bbc:	e7fa      	b.n	8009bb4 <__mcmp+0x28>
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	e7f7      	b.n	8009bb4 <__mcmp+0x28>

08009bc4 <__mdiff>:
 8009bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	460c      	mov	r4, r1
 8009bca:	4606      	mov	r6, r0
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4620      	mov	r0, r4
 8009bd0:	4690      	mov	r8, r2
 8009bd2:	f7ff ffdb 	bl	8009b8c <__mcmp>
 8009bd6:	1e05      	subs	r5, r0, #0
 8009bd8:	d110      	bne.n	8009bfc <__mdiff+0x38>
 8009bda:	4629      	mov	r1, r5
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7ff fd09 	bl	80095f4 <_Balloc>
 8009be2:	b930      	cbnz	r0, 8009bf2 <__mdiff+0x2e>
 8009be4:	4b3a      	ldr	r3, [pc, #232]	; (8009cd0 <__mdiff+0x10c>)
 8009be6:	4602      	mov	r2, r0
 8009be8:	f240 2132 	movw	r1, #562	; 0x232
 8009bec:	4839      	ldr	r0, [pc, #228]	; (8009cd4 <__mdiff+0x110>)
 8009bee:	f000 fc51 	bl	800a494 <__assert_func>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfc:	bfa4      	itt	ge
 8009bfe:	4643      	movge	r3, r8
 8009c00:	46a0      	movge	r8, r4
 8009c02:	4630      	mov	r0, r6
 8009c04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c08:	bfa6      	itte	ge
 8009c0a:	461c      	movge	r4, r3
 8009c0c:	2500      	movge	r5, #0
 8009c0e:	2501      	movlt	r5, #1
 8009c10:	f7ff fcf0 	bl	80095f4 <_Balloc>
 8009c14:	b920      	cbnz	r0, 8009c20 <__mdiff+0x5c>
 8009c16:	4b2e      	ldr	r3, [pc, #184]	; (8009cd0 <__mdiff+0x10c>)
 8009c18:	4602      	mov	r2, r0
 8009c1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c1e:	e7e5      	b.n	8009bec <__mdiff+0x28>
 8009c20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c24:	6926      	ldr	r6, [r4, #16]
 8009c26:	60c5      	str	r5, [r0, #12]
 8009c28:	f104 0914 	add.w	r9, r4, #20
 8009c2c:	f108 0514 	add.w	r5, r8, #20
 8009c30:	f100 0e14 	add.w	lr, r0, #20
 8009c34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c3c:	f108 0210 	add.w	r2, r8, #16
 8009c40:	46f2      	mov	sl, lr
 8009c42:	2100      	movs	r1, #0
 8009c44:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c4c:	fa1f f883 	uxth.w	r8, r3
 8009c50:	fa11 f18b 	uxtah	r1, r1, fp
 8009c54:	0c1b      	lsrs	r3, r3, #16
 8009c56:	eba1 0808 	sub.w	r8, r1, r8
 8009c5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c62:	fa1f f888 	uxth.w	r8, r8
 8009c66:	1419      	asrs	r1, r3, #16
 8009c68:	454e      	cmp	r6, r9
 8009c6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c6e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c72:	d8e7      	bhi.n	8009c44 <__mdiff+0x80>
 8009c74:	1b33      	subs	r3, r6, r4
 8009c76:	3b15      	subs	r3, #21
 8009c78:	f023 0303 	bic.w	r3, r3, #3
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	3415      	adds	r4, #21
 8009c80:	42a6      	cmp	r6, r4
 8009c82:	bf38      	it	cc
 8009c84:	2304      	movcc	r3, #4
 8009c86:	441d      	add	r5, r3
 8009c88:	4473      	add	r3, lr
 8009c8a:	469e      	mov	lr, r3
 8009c8c:	462e      	mov	r6, r5
 8009c8e:	4566      	cmp	r6, ip
 8009c90:	d30e      	bcc.n	8009cb0 <__mdiff+0xec>
 8009c92:	f10c 0203 	add.w	r2, ip, #3
 8009c96:	1b52      	subs	r2, r2, r5
 8009c98:	f022 0203 	bic.w	r2, r2, #3
 8009c9c:	3d03      	subs	r5, #3
 8009c9e:	45ac      	cmp	ip, r5
 8009ca0:	bf38      	it	cc
 8009ca2:	2200      	movcc	r2, #0
 8009ca4:	441a      	add	r2, r3
 8009ca6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009caa:	b17b      	cbz	r3, 8009ccc <__mdiff+0x108>
 8009cac:	6107      	str	r7, [r0, #16]
 8009cae:	e7a3      	b.n	8009bf8 <__mdiff+0x34>
 8009cb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cb4:	fa11 f288 	uxtah	r2, r1, r8
 8009cb8:	1414      	asrs	r4, r2, #16
 8009cba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cbe:	b292      	uxth	r2, r2
 8009cc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cc4:	f84e 2b04 	str.w	r2, [lr], #4
 8009cc8:	1421      	asrs	r1, r4, #16
 8009cca:	e7e0      	b.n	8009c8e <__mdiff+0xca>
 8009ccc:	3f01      	subs	r7, #1
 8009cce:	e7ea      	b.n	8009ca6 <__mdiff+0xe2>
 8009cd0:	0800c028 	.word	0x0800c028
 8009cd4:	0800c0b4 	.word	0x0800c0b4

08009cd8 <__ulp>:
 8009cd8:	b082      	sub	sp, #8
 8009cda:	ed8d 0b00 	vstr	d0, [sp]
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	4912      	ldr	r1, [pc, #72]	; (8009d2c <__ulp+0x54>)
 8009ce2:	4019      	ands	r1, r3
 8009ce4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009ce8:	2900      	cmp	r1, #0
 8009cea:	dd05      	ble.n	8009cf8 <__ulp+0x20>
 8009cec:	2200      	movs	r2, #0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	ec43 2b10 	vmov	d0, r2, r3
 8009cf4:	b002      	add	sp, #8
 8009cf6:	4770      	bx	lr
 8009cf8:	4249      	negs	r1, r1
 8009cfa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cfe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d02:	f04f 0200 	mov.w	r2, #0
 8009d06:	f04f 0300 	mov.w	r3, #0
 8009d0a:	da04      	bge.n	8009d16 <__ulp+0x3e>
 8009d0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d10:	fa41 f300 	asr.w	r3, r1, r0
 8009d14:	e7ec      	b.n	8009cf0 <__ulp+0x18>
 8009d16:	f1a0 0114 	sub.w	r1, r0, #20
 8009d1a:	291e      	cmp	r1, #30
 8009d1c:	bfda      	itte	le
 8009d1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d22:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d26:	2101      	movgt	r1, #1
 8009d28:	460a      	mov	r2, r1
 8009d2a:	e7e1      	b.n	8009cf0 <__ulp+0x18>
 8009d2c:	7ff00000 	.word	0x7ff00000

08009d30 <__b2d>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	6905      	ldr	r5, [r0, #16]
 8009d34:	f100 0714 	add.w	r7, r0, #20
 8009d38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d3c:	1f2e      	subs	r6, r5, #4
 8009d3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fd48 	bl	80097d8 <__hi0bits>
 8009d48:	f1c0 0320 	rsb	r3, r0, #32
 8009d4c:	280a      	cmp	r0, #10
 8009d4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009dcc <__b2d+0x9c>
 8009d52:	600b      	str	r3, [r1, #0]
 8009d54:	dc14      	bgt.n	8009d80 <__b2d+0x50>
 8009d56:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d5a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d5e:	42b7      	cmp	r7, r6
 8009d60:	ea41 030c 	orr.w	r3, r1, ip
 8009d64:	bf34      	ite	cc
 8009d66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d6a:	2100      	movcs	r1, #0
 8009d6c:	3015      	adds	r0, #21
 8009d6e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d72:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d76:	ea40 0201 	orr.w	r2, r0, r1
 8009d7a:	ec43 2b10 	vmov	d0, r2, r3
 8009d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d80:	42b7      	cmp	r7, r6
 8009d82:	bf3a      	itte	cc
 8009d84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d88:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d8c:	2100      	movcs	r1, #0
 8009d8e:	380b      	subs	r0, #11
 8009d90:	d017      	beq.n	8009dc2 <__b2d+0x92>
 8009d92:	f1c0 0c20 	rsb	ip, r0, #32
 8009d96:	fa04 f500 	lsl.w	r5, r4, r0
 8009d9a:	42be      	cmp	r6, r7
 8009d9c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009da0:	ea45 0504 	orr.w	r5, r5, r4
 8009da4:	bf8c      	ite	hi
 8009da6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009daa:	2400      	movls	r4, #0
 8009dac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009db0:	fa01 f000 	lsl.w	r0, r1, r0
 8009db4:	fa24 f40c 	lsr.w	r4, r4, ip
 8009db8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009dbc:	ea40 0204 	orr.w	r2, r0, r4
 8009dc0:	e7db      	b.n	8009d7a <__b2d+0x4a>
 8009dc2:	ea44 030c 	orr.w	r3, r4, ip
 8009dc6:	460a      	mov	r2, r1
 8009dc8:	e7d7      	b.n	8009d7a <__b2d+0x4a>
 8009dca:	bf00      	nop
 8009dcc:	3ff00000 	.word	0x3ff00000

08009dd0 <__d2b>:
 8009dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	ec57 6b10 	vmov	r6, r7, d0
 8009ddc:	4690      	mov	r8, r2
 8009dde:	f7ff fc09 	bl	80095f4 <_Balloc>
 8009de2:	4604      	mov	r4, r0
 8009de4:	b930      	cbnz	r0, 8009df4 <__d2b+0x24>
 8009de6:	4602      	mov	r2, r0
 8009de8:	4b25      	ldr	r3, [pc, #148]	; (8009e80 <__d2b+0xb0>)
 8009dea:	4826      	ldr	r0, [pc, #152]	; (8009e84 <__d2b+0xb4>)
 8009dec:	f240 310a 	movw	r1, #778	; 0x30a
 8009df0:	f000 fb50 	bl	800a494 <__assert_func>
 8009df4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009df8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009dfc:	bb35      	cbnz	r5, 8009e4c <__d2b+0x7c>
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	d028      	beq.n	8009e56 <__d2b+0x86>
 8009e04:	4668      	mov	r0, sp
 8009e06:	9600      	str	r6, [sp, #0]
 8009e08:	f7ff fd06 	bl	8009818 <__lo0bits>
 8009e0c:	9900      	ldr	r1, [sp, #0]
 8009e0e:	b300      	cbz	r0, 8009e52 <__d2b+0x82>
 8009e10:	9a01      	ldr	r2, [sp, #4]
 8009e12:	f1c0 0320 	rsb	r3, r0, #32
 8009e16:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	40c2      	lsrs	r2, r0
 8009e1e:	6163      	str	r3, [r4, #20]
 8009e20:	9201      	str	r2, [sp, #4]
 8009e22:	9b01      	ldr	r3, [sp, #4]
 8009e24:	61a3      	str	r3, [r4, #24]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bf14      	ite	ne
 8009e2a:	2202      	movne	r2, #2
 8009e2c:	2201      	moveq	r2, #1
 8009e2e:	6122      	str	r2, [r4, #16]
 8009e30:	b1d5      	cbz	r5, 8009e68 <__d2b+0x98>
 8009e32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e36:	4405      	add	r5, r0
 8009e38:	f8c9 5000 	str.w	r5, [r9]
 8009e3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e40:	f8c8 0000 	str.w	r0, [r8]
 8009e44:	4620      	mov	r0, r4
 8009e46:	b003      	add	sp, #12
 8009e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e50:	e7d5      	b.n	8009dfe <__d2b+0x2e>
 8009e52:	6161      	str	r1, [r4, #20]
 8009e54:	e7e5      	b.n	8009e22 <__d2b+0x52>
 8009e56:	a801      	add	r0, sp, #4
 8009e58:	f7ff fcde 	bl	8009818 <__lo0bits>
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	6163      	str	r3, [r4, #20]
 8009e60:	2201      	movs	r2, #1
 8009e62:	6122      	str	r2, [r4, #16]
 8009e64:	3020      	adds	r0, #32
 8009e66:	e7e3      	b.n	8009e30 <__d2b+0x60>
 8009e68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e70:	f8c9 0000 	str.w	r0, [r9]
 8009e74:	6918      	ldr	r0, [r3, #16]
 8009e76:	f7ff fcaf 	bl	80097d8 <__hi0bits>
 8009e7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e7e:	e7df      	b.n	8009e40 <__d2b+0x70>
 8009e80:	0800c028 	.word	0x0800c028
 8009e84:	0800c0b4 	.word	0x0800c0b4

08009e88 <__ratio>:
 8009e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	4688      	mov	r8, r1
 8009e8e:	4669      	mov	r1, sp
 8009e90:	4681      	mov	r9, r0
 8009e92:	f7ff ff4d 	bl	8009d30 <__b2d>
 8009e96:	a901      	add	r1, sp, #4
 8009e98:	4640      	mov	r0, r8
 8009e9a:	ec55 4b10 	vmov	r4, r5, d0
 8009e9e:	f7ff ff47 	bl	8009d30 <__b2d>
 8009ea2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009eaa:	eba3 0c02 	sub.w	ip, r3, r2
 8009eae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009eb8:	ec51 0b10 	vmov	r0, r1, d0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfd6      	itet	le
 8009ec0:	460a      	movle	r2, r1
 8009ec2:	462a      	movgt	r2, r5
 8009ec4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ec8:	468b      	mov	fp, r1
 8009eca:	462f      	mov	r7, r5
 8009ecc:	bfd4      	ite	le
 8009ece:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ed2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	ee10 2a10 	vmov	r2, s0
 8009edc:	465b      	mov	r3, fp
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fccc 	bl	800087c <__aeabi_ddiv>
 8009ee4:	ec41 0b10 	vmov	d0, r0, r1
 8009ee8:	b003      	add	sp, #12
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eee <__copybits>:
 8009eee:	3901      	subs	r1, #1
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	1149      	asrs	r1, r1, #5
 8009ef4:	6914      	ldr	r4, [r2, #16]
 8009ef6:	3101      	adds	r1, #1
 8009ef8:	f102 0314 	add.w	r3, r2, #20
 8009efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f04:	1f05      	subs	r5, r0, #4
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	d30c      	bcc.n	8009f24 <__copybits+0x36>
 8009f0a:	1aa3      	subs	r3, r4, r2
 8009f0c:	3b11      	subs	r3, #17
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	3211      	adds	r2, #17
 8009f14:	42a2      	cmp	r2, r4
 8009f16:	bf88      	it	hi
 8009f18:	2300      	movhi	r3, #0
 8009f1a:	4418      	add	r0, r3
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4288      	cmp	r0, r1
 8009f20:	d305      	bcc.n	8009f2e <__copybits+0x40>
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f28:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f2c:	e7eb      	b.n	8009f06 <__copybits+0x18>
 8009f2e:	f840 3b04 	str.w	r3, [r0], #4
 8009f32:	e7f4      	b.n	8009f1e <__copybits+0x30>

08009f34 <__any_on>:
 8009f34:	f100 0214 	add.w	r2, r0, #20
 8009f38:	6900      	ldr	r0, [r0, #16]
 8009f3a:	114b      	asrs	r3, r1, #5
 8009f3c:	4298      	cmp	r0, r3
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	db11      	blt.n	8009f66 <__any_on+0x32>
 8009f42:	dd0a      	ble.n	8009f5a <__any_on+0x26>
 8009f44:	f011 011f 	ands.w	r1, r1, #31
 8009f48:	d007      	beq.n	8009f5a <__any_on+0x26>
 8009f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f4e:	fa24 f001 	lsr.w	r0, r4, r1
 8009f52:	fa00 f101 	lsl.w	r1, r0, r1
 8009f56:	428c      	cmp	r4, r1
 8009f58:	d10b      	bne.n	8009f72 <__any_on+0x3e>
 8009f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d803      	bhi.n	8009f6a <__any_on+0x36>
 8009f62:	2000      	movs	r0, #0
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	4603      	mov	r3, r0
 8009f68:	e7f7      	b.n	8009f5a <__any_on+0x26>
 8009f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d0f5      	beq.n	8009f5e <__any_on+0x2a>
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7f6      	b.n	8009f64 <__any_on+0x30>

08009f76 <_calloc_r>:
 8009f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f78:	fba1 2402 	umull	r2, r4, r1, r2
 8009f7c:	b94c      	cbnz	r4, 8009f92 <_calloc_r+0x1c>
 8009f7e:	4611      	mov	r1, r2
 8009f80:	9201      	str	r2, [sp, #4]
 8009f82:	f000 f87b 	bl	800a07c <_malloc_r>
 8009f86:	9a01      	ldr	r2, [sp, #4]
 8009f88:	4605      	mov	r5, r0
 8009f8a:	b930      	cbnz	r0, 8009f9a <_calloc_r+0x24>
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	b003      	add	sp, #12
 8009f90:	bd30      	pop	{r4, r5, pc}
 8009f92:	220c      	movs	r2, #12
 8009f94:	6002      	str	r2, [r0, #0]
 8009f96:	2500      	movs	r5, #0
 8009f98:	e7f8      	b.n	8009f8c <_calloc_r+0x16>
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	f7fc fbbe 	bl	800671c <memset>
 8009fa0:	e7f4      	b.n	8009f8c <_calloc_r+0x16>
	...

08009fa4 <_free_r>:
 8009fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fa6:	2900      	cmp	r1, #0
 8009fa8:	d044      	beq.n	800a034 <_free_r+0x90>
 8009faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fae:	9001      	str	r0, [sp, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8009fb6:	bfb8      	it	lt
 8009fb8:	18e4      	addlt	r4, r4, r3
 8009fba:	f000 fab5 	bl	800a528 <__malloc_lock>
 8009fbe:	4a1e      	ldr	r2, [pc, #120]	; (800a038 <_free_r+0x94>)
 8009fc0:	9801      	ldr	r0, [sp, #4]
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	b933      	cbnz	r3, 8009fd4 <_free_r+0x30>
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6014      	str	r4, [r2, #0]
 8009fca:	b003      	add	sp, #12
 8009fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fd0:	f000 bab0 	b.w	800a534 <__malloc_unlock>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d908      	bls.n	8009fea <_free_r+0x46>
 8009fd8:	6825      	ldr	r5, [r4, #0]
 8009fda:	1961      	adds	r1, r4, r5
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf01      	itttt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	1949      	addeq	r1, r1, r5
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	e7ed      	b.n	8009fc6 <_free_r+0x22>
 8009fea:	461a      	mov	r2, r3
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b10b      	cbz	r3, 8009ff4 <_free_r+0x50>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d9fa      	bls.n	8009fea <_free_r+0x46>
 8009ff4:	6811      	ldr	r1, [r2, #0]
 8009ff6:	1855      	adds	r5, r2, r1
 8009ff8:	42a5      	cmp	r5, r4
 8009ffa:	d10b      	bne.n	800a014 <_free_r+0x70>
 8009ffc:	6824      	ldr	r4, [r4, #0]
 8009ffe:	4421      	add	r1, r4
 800a000:	1854      	adds	r4, r2, r1
 800a002:	42a3      	cmp	r3, r4
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	d1e0      	bne.n	8009fca <_free_r+0x26>
 800a008:	681c      	ldr	r4, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	6053      	str	r3, [r2, #4]
 800a00e:	4421      	add	r1, r4
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	e7da      	b.n	8009fca <_free_r+0x26>
 800a014:	d902      	bls.n	800a01c <_free_r+0x78>
 800a016:	230c      	movs	r3, #12
 800a018:	6003      	str	r3, [r0, #0]
 800a01a:	e7d6      	b.n	8009fca <_free_r+0x26>
 800a01c:	6825      	ldr	r5, [r4, #0]
 800a01e:	1961      	adds	r1, r4, r5
 800a020:	428b      	cmp	r3, r1
 800a022:	bf04      	itt	eq
 800a024:	6819      	ldreq	r1, [r3, #0]
 800a026:	685b      	ldreq	r3, [r3, #4]
 800a028:	6063      	str	r3, [r4, #4]
 800a02a:	bf04      	itt	eq
 800a02c:	1949      	addeq	r1, r1, r5
 800a02e:	6021      	streq	r1, [r4, #0]
 800a030:	6054      	str	r4, [r2, #4]
 800a032:	e7ca      	b.n	8009fca <_free_r+0x26>
 800a034:	b003      	add	sp, #12
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	2000088c 	.word	0x2000088c

0800a03c <sbrk_aligned>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	4e0e      	ldr	r6, [pc, #56]	; (800a078 <sbrk_aligned+0x3c>)
 800a040:	460c      	mov	r4, r1
 800a042:	6831      	ldr	r1, [r6, #0]
 800a044:	4605      	mov	r5, r0
 800a046:	b911      	cbnz	r1, 800a04e <sbrk_aligned+0x12>
 800a048:	f000 f9f2 	bl	800a430 <_sbrk_r>
 800a04c:	6030      	str	r0, [r6, #0]
 800a04e:	4621      	mov	r1, r4
 800a050:	4628      	mov	r0, r5
 800a052:	f000 f9ed 	bl	800a430 <_sbrk_r>
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	d00a      	beq.n	800a070 <sbrk_aligned+0x34>
 800a05a:	1cc4      	adds	r4, r0, #3
 800a05c:	f024 0403 	bic.w	r4, r4, #3
 800a060:	42a0      	cmp	r0, r4
 800a062:	d007      	beq.n	800a074 <sbrk_aligned+0x38>
 800a064:	1a21      	subs	r1, r4, r0
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f9e2 	bl	800a430 <_sbrk_r>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d101      	bne.n	800a074 <sbrk_aligned+0x38>
 800a070:	f04f 34ff 	mov.w	r4, #4294967295
 800a074:	4620      	mov	r0, r4
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	20000890 	.word	0x20000890

0800a07c <_malloc_r>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	1ccd      	adds	r5, r1, #3
 800a082:	f025 0503 	bic.w	r5, r5, #3
 800a086:	3508      	adds	r5, #8
 800a088:	2d0c      	cmp	r5, #12
 800a08a:	bf38      	it	cc
 800a08c:	250c      	movcc	r5, #12
 800a08e:	2d00      	cmp	r5, #0
 800a090:	4607      	mov	r7, r0
 800a092:	db01      	blt.n	800a098 <_malloc_r+0x1c>
 800a094:	42a9      	cmp	r1, r5
 800a096:	d905      	bls.n	800a0a4 <_malloc_r+0x28>
 800a098:	230c      	movs	r3, #12
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	2600      	movs	r6, #0
 800a09e:	4630      	mov	r0, r6
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	4e2e      	ldr	r6, [pc, #184]	; (800a160 <_malloc_r+0xe4>)
 800a0a6:	f000 fa3f 	bl	800a528 <__malloc_lock>
 800a0aa:	6833      	ldr	r3, [r6, #0]
 800a0ac:	461c      	mov	r4, r3
 800a0ae:	bb34      	cbnz	r4, 800a0fe <_malloc_r+0x82>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	f7ff ffc2 	bl	800a03c <sbrk_aligned>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	4604      	mov	r4, r0
 800a0bc:	d14d      	bne.n	800a15a <_malloc_r+0xde>
 800a0be:	6834      	ldr	r4, [r6, #0]
 800a0c0:	4626      	mov	r6, r4
 800a0c2:	2e00      	cmp	r6, #0
 800a0c4:	d140      	bne.n	800a148 <_malloc_r+0xcc>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	eb04 0803 	add.w	r8, r4, r3
 800a0d0:	f000 f9ae 	bl	800a430 <_sbrk_r>
 800a0d4:	4580      	cmp	r8, r0
 800a0d6:	d13a      	bne.n	800a14e <_malloc_r+0xd2>
 800a0d8:	6821      	ldr	r1, [r4, #0]
 800a0da:	3503      	adds	r5, #3
 800a0dc:	1a6d      	subs	r5, r5, r1
 800a0de:	f025 0503 	bic.w	r5, r5, #3
 800a0e2:	3508      	adds	r5, #8
 800a0e4:	2d0c      	cmp	r5, #12
 800a0e6:	bf38      	it	cc
 800a0e8:	250c      	movcc	r5, #12
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ffa5 	bl	800a03c <sbrk_aligned>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d02b      	beq.n	800a14e <_malloc_r+0xd2>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	442b      	add	r3, r5
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	e00e      	b.n	800a11c <_malloc_r+0xa0>
 800a0fe:	6822      	ldr	r2, [r4, #0]
 800a100:	1b52      	subs	r2, r2, r5
 800a102:	d41e      	bmi.n	800a142 <_malloc_r+0xc6>
 800a104:	2a0b      	cmp	r2, #11
 800a106:	d916      	bls.n	800a136 <_malloc_r+0xba>
 800a108:	1961      	adds	r1, r4, r5
 800a10a:	42a3      	cmp	r3, r4
 800a10c:	6025      	str	r5, [r4, #0]
 800a10e:	bf18      	it	ne
 800a110:	6059      	strne	r1, [r3, #4]
 800a112:	6863      	ldr	r3, [r4, #4]
 800a114:	bf08      	it	eq
 800a116:	6031      	streq	r1, [r6, #0]
 800a118:	5162      	str	r2, [r4, r5]
 800a11a:	604b      	str	r3, [r1, #4]
 800a11c:	4638      	mov	r0, r7
 800a11e:	f104 060b 	add.w	r6, r4, #11
 800a122:	f000 fa07 	bl	800a534 <__malloc_unlock>
 800a126:	f026 0607 	bic.w	r6, r6, #7
 800a12a:	1d23      	adds	r3, r4, #4
 800a12c:	1af2      	subs	r2, r6, r3
 800a12e:	d0b6      	beq.n	800a09e <_malloc_r+0x22>
 800a130:	1b9b      	subs	r3, r3, r6
 800a132:	50a3      	str	r3, [r4, r2]
 800a134:	e7b3      	b.n	800a09e <_malloc_r+0x22>
 800a136:	6862      	ldr	r2, [r4, #4]
 800a138:	42a3      	cmp	r3, r4
 800a13a:	bf0c      	ite	eq
 800a13c:	6032      	streq	r2, [r6, #0]
 800a13e:	605a      	strne	r2, [r3, #4]
 800a140:	e7ec      	b.n	800a11c <_malloc_r+0xa0>
 800a142:	4623      	mov	r3, r4
 800a144:	6864      	ldr	r4, [r4, #4]
 800a146:	e7b2      	b.n	800a0ae <_malloc_r+0x32>
 800a148:	4634      	mov	r4, r6
 800a14a:	6876      	ldr	r6, [r6, #4]
 800a14c:	e7b9      	b.n	800a0c2 <_malloc_r+0x46>
 800a14e:	230c      	movs	r3, #12
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	4638      	mov	r0, r7
 800a154:	f000 f9ee 	bl	800a534 <__malloc_unlock>
 800a158:	e7a1      	b.n	800a09e <_malloc_r+0x22>
 800a15a:	6025      	str	r5, [r4, #0]
 800a15c:	e7de      	b.n	800a11c <_malloc_r+0xa0>
 800a15e:	bf00      	nop
 800a160:	2000088c 	.word	0x2000088c

0800a164 <__ssputs_r>:
 800a164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a168:	688e      	ldr	r6, [r1, #8]
 800a16a:	429e      	cmp	r6, r3
 800a16c:	4682      	mov	sl, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	4690      	mov	r8, r2
 800a172:	461f      	mov	r7, r3
 800a174:	d838      	bhi.n	800a1e8 <__ssputs_r+0x84>
 800a176:	898a      	ldrh	r2, [r1, #12]
 800a178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a17c:	d032      	beq.n	800a1e4 <__ssputs_r+0x80>
 800a17e:	6825      	ldr	r5, [r4, #0]
 800a180:	6909      	ldr	r1, [r1, #16]
 800a182:	eba5 0901 	sub.w	r9, r5, r1
 800a186:	6965      	ldr	r5, [r4, #20]
 800a188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a18c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a190:	3301      	adds	r3, #1
 800a192:	444b      	add	r3, r9
 800a194:	106d      	asrs	r5, r5, #1
 800a196:	429d      	cmp	r5, r3
 800a198:	bf38      	it	cc
 800a19a:	461d      	movcc	r5, r3
 800a19c:	0553      	lsls	r3, r2, #21
 800a19e:	d531      	bpl.n	800a204 <__ssputs_r+0xa0>
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7ff ff6b 	bl	800a07c <_malloc_r>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	b950      	cbnz	r0, 800a1c0 <__ssputs_r+0x5c>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	f8ca 3000 	str.w	r3, [sl]
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c0:	6921      	ldr	r1, [r4, #16]
 800a1c2:	464a      	mov	r2, r9
 800a1c4:	f7ff fa08 	bl	80095d8 <memcpy>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	6126      	str	r6, [r4, #16]
 800a1d6:	6165      	str	r5, [r4, #20]
 800a1d8:	444e      	add	r6, r9
 800a1da:	eba5 0509 	sub.w	r5, r5, r9
 800a1de:	6026      	str	r6, [r4, #0]
 800a1e0:	60a5      	str	r5, [r4, #8]
 800a1e2:	463e      	mov	r6, r7
 800a1e4:	42be      	cmp	r6, r7
 800a1e6:	d900      	bls.n	800a1ea <__ssputs_r+0x86>
 800a1e8:	463e      	mov	r6, r7
 800a1ea:	6820      	ldr	r0, [r4, #0]
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	f000 f980 	bl	800a4f4 <memmove>
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	1b9b      	subs	r3, r3, r6
 800a1f8:	60a3      	str	r3, [r4, #8]
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	4433      	add	r3, r6
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	2000      	movs	r0, #0
 800a202:	e7db      	b.n	800a1bc <__ssputs_r+0x58>
 800a204:	462a      	mov	r2, r5
 800a206:	f000 f99b 	bl	800a540 <_realloc_r>
 800a20a:	4606      	mov	r6, r0
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d1e1      	bne.n	800a1d4 <__ssputs_r+0x70>
 800a210:	6921      	ldr	r1, [r4, #16]
 800a212:	4650      	mov	r0, sl
 800a214:	f7ff fec6 	bl	8009fa4 <_free_r>
 800a218:	e7c7      	b.n	800a1aa <__ssputs_r+0x46>
	...

0800a21c <_svfiprintf_r>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	4698      	mov	r8, r3
 800a222:	898b      	ldrh	r3, [r1, #12]
 800a224:	061b      	lsls	r3, r3, #24
 800a226:	b09d      	sub	sp, #116	; 0x74
 800a228:	4607      	mov	r7, r0
 800a22a:	460d      	mov	r5, r1
 800a22c:	4614      	mov	r4, r2
 800a22e:	d50e      	bpl.n	800a24e <_svfiprintf_r+0x32>
 800a230:	690b      	ldr	r3, [r1, #16]
 800a232:	b963      	cbnz	r3, 800a24e <_svfiprintf_r+0x32>
 800a234:	2140      	movs	r1, #64	; 0x40
 800a236:	f7ff ff21 	bl	800a07c <_malloc_r>
 800a23a:	6028      	str	r0, [r5, #0]
 800a23c:	6128      	str	r0, [r5, #16]
 800a23e:	b920      	cbnz	r0, 800a24a <_svfiprintf_r+0x2e>
 800a240:	230c      	movs	r3, #12
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	f04f 30ff 	mov.w	r0, #4294967295
 800a248:	e0d1      	b.n	800a3ee <_svfiprintf_r+0x1d2>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	616b      	str	r3, [r5, #20]
 800a24e:	2300      	movs	r3, #0
 800a250:	9309      	str	r3, [sp, #36]	; 0x24
 800a252:	2320      	movs	r3, #32
 800a254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a258:	f8cd 800c 	str.w	r8, [sp, #12]
 800a25c:	2330      	movs	r3, #48	; 0x30
 800a25e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a408 <_svfiprintf_r+0x1ec>
 800a262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a266:	f04f 0901 	mov.w	r9, #1
 800a26a:	4623      	mov	r3, r4
 800a26c:	469a      	mov	sl, r3
 800a26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a272:	b10a      	cbz	r2, 800a278 <_svfiprintf_r+0x5c>
 800a274:	2a25      	cmp	r2, #37	; 0x25
 800a276:	d1f9      	bne.n	800a26c <_svfiprintf_r+0x50>
 800a278:	ebba 0b04 	subs.w	fp, sl, r4
 800a27c:	d00b      	beq.n	800a296 <_svfiprintf_r+0x7a>
 800a27e:	465b      	mov	r3, fp
 800a280:	4622      	mov	r2, r4
 800a282:	4629      	mov	r1, r5
 800a284:	4638      	mov	r0, r7
 800a286:	f7ff ff6d 	bl	800a164 <__ssputs_r>
 800a28a:	3001      	adds	r0, #1
 800a28c:	f000 80aa 	beq.w	800a3e4 <_svfiprintf_r+0x1c8>
 800a290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a292:	445a      	add	r2, fp
 800a294:	9209      	str	r2, [sp, #36]	; 0x24
 800a296:	f89a 3000 	ldrb.w	r3, [sl]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 80a2 	beq.w	800a3e4 <_svfiprintf_r+0x1c8>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2aa:	f10a 0a01 	add.w	sl, sl, #1
 800a2ae:	9304      	str	r3, [sp, #16]
 800a2b0:	9307      	str	r3, [sp, #28]
 800a2b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2b6:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b8:	4654      	mov	r4, sl
 800a2ba:	2205      	movs	r2, #5
 800a2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c0:	4851      	ldr	r0, [pc, #324]	; (800a408 <_svfiprintf_r+0x1ec>)
 800a2c2:	f7f5 ffa5 	bl	8000210 <memchr>
 800a2c6:	9a04      	ldr	r2, [sp, #16]
 800a2c8:	b9d8      	cbnz	r0, 800a302 <_svfiprintf_r+0xe6>
 800a2ca:	06d0      	lsls	r0, r2, #27
 800a2cc:	bf44      	itt	mi
 800a2ce:	2320      	movmi	r3, #32
 800a2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d4:	0711      	lsls	r1, r2, #28
 800a2d6:	bf44      	itt	mi
 800a2d8:	232b      	movmi	r3, #43	; 0x2b
 800a2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2de:	f89a 3000 	ldrb.w	r3, [sl]
 800a2e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a2e4:	d015      	beq.n	800a312 <_svfiprintf_r+0xf6>
 800a2e6:	9a07      	ldr	r2, [sp, #28]
 800a2e8:	4654      	mov	r4, sl
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f04f 0c0a 	mov.w	ip, #10
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2f6:	3b30      	subs	r3, #48	; 0x30
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d94e      	bls.n	800a39a <_svfiprintf_r+0x17e>
 800a2fc:	b1b0      	cbz	r0, 800a32c <_svfiprintf_r+0x110>
 800a2fe:	9207      	str	r2, [sp, #28]
 800a300:	e014      	b.n	800a32c <_svfiprintf_r+0x110>
 800a302:	eba0 0308 	sub.w	r3, r0, r8
 800a306:	fa09 f303 	lsl.w	r3, r9, r3
 800a30a:	4313      	orrs	r3, r2
 800a30c:	9304      	str	r3, [sp, #16]
 800a30e:	46a2      	mov	sl, r4
 800a310:	e7d2      	b.n	800a2b8 <_svfiprintf_r+0x9c>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	1d19      	adds	r1, r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	9103      	str	r1, [sp, #12]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	bfbb      	ittet	lt
 800a31e:	425b      	neglt	r3, r3
 800a320:	f042 0202 	orrlt.w	r2, r2, #2
 800a324:	9307      	strge	r3, [sp, #28]
 800a326:	9307      	strlt	r3, [sp, #28]
 800a328:	bfb8      	it	lt
 800a32a:	9204      	strlt	r2, [sp, #16]
 800a32c:	7823      	ldrb	r3, [r4, #0]
 800a32e:	2b2e      	cmp	r3, #46	; 0x2e
 800a330:	d10c      	bne.n	800a34c <_svfiprintf_r+0x130>
 800a332:	7863      	ldrb	r3, [r4, #1]
 800a334:	2b2a      	cmp	r3, #42	; 0x2a
 800a336:	d135      	bne.n	800a3a4 <_svfiprintf_r+0x188>
 800a338:	9b03      	ldr	r3, [sp, #12]
 800a33a:	1d1a      	adds	r2, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	9203      	str	r2, [sp, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfb8      	it	lt
 800a344:	f04f 33ff 	movlt.w	r3, #4294967295
 800a348:	3402      	adds	r4, #2
 800a34a:	9305      	str	r3, [sp, #20]
 800a34c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a418 <_svfiprintf_r+0x1fc>
 800a350:	7821      	ldrb	r1, [r4, #0]
 800a352:	2203      	movs	r2, #3
 800a354:	4650      	mov	r0, sl
 800a356:	f7f5 ff5b 	bl	8000210 <memchr>
 800a35a:	b140      	cbz	r0, 800a36e <_svfiprintf_r+0x152>
 800a35c:	2340      	movs	r3, #64	; 0x40
 800a35e:	eba0 000a 	sub.w	r0, r0, sl
 800a362:	fa03 f000 	lsl.w	r0, r3, r0
 800a366:	9b04      	ldr	r3, [sp, #16]
 800a368:	4303      	orrs	r3, r0
 800a36a:	3401      	adds	r4, #1
 800a36c:	9304      	str	r3, [sp, #16]
 800a36e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a372:	4826      	ldr	r0, [pc, #152]	; (800a40c <_svfiprintf_r+0x1f0>)
 800a374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a378:	2206      	movs	r2, #6
 800a37a:	f7f5 ff49 	bl	8000210 <memchr>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d038      	beq.n	800a3f4 <_svfiprintf_r+0x1d8>
 800a382:	4b23      	ldr	r3, [pc, #140]	; (800a410 <_svfiprintf_r+0x1f4>)
 800a384:	bb1b      	cbnz	r3, 800a3ce <_svfiprintf_r+0x1b2>
 800a386:	9b03      	ldr	r3, [sp, #12]
 800a388:	3307      	adds	r3, #7
 800a38a:	f023 0307 	bic.w	r3, r3, #7
 800a38e:	3308      	adds	r3, #8
 800a390:	9303      	str	r3, [sp, #12]
 800a392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a394:	4433      	add	r3, r6
 800a396:	9309      	str	r3, [sp, #36]	; 0x24
 800a398:	e767      	b.n	800a26a <_svfiprintf_r+0x4e>
 800a39a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a39e:	460c      	mov	r4, r1
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7a5      	b.n	800a2f0 <_svfiprintf_r+0xd4>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	3401      	adds	r4, #1
 800a3a8:	9305      	str	r3, [sp, #20]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3b6:	3a30      	subs	r2, #48	; 0x30
 800a3b8:	2a09      	cmp	r2, #9
 800a3ba:	d903      	bls.n	800a3c4 <_svfiprintf_r+0x1a8>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0c5      	beq.n	800a34c <_svfiprintf_r+0x130>
 800a3c0:	9105      	str	r1, [sp, #20]
 800a3c2:	e7c3      	b.n	800a34c <_svfiprintf_r+0x130>
 800a3c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e7f0      	b.n	800a3b0 <_svfiprintf_r+0x194>
 800a3ce:	ab03      	add	r3, sp, #12
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	462a      	mov	r2, r5
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <_svfiprintf_r+0x1f8>)
 800a3d6:	a904      	add	r1, sp, #16
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7fc fa47 	bl	800686c <_printf_float>
 800a3de:	1c42      	adds	r2, r0, #1
 800a3e0:	4606      	mov	r6, r0
 800a3e2:	d1d6      	bne.n	800a392 <_svfiprintf_r+0x176>
 800a3e4:	89ab      	ldrh	r3, [r5, #12]
 800a3e6:	065b      	lsls	r3, r3, #25
 800a3e8:	f53f af2c 	bmi.w	800a244 <_svfiprintf_r+0x28>
 800a3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ee:	b01d      	add	sp, #116	; 0x74
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	ab03      	add	r3, sp, #12
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4b06      	ldr	r3, [pc, #24]	; (800a414 <_svfiprintf_r+0x1f8>)
 800a3fc:	a904      	add	r1, sp, #16
 800a3fe:	4638      	mov	r0, r7
 800a400:	f7fc fcd8 	bl	8006db4 <_printf_i>
 800a404:	e7eb      	b.n	800a3de <_svfiprintf_r+0x1c2>
 800a406:	bf00      	nop
 800a408:	0800c20c 	.word	0x0800c20c
 800a40c:	0800c216 	.word	0x0800c216
 800a410:	0800686d 	.word	0x0800686d
 800a414:	0800a165 	.word	0x0800a165
 800a418:	0800c212 	.word	0x0800c212
 800a41c:	00000000 	.word	0x00000000

0800a420 <nan>:
 800a420:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a428 <nan+0x8>
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	00000000 	.word	0x00000000
 800a42c:	7ff80000 	.word	0x7ff80000

0800a430 <_sbrk_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4d06      	ldr	r5, [pc, #24]	; (800a44c <_sbrk_r+0x1c>)
 800a434:	2300      	movs	r3, #0
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	602b      	str	r3, [r5, #0]
 800a43c:	f7f8 fa9a 	bl	8002974 <_sbrk>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_sbrk_r+0x1a>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_sbrk_r+0x1a>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	20000894 	.word	0x20000894

0800a450 <strncmp>:
 800a450:	b510      	push	{r4, lr}
 800a452:	b17a      	cbz	r2, 800a474 <strncmp+0x24>
 800a454:	4603      	mov	r3, r0
 800a456:	3901      	subs	r1, #1
 800a458:	1884      	adds	r4, r0, r2
 800a45a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a45e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a462:	4290      	cmp	r0, r2
 800a464:	d101      	bne.n	800a46a <strncmp+0x1a>
 800a466:	42a3      	cmp	r3, r4
 800a468:	d101      	bne.n	800a46e <strncmp+0x1e>
 800a46a:	1a80      	subs	r0, r0, r2
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	2800      	cmp	r0, #0
 800a470:	d1f3      	bne.n	800a45a <strncmp+0xa>
 800a472:	e7fa      	b.n	800a46a <strncmp+0x1a>
 800a474:	4610      	mov	r0, r2
 800a476:	e7f9      	b.n	800a46c <strncmp+0x1c>

0800a478 <__ascii_wctomb>:
 800a478:	b149      	cbz	r1, 800a48e <__ascii_wctomb+0x16>
 800a47a:	2aff      	cmp	r2, #255	; 0xff
 800a47c:	bf85      	ittet	hi
 800a47e:	238a      	movhi	r3, #138	; 0x8a
 800a480:	6003      	strhi	r3, [r0, #0]
 800a482:	700a      	strbls	r2, [r1, #0]
 800a484:	f04f 30ff 	movhi.w	r0, #4294967295
 800a488:	bf98      	it	ls
 800a48a:	2001      	movls	r0, #1
 800a48c:	4770      	bx	lr
 800a48e:	4608      	mov	r0, r1
 800a490:	4770      	bx	lr
	...

0800a494 <__assert_func>:
 800a494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a496:	4614      	mov	r4, r2
 800a498:	461a      	mov	r2, r3
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <__assert_func+0x2c>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	4605      	mov	r5, r0
 800a4a0:	68d8      	ldr	r0, [r3, #12]
 800a4a2:	b14c      	cbz	r4, 800a4b8 <__assert_func+0x24>
 800a4a4:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <__assert_func+0x30>)
 800a4a6:	9100      	str	r1, [sp, #0]
 800a4a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4ac:	4906      	ldr	r1, [pc, #24]	; (800a4c8 <__assert_func+0x34>)
 800a4ae:	462b      	mov	r3, r5
 800a4b0:	f000 f80e 	bl	800a4d0 <fiprintf>
 800a4b4:	f000 fa8c 	bl	800a9d0 <abort>
 800a4b8:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <__assert_func+0x38>)
 800a4ba:	461c      	mov	r4, r3
 800a4bc:	e7f3      	b.n	800a4a6 <__assert_func+0x12>
 800a4be:	bf00      	nop
 800a4c0:	20000030 	.word	0x20000030
 800a4c4:	0800c21d 	.word	0x0800c21d
 800a4c8:	0800c22a 	.word	0x0800c22a
 800a4cc:	0800c258 	.word	0x0800c258

0800a4d0 <fiprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b503      	push	{r0, r1, lr}
 800a4d4:	4601      	mov	r1, r0
 800a4d6:	ab03      	add	r3, sp, #12
 800a4d8:	4805      	ldr	r0, [pc, #20]	; (800a4f0 <fiprintf+0x20>)
 800a4da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	f000 f885 	bl	800a5f0 <_vfiprintf_r>
 800a4e6:	b002      	add	sp, #8
 800a4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ec:	b003      	add	sp, #12
 800a4ee:	4770      	bx	lr
 800a4f0:	20000030 	.word	0x20000030

0800a4f4 <memmove>:
 800a4f4:	4288      	cmp	r0, r1
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	eb01 0402 	add.w	r4, r1, r2
 800a4fc:	d902      	bls.n	800a504 <memmove+0x10>
 800a4fe:	4284      	cmp	r4, r0
 800a500:	4623      	mov	r3, r4
 800a502:	d807      	bhi.n	800a514 <memmove+0x20>
 800a504:	1e43      	subs	r3, r0, #1
 800a506:	42a1      	cmp	r1, r4
 800a508:	d008      	beq.n	800a51c <memmove+0x28>
 800a50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a512:	e7f8      	b.n	800a506 <memmove+0x12>
 800a514:	4402      	add	r2, r0
 800a516:	4601      	mov	r1, r0
 800a518:	428a      	cmp	r2, r1
 800a51a:	d100      	bne.n	800a51e <memmove+0x2a>
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a526:	e7f7      	b.n	800a518 <memmove+0x24>

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_lock+0x8>)
 800a52a:	f000 bc11 	b.w	800ad50 <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	20000898 	.word	0x20000898

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__malloc_unlock+0x8>)
 800a536:	f000 bc0c 	b.w	800ad52 <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	20000898 	.word	0x20000898

0800a540 <_realloc_r>:
 800a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a544:	4680      	mov	r8, r0
 800a546:	4614      	mov	r4, r2
 800a548:	460e      	mov	r6, r1
 800a54a:	b921      	cbnz	r1, 800a556 <_realloc_r+0x16>
 800a54c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	4611      	mov	r1, r2
 800a552:	f7ff bd93 	b.w	800a07c <_malloc_r>
 800a556:	b92a      	cbnz	r2, 800a564 <_realloc_r+0x24>
 800a558:	f7ff fd24 	bl	8009fa4 <_free_r>
 800a55c:	4625      	mov	r5, r4
 800a55e:	4628      	mov	r0, r5
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	f000 fc5c 	bl	800ae20 <_malloc_usable_size_r>
 800a568:	4284      	cmp	r4, r0
 800a56a:	4607      	mov	r7, r0
 800a56c:	d802      	bhi.n	800a574 <_realloc_r+0x34>
 800a56e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a572:	d812      	bhi.n	800a59a <_realloc_r+0x5a>
 800a574:	4621      	mov	r1, r4
 800a576:	4640      	mov	r0, r8
 800a578:	f7ff fd80 	bl	800a07c <_malloc_r>
 800a57c:	4605      	mov	r5, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0ed      	beq.n	800a55e <_realloc_r+0x1e>
 800a582:	42bc      	cmp	r4, r7
 800a584:	4622      	mov	r2, r4
 800a586:	4631      	mov	r1, r6
 800a588:	bf28      	it	cs
 800a58a:	463a      	movcs	r2, r7
 800a58c:	f7ff f824 	bl	80095d8 <memcpy>
 800a590:	4631      	mov	r1, r6
 800a592:	4640      	mov	r0, r8
 800a594:	f7ff fd06 	bl	8009fa4 <_free_r>
 800a598:	e7e1      	b.n	800a55e <_realloc_r+0x1e>
 800a59a:	4635      	mov	r5, r6
 800a59c:	e7df      	b.n	800a55e <_realloc_r+0x1e>

0800a59e <__sfputc_r>:
 800a59e:	6893      	ldr	r3, [r2, #8]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	b410      	push	{r4}
 800a5a6:	6093      	str	r3, [r2, #8]
 800a5a8:	da08      	bge.n	800a5bc <__sfputc_r+0x1e>
 800a5aa:	6994      	ldr	r4, [r2, #24]
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	db01      	blt.n	800a5b4 <__sfputc_r+0x16>
 800a5b0:	290a      	cmp	r1, #10
 800a5b2:	d103      	bne.n	800a5bc <__sfputc_r+0x1e>
 800a5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b8:	f000 b94a 	b.w	800a850 <__swbuf_r>
 800a5bc:	6813      	ldr	r3, [r2, #0]
 800a5be:	1c58      	adds	r0, r3, #1
 800a5c0:	6010      	str	r0, [r2, #0]
 800a5c2:	7019      	strb	r1, [r3, #0]
 800a5c4:	4608      	mov	r0, r1
 800a5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <__sfputs_r>:
 800a5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	4614      	mov	r4, r2
 800a5d4:	18d5      	adds	r5, r2, r3
 800a5d6:	42ac      	cmp	r4, r5
 800a5d8:	d101      	bne.n	800a5de <__sfputs_r+0x12>
 800a5da:	2000      	movs	r0, #0
 800a5dc:	e007      	b.n	800a5ee <__sfputs_r+0x22>
 800a5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e2:	463a      	mov	r2, r7
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f7ff ffda 	bl	800a59e <__sfputc_r>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d1f3      	bne.n	800a5d6 <__sfputs_r+0xa>
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5f0 <_vfiprintf_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	460d      	mov	r5, r1
 800a5f6:	b09d      	sub	sp, #116	; 0x74
 800a5f8:	4614      	mov	r4, r2
 800a5fa:	4698      	mov	r8, r3
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	b118      	cbz	r0, 800a608 <_vfiprintf_r+0x18>
 800a600:	6983      	ldr	r3, [r0, #24]
 800a602:	b90b      	cbnz	r3, 800a608 <_vfiprintf_r+0x18>
 800a604:	f000 fb06 	bl	800ac14 <__sinit>
 800a608:	4b89      	ldr	r3, [pc, #548]	; (800a830 <_vfiprintf_r+0x240>)
 800a60a:	429d      	cmp	r5, r3
 800a60c:	d11b      	bne.n	800a646 <_vfiprintf_r+0x56>
 800a60e:	6875      	ldr	r5, [r6, #4]
 800a610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a612:	07d9      	lsls	r1, r3, #31
 800a614:	d405      	bmi.n	800a622 <_vfiprintf_r+0x32>
 800a616:	89ab      	ldrh	r3, [r5, #12]
 800a618:	059a      	lsls	r2, r3, #22
 800a61a:	d402      	bmi.n	800a622 <_vfiprintf_r+0x32>
 800a61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a61e:	f000 fb97 	bl	800ad50 <__retarget_lock_acquire_recursive>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	071b      	lsls	r3, r3, #28
 800a626:	d501      	bpl.n	800a62c <_vfiprintf_r+0x3c>
 800a628:	692b      	ldr	r3, [r5, #16]
 800a62a:	b9eb      	cbnz	r3, 800a668 <_vfiprintf_r+0x78>
 800a62c:	4629      	mov	r1, r5
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f960 	bl	800a8f4 <__swsetup_r>
 800a634:	b1c0      	cbz	r0, 800a668 <_vfiprintf_r+0x78>
 800a636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a638:	07dc      	lsls	r4, r3, #31
 800a63a:	d50e      	bpl.n	800a65a <_vfiprintf_r+0x6a>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295
 800a640:	b01d      	add	sp, #116	; 0x74
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	4b7b      	ldr	r3, [pc, #492]	; (800a834 <_vfiprintf_r+0x244>)
 800a648:	429d      	cmp	r5, r3
 800a64a:	d101      	bne.n	800a650 <_vfiprintf_r+0x60>
 800a64c:	68b5      	ldr	r5, [r6, #8]
 800a64e:	e7df      	b.n	800a610 <_vfiprintf_r+0x20>
 800a650:	4b79      	ldr	r3, [pc, #484]	; (800a838 <_vfiprintf_r+0x248>)
 800a652:	429d      	cmp	r5, r3
 800a654:	bf08      	it	eq
 800a656:	68f5      	ldreq	r5, [r6, #12]
 800a658:	e7da      	b.n	800a610 <_vfiprintf_r+0x20>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	0598      	lsls	r0, r3, #22
 800a65e:	d4ed      	bmi.n	800a63c <_vfiprintf_r+0x4c>
 800a660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a662:	f000 fb76 	bl	800ad52 <__retarget_lock_release_recursive>
 800a666:	e7e9      	b.n	800a63c <_vfiprintf_r+0x4c>
 800a668:	2300      	movs	r3, #0
 800a66a:	9309      	str	r3, [sp, #36]	; 0x24
 800a66c:	2320      	movs	r3, #32
 800a66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a672:	f8cd 800c 	str.w	r8, [sp, #12]
 800a676:	2330      	movs	r3, #48	; 0x30
 800a678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a83c <_vfiprintf_r+0x24c>
 800a67c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a680:	f04f 0901 	mov.w	r9, #1
 800a684:	4623      	mov	r3, r4
 800a686:	469a      	mov	sl, r3
 800a688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a68c:	b10a      	cbz	r2, 800a692 <_vfiprintf_r+0xa2>
 800a68e:	2a25      	cmp	r2, #37	; 0x25
 800a690:	d1f9      	bne.n	800a686 <_vfiprintf_r+0x96>
 800a692:	ebba 0b04 	subs.w	fp, sl, r4
 800a696:	d00b      	beq.n	800a6b0 <_vfiprintf_r+0xc0>
 800a698:	465b      	mov	r3, fp
 800a69a:	4622      	mov	r2, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff ff94 	bl	800a5cc <__sfputs_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	f000 80aa 	beq.w	800a7fe <_vfiprintf_r+0x20e>
 800a6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ac:	445a      	add	r2, fp
 800a6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80a2 	beq.w	800a7fe <_vfiprintf_r+0x20e>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6c4:	f10a 0a01 	add.w	sl, sl, #1
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2205      	movs	r2, #5
 800a6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6da:	4858      	ldr	r0, [pc, #352]	; (800a83c <_vfiprintf_r+0x24c>)
 800a6dc:	f7f5 fd98 	bl	8000210 <memchr>
 800a6e0:	9a04      	ldr	r2, [sp, #16]
 800a6e2:	b9d8      	cbnz	r0, 800a71c <_vfiprintf_r+0x12c>
 800a6e4:	06d1      	lsls	r1, r2, #27
 800a6e6:	bf44      	itt	mi
 800a6e8:	2320      	movmi	r3, #32
 800a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ee:	0713      	lsls	r3, r2, #28
 800a6f0:	bf44      	itt	mi
 800a6f2:	232b      	movmi	r3, #43	; 0x2b
 800a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6fe:	d015      	beq.n	800a72c <_vfiprintf_r+0x13c>
 800a700:	9a07      	ldr	r2, [sp, #28]
 800a702:	4654      	mov	r4, sl
 800a704:	2000      	movs	r0, #0
 800a706:	f04f 0c0a 	mov.w	ip, #10
 800a70a:	4621      	mov	r1, r4
 800a70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a710:	3b30      	subs	r3, #48	; 0x30
 800a712:	2b09      	cmp	r3, #9
 800a714:	d94e      	bls.n	800a7b4 <_vfiprintf_r+0x1c4>
 800a716:	b1b0      	cbz	r0, 800a746 <_vfiprintf_r+0x156>
 800a718:	9207      	str	r2, [sp, #28]
 800a71a:	e014      	b.n	800a746 <_vfiprintf_r+0x156>
 800a71c:	eba0 0308 	sub.w	r3, r0, r8
 800a720:	fa09 f303 	lsl.w	r3, r9, r3
 800a724:	4313      	orrs	r3, r2
 800a726:	9304      	str	r3, [sp, #16]
 800a728:	46a2      	mov	sl, r4
 800a72a:	e7d2      	b.n	800a6d2 <_vfiprintf_r+0xe2>
 800a72c:	9b03      	ldr	r3, [sp, #12]
 800a72e:	1d19      	adds	r1, r3, #4
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	9103      	str	r1, [sp, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	bfbb      	ittet	lt
 800a738:	425b      	neglt	r3, r3
 800a73a:	f042 0202 	orrlt.w	r2, r2, #2
 800a73e:	9307      	strge	r3, [sp, #28]
 800a740:	9307      	strlt	r3, [sp, #28]
 800a742:	bfb8      	it	lt
 800a744:	9204      	strlt	r2, [sp, #16]
 800a746:	7823      	ldrb	r3, [r4, #0]
 800a748:	2b2e      	cmp	r3, #46	; 0x2e
 800a74a:	d10c      	bne.n	800a766 <_vfiprintf_r+0x176>
 800a74c:	7863      	ldrb	r3, [r4, #1]
 800a74e:	2b2a      	cmp	r3, #42	; 0x2a
 800a750:	d135      	bne.n	800a7be <_vfiprintf_r+0x1ce>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	1d1a      	adds	r2, r3, #4
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	9203      	str	r2, [sp, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfb8      	it	lt
 800a75e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a762:	3402      	adds	r4, #2
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a84c <_vfiprintf_r+0x25c>
 800a76a:	7821      	ldrb	r1, [r4, #0]
 800a76c:	2203      	movs	r2, #3
 800a76e:	4650      	mov	r0, sl
 800a770:	f7f5 fd4e 	bl	8000210 <memchr>
 800a774:	b140      	cbz	r0, 800a788 <_vfiprintf_r+0x198>
 800a776:	2340      	movs	r3, #64	; 0x40
 800a778:	eba0 000a 	sub.w	r0, r0, sl
 800a77c:	fa03 f000 	lsl.w	r0, r3, r0
 800a780:	9b04      	ldr	r3, [sp, #16]
 800a782:	4303      	orrs	r3, r0
 800a784:	3401      	adds	r4, #1
 800a786:	9304      	str	r3, [sp, #16]
 800a788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a78c:	482c      	ldr	r0, [pc, #176]	; (800a840 <_vfiprintf_r+0x250>)
 800a78e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a792:	2206      	movs	r2, #6
 800a794:	f7f5 fd3c 	bl	8000210 <memchr>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d03f      	beq.n	800a81c <_vfiprintf_r+0x22c>
 800a79c:	4b29      	ldr	r3, [pc, #164]	; (800a844 <_vfiprintf_r+0x254>)
 800a79e:	bb1b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x1f8>
 800a7a0:	9b03      	ldr	r3, [sp, #12]
 800a7a2:	3307      	adds	r3, #7
 800a7a4:	f023 0307 	bic.w	r3, r3, #7
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	9303      	str	r3, [sp, #12]
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	443b      	add	r3, r7
 800a7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b2:	e767      	b.n	800a684 <_vfiprintf_r+0x94>
 800a7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7a5      	b.n	800a70a <_vfiprintf_r+0x11a>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	3401      	adds	r4, #1
 800a7c2:	9305      	str	r3, [sp, #20]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f04f 0c0a 	mov.w	ip, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7d0:	3a30      	subs	r2, #48	; 0x30
 800a7d2:	2a09      	cmp	r2, #9
 800a7d4:	d903      	bls.n	800a7de <_vfiprintf_r+0x1ee>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d0c5      	beq.n	800a766 <_vfiprintf_r+0x176>
 800a7da:	9105      	str	r1, [sp, #20]
 800a7dc:	e7c3      	b.n	800a766 <_vfiprintf_r+0x176>
 800a7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e7f0      	b.n	800a7ca <_vfiprintf_r+0x1da>
 800a7e8:	ab03      	add	r3, sp, #12
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	462a      	mov	r2, r5
 800a7ee:	4b16      	ldr	r3, [pc, #88]	; (800a848 <_vfiprintf_r+0x258>)
 800a7f0:	a904      	add	r1, sp, #16
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f7fc f83a 	bl	800686c <_printf_float>
 800a7f8:	4607      	mov	r7, r0
 800a7fa:	1c78      	adds	r0, r7, #1
 800a7fc:	d1d6      	bne.n	800a7ac <_vfiprintf_r+0x1bc>
 800a7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a800:	07d9      	lsls	r1, r3, #31
 800a802:	d405      	bmi.n	800a810 <_vfiprintf_r+0x220>
 800a804:	89ab      	ldrh	r3, [r5, #12]
 800a806:	059a      	lsls	r2, r3, #22
 800a808:	d402      	bmi.n	800a810 <_vfiprintf_r+0x220>
 800a80a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a80c:	f000 faa1 	bl	800ad52 <__retarget_lock_release_recursive>
 800a810:	89ab      	ldrh	r3, [r5, #12]
 800a812:	065b      	lsls	r3, r3, #25
 800a814:	f53f af12 	bmi.w	800a63c <_vfiprintf_r+0x4c>
 800a818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a81a:	e711      	b.n	800a640 <_vfiprintf_r+0x50>
 800a81c:	ab03      	add	r3, sp, #12
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	462a      	mov	r2, r5
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <_vfiprintf_r+0x258>)
 800a824:	a904      	add	r1, sp, #16
 800a826:	4630      	mov	r0, r6
 800a828:	f7fc fac4 	bl	8006db4 <_printf_i>
 800a82c:	e7e4      	b.n	800a7f8 <_vfiprintf_r+0x208>
 800a82e:	bf00      	nop
 800a830:	0800c27c 	.word	0x0800c27c
 800a834:	0800c29c 	.word	0x0800c29c
 800a838:	0800c25c 	.word	0x0800c25c
 800a83c:	0800c20c 	.word	0x0800c20c
 800a840:	0800c216 	.word	0x0800c216
 800a844:	0800686d 	.word	0x0800686d
 800a848:	0800a5cd 	.word	0x0800a5cd
 800a84c:	0800c212 	.word	0x0800c212

0800a850 <__swbuf_r>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	460e      	mov	r6, r1
 800a854:	4614      	mov	r4, r2
 800a856:	4605      	mov	r5, r0
 800a858:	b118      	cbz	r0, 800a862 <__swbuf_r+0x12>
 800a85a:	6983      	ldr	r3, [r0, #24]
 800a85c:	b90b      	cbnz	r3, 800a862 <__swbuf_r+0x12>
 800a85e:	f000 f9d9 	bl	800ac14 <__sinit>
 800a862:	4b21      	ldr	r3, [pc, #132]	; (800a8e8 <__swbuf_r+0x98>)
 800a864:	429c      	cmp	r4, r3
 800a866:	d12b      	bne.n	800a8c0 <__swbuf_r+0x70>
 800a868:	686c      	ldr	r4, [r5, #4]
 800a86a:	69a3      	ldr	r3, [r4, #24]
 800a86c:	60a3      	str	r3, [r4, #8]
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	071a      	lsls	r2, r3, #28
 800a872:	d52f      	bpl.n	800a8d4 <__swbuf_r+0x84>
 800a874:	6923      	ldr	r3, [r4, #16]
 800a876:	b36b      	cbz	r3, 800a8d4 <__swbuf_r+0x84>
 800a878:	6923      	ldr	r3, [r4, #16]
 800a87a:	6820      	ldr	r0, [r4, #0]
 800a87c:	1ac0      	subs	r0, r0, r3
 800a87e:	6963      	ldr	r3, [r4, #20]
 800a880:	b2f6      	uxtb	r6, r6
 800a882:	4283      	cmp	r3, r0
 800a884:	4637      	mov	r7, r6
 800a886:	dc04      	bgt.n	800a892 <__swbuf_r+0x42>
 800a888:	4621      	mov	r1, r4
 800a88a:	4628      	mov	r0, r5
 800a88c:	f000 f92e 	bl	800aaec <_fflush_r>
 800a890:	bb30      	cbnz	r0, 800a8e0 <__swbuf_r+0x90>
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	3b01      	subs	r3, #1
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	1c5a      	adds	r2, r3, #1
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	701e      	strb	r6, [r3, #0]
 800a8a0:	6963      	ldr	r3, [r4, #20]
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	4283      	cmp	r3, r0
 800a8a6:	d004      	beq.n	800a8b2 <__swbuf_r+0x62>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	07db      	lsls	r3, r3, #31
 800a8ac:	d506      	bpl.n	800a8bc <__swbuf_r+0x6c>
 800a8ae:	2e0a      	cmp	r6, #10
 800a8b0:	d104      	bne.n	800a8bc <__swbuf_r+0x6c>
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	f000 f919 	bl	800aaec <_fflush_r>
 800a8ba:	b988      	cbnz	r0, 800a8e0 <__swbuf_r+0x90>
 800a8bc:	4638      	mov	r0, r7
 800a8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <__swbuf_r+0x9c>)
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	d101      	bne.n	800a8ca <__swbuf_r+0x7a>
 800a8c6:	68ac      	ldr	r4, [r5, #8]
 800a8c8:	e7cf      	b.n	800a86a <__swbuf_r+0x1a>
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <__swbuf_r+0xa0>)
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	bf08      	it	eq
 800a8d0:	68ec      	ldreq	r4, [r5, #12]
 800a8d2:	e7ca      	b.n	800a86a <__swbuf_r+0x1a>
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 f80c 	bl	800a8f4 <__swsetup_r>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d0cb      	beq.n	800a878 <__swbuf_r+0x28>
 800a8e0:	f04f 37ff 	mov.w	r7, #4294967295
 800a8e4:	e7ea      	b.n	800a8bc <__swbuf_r+0x6c>
 800a8e6:	bf00      	nop
 800a8e8:	0800c27c 	.word	0x0800c27c
 800a8ec:	0800c29c 	.word	0x0800c29c
 800a8f0:	0800c25c 	.word	0x0800c25c

0800a8f4 <__swsetup_r>:
 800a8f4:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <__swsetup_r+0xcc>)
 800a8f6:	b570      	push	{r4, r5, r6, lr}
 800a8f8:	681d      	ldr	r5, [r3, #0]
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	b125      	cbz	r5, 800a90a <__swsetup_r+0x16>
 800a900:	69ab      	ldr	r3, [r5, #24]
 800a902:	b913      	cbnz	r3, 800a90a <__swsetup_r+0x16>
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f985 	bl	800ac14 <__sinit>
 800a90a:	4b2e      	ldr	r3, [pc, #184]	; (800a9c4 <__swsetup_r+0xd0>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d10f      	bne.n	800a930 <__swsetup_r+0x3c>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	d42c      	bmi.n	800a976 <__swsetup_r+0x82>
 800a91c:	06dd      	lsls	r5, r3, #27
 800a91e:	d411      	bmi.n	800a944 <__swsetup_r+0x50>
 800a920:	2309      	movs	r3, #9
 800a922:	6033      	str	r3, [r6, #0]
 800a924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	e03e      	b.n	800a9ae <__swsetup_r+0xba>
 800a930:	4b25      	ldr	r3, [pc, #148]	; (800a9c8 <__swsetup_r+0xd4>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <__swsetup_r+0x46>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7eb      	b.n	800a912 <__swsetup_r+0x1e>
 800a93a:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <__swsetup_r+0xd8>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7e6      	b.n	800a912 <__swsetup_r+0x1e>
 800a944:	0758      	lsls	r0, r3, #29
 800a946:	d512      	bpl.n	800a96e <__swsetup_r+0x7a>
 800a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94a:	b141      	cbz	r1, 800a95e <__swsetup_r+0x6a>
 800a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <__swsetup_r+0x66>
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff fb25 	bl	8009fa4 <_free_r>
 800a95a:	2300      	movs	r3, #0
 800a95c:	6363      	str	r3, [r4, #52]	; 0x34
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	6063      	str	r3, [r4, #4]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f043 0308 	orr.w	r3, r3, #8
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	b94b      	cbnz	r3, 800a98e <__swsetup_r+0x9a>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a984:	d003      	beq.n	800a98e <__swsetup_r+0x9a>
 800a986:	4621      	mov	r1, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 fa09 	bl	800ada0 <__smakebuf_r>
 800a98e:	89a0      	ldrh	r0, [r4, #12]
 800a990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a994:	f010 0301 	ands.w	r3, r0, #1
 800a998:	d00a      	beq.n	800a9b0 <__swsetup_r+0xbc>
 800a99a:	2300      	movs	r3, #0
 800a99c:	60a3      	str	r3, [r4, #8]
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	b943      	cbnz	r3, 800a9ba <__swsetup_r+0xc6>
 800a9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ac:	d1ba      	bne.n	800a924 <__swsetup_r+0x30>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	0781      	lsls	r1, r0, #30
 800a9b2:	bf58      	it	pl
 800a9b4:	6963      	ldrpl	r3, [r4, #20]
 800a9b6:	60a3      	str	r3, [r4, #8]
 800a9b8:	e7f4      	b.n	800a9a4 <__swsetup_r+0xb0>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7f7      	b.n	800a9ae <__swsetup_r+0xba>
 800a9be:	bf00      	nop
 800a9c0:	20000030 	.word	0x20000030
 800a9c4:	0800c27c 	.word	0x0800c27c
 800a9c8:	0800c29c 	.word	0x0800c29c
 800a9cc:	0800c25c 	.word	0x0800c25c

0800a9d0 <abort>:
 800a9d0:	b508      	push	{r3, lr}
 800a9d2:	2006      	movs	r0, #6
 800a9d4:	f000 fa54 	bl	800ae80 <raise>
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f7f7 ff53 	bl	8002884 <_exit>
	...

0800a9e0 <__sflush_r>:
 800a9e0:	898a      	ldrh	r2, [r1, #12]
 800a9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	0710      	lsls	r0, r2, #28
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	d458      	bmi.n	800aaa0 <__sflush_r+0xc0>
 800a9ee:	684b      	ldr	r3, [r1, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dc05      	bgt.n	800aa00 <__sflush_r+0x20>
 800a9f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dc02      	bgt.n	800aa00 <__sflush_r+0x20>
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa02:	2e00      	cmp	r6, #0
 800aa04:	d0f9      	beq.n	800a9fa <__sflush_r+0x1a>
 800aa06:	2300      	movs	r3, #0
 800aa08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa0c:	682f      	ldr	r7, [r5, #0]
 800aa0e:	602b      	str	r3, [r5, #0]
 800aa10:	d032      	beq.n	800aa78 <__sflush_r+0x98>
 800aa12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	075a      	lsls	r2, r3, #29
 800aa18:	d505      	bpl.n	800aa26 <__sflush_r+0x46>
 800aa1a:	6863      	ldr	r3, [r4, #4]
 800aa1c:	1ac0      	subs	r0, r0, r3
 800aa1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa20:	b10b      	cbz	r3, 800aa26 <__sflush_r+0x46>
 800aa22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa24:	1ac0      	subs	r0, r0, r3
 800aa26:	2300      	movs	r3, #0
 800aa28:	4602      	mov	r2, r0
 800aa2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa2c:	6a21      	ldr	r1, [r4, #32]
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b0      	blx	r6
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	d106      	bne.n	800aa46 <__sflush_r+0x66>
 800aa38:	6829      	ldr	r1, [r5, #0]
 800aa3a:	291d      	cmp	r1, #29
 800aa3c:	d82c      	bhi.n	800aa98 <__sflush_r+0xb8>
 800aa3e:	4a2a      	ldr	r2, [pc, #168]	; (800aae8 <__sflush_r+0x108>)
 800aa40:	40ca      	lsrs	r2, r1
 800aa42:	07d6      	lsls	r6, r2, #31
 800aa44:	d528      	bpl.n	800aa98 <__sflush_r+0xb8>
 800aa46:	2200      	movs	r2, #0
 800aa48:	6062      	str	r2, [r4, #4]
 800aa4a:	04d9      	lsls	r1, r3, #19
 800aa4c:	6922      	ldr	r2, [r4, #16]
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	d504      	bpl.n	800aa5c <__sflush_r+0x7c>
 800aa52:	1c42      	adds	r2, r0, #1
 800aa54:	d101      	bne.n	800aa5a <__sflush_r+0x7a>
 800aa56:	682b      	ldr	r3, [r5, #0]
 800aa58:	b903      	cbnz	r3, 800aa5c <__sflush_r+0x7c>
 800aa5a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa5e:	602f      	str	r7, [r5, #0]
 800aa60:	2900      	cmp	r1, #0
 800aa62:	d0ca      	beq.n	800a9fa <__sflush_r+0x1a>
 800aa64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa68:	4299      	cmp	r1, r3
 800aa6a:	d002      	beq.n	800aa72 <__sflush_r+0x92>
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f7ff fa99 	bl	8009fa4 <_free_r>
 800aa72:	2000      	movs	r0, #0
 800aa74:	6360      	str	r0, [r4, #52]	; 0x34
 800aa76:	e7c1      	b.n	800a9fc <__sflush_r+0x1c>
 800aa78:	6a21      	ldr	r1, [r4, #32]
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	47b0      	blx	r6
 800aa80:	1c41      	adds	r1, r0, #1
 800aa82:	d1c7      	bne.n	800aa14 <__sflush_r+0x34>
 800aa84:	682b      	ldr	r3, [r5, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0c4      	beq.n	800aa14 <__sflush_r+0x34>
 800aa8a:	2b1d      	cmp	r3, #29
 800aa8c:	d001      	beq.n	800aa92 <__sflush_r+0xb2>
 800aa8e:	2b16      	cmp	r3, #22
 800aa90:	d101      	bne.n	800aa96 <__sflush_r+0xb6>
 800aa92:	602f      	str	r7, [r5, #0]
 800aa94:	e7b1      	b.n	800a9fa <__sflush_r+0x1a>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	e7ad      	b.n	800a9fc <__sflush_r+0x1c>
 800aaa0:	690f      	ldr	r7, [r1, #16]
 800aaa2:	2f00      	cmp	r7, #0
 800aaa4:	d0a9      	beq.n	800a9fa <__sflush_r+0x1a>
 800aaa6:	0793      	lsls	r3, r2, #30
 800aaa8:	680e      	ldr	r6, [r1, #0]
 800aaaa:	bf08      	it	eq
 800aaac:	694b      	ldreq	r3, [r1, #20]
 800aaae:	600f      	str	r7, [r1, #0]
 800aab0:	bf18      	it	ne
 800aab2:	2300      	movne	r3, #0
 800aab4:	eba6 0807 	sub.w	r8, r6, r7
 800aab8:	608b      	str	r3, [r1, #8]
 800aaba:	f1b8 0f00 	cmp.w	r8, #0
 800aabe:	dd9c      	ble.n	800a9fa <__sflush_r+0x1a>
 800aac0:	6a21      	ldr	r1, [r4, #32]
 800aac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aac4:	4643      	mov	r3, r8
 800aac6:	463a      	mov	r2, r7
 800aac8:	4628      	mov	r0, r5
 800aaca:	47b0      	blx	r6
 800aacc:	2800      	cmp	r0, #0
 800aace:	dc06      	bgt.n	800aade <__sflush_r+0xfe>
 800aad0:	89a3      	ldrh	r3, [r4, #12]
 800aad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	f04f 30ff 	mov.w	r0, #4294967295
 800aadc:	e78e      	b.n	800a9fc <__sflush_r+0x1c>
 800aade:	4407      	add	r7, r0
 800aae0:	eba8 0800 	sub.w	r8, r8, r0
 800aae4:	e7e9      	b.n	800aaba <__sflush_r+0xda>
 800aae6:	bf00      	nop
 800aae8:	20400001 	.word	0x20400001

0800aaec <_fflush_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	690b      	ldr	r3, [r1, #16]
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b913      	cbnz	r3, 800aafc <_fflush_r+0x10>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	4628      	mov	r0, r5
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	b118      	cbz	r0, 800ab06 <_fflush_r+0x1a>
 800aafe:	6983      	ldr	r3, [r0, #24]
 800ab00:	b90b      	cbnz	r3, 800ab06 <_fflush_r+0x1a>
 800ab02:	f000 f887 	bl	800ac14 <__sinit>
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <_fflush_r+0x6c>)
 800ab08:	429c      	cmp	r4, r3
 800ab0a:	d11b      	bne.n	800ab44 <_fflush_r+0x58>
 800ab0c:	686c      	ldr	r4, [r5, #4]
 800ab0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0ef      	beq.n	800aaf6 <_fflush_r+0xa>
 800ab16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab18:	07d0      	lsls	r0, r2, #31
 800ab1a:	d404      	bmi.n	800ab26 <_fflush_r+0x3a>
 800ab1c:	0599      	lsls	r1, r3, #22
 800ab1e:	d402      	bmi.n	800ab26 <_fflush_r+0x3a>
 800ab20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab22:	f000 f915 	bl	800ad50 <__retarget_lock_acquire_recursive>
 800ab26:	4628      	mov	r0, r5
 800ab28:	4621      	mov	r1, r4
 800ab2a:	f7ff ff59 	bl	800a9e0 <__sflush_r>
 800ab2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab30:	07da      	lsls	r2, r3, #31
 800ab32:	4605      	mov	r5, r0
 800ab34:	d4e0      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	059b      	lsls	r3, r3, #22
 800ab3a:	d4dd      	bmi.n	800aaf8 <_fflush_r+0xc>
 800ab3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab3e:	f000 f908 	bl	800ad52 <__retarget_lock_release_recursive>
 800ab42:	e7d9      	b.n	800aaf8 <_fflush_r+0xc>
 800ab44:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <_fflush_r+0x70>)
 800ab46:	429c      	cmp	r4, r3
 800ab48:	d101      	bne.n	800ab4e <_fflush_r+0x62>
 800ab4a:	68ac      	ldr	r4, [r5, #8]
 800ab4c:	e7df      	b.n	800ab0e <_fflush_r+0x22>
 800ab4e:	4b04      	ldr	r3, [pc, #16]	; (800ab60 <_fflush_r+0x74>)
 800ab50:	429c      	cmp	r4, r3
 800ab52:	bf08      	it	eq
 800ab54:	68ec      	ldreq	r4, [r5, #12]
 800ab56:	e7da      	b.n	800ab0e <_fflush_r+0x22>
 800ab58:	0800c27c 	.word	0x0800c27c
 800ab5c:	0800c29c 	.word	0x0800c29c
 800ab60:	0800c25c 	.word	0x0800c25c

0800ab64 <std>:
 800ab64:	2300      	movs	r3, #0
 800ab66:	b510      	push	{r4, lr}
 800ab68:	4604      	mov	r4, r0
 800ab6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab72:	6083      	str	r3, [r0, #8]
 800ab74:	8181      	strh	r1, [r0, #12]
 800ab76:	6643      	str	r3, [r0, #100]	; 0x64
 800ab78:	81c2      	strh	r2, [r0, #14]
 800ab7a:	6183      	str	r3, [r0, #24]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	2208      	movs	r2, #8
 800ab80:	305c      	adds	r0, #92	; 0x5c
 800ab82:	f7fb fdcb 	bl	800671c <memset>
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <std+0x38>)
 800ab88:	6263      	str	r3, [r4, #36]	; 0x24
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <std+0x3c>)
 800ab8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <std+0x40>)
 800ab90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab92:	4b05      	ldr	r3, [pc, #20]	; (800aba8 <std+0x44>)
 800ab94:	6224      	str	r4, [r4, #32]
 800ab96:	6323      	str	r3, [r4, #48]	; 0x30
 800ab98:	bd10      	pop	{r4, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0800aeb9 	.word	0x0800aeb9
 800aba0:	0800aedb 	.word	0x0800aedb
 800aba4:	0800af13 	.word	0x0800af13
 800aba8:	0800af37 	.word	0x0800af37

0800abac <_cleanup_r>:
 800abac:	4901      	ldr	r1, [pc, #4]	; (800abb4 <_cleanup_r+0x8>)
 800abae:	f000 b8af 	b.w	800ad10 <_fwalk_reent>
 800abb2:	bf00      	nop
 800abb4:	0800aaed 	.word	0x0800aaed

0800abb8 <__sfmoreglue>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	2268      	movs	r2, #104	; 0x68
 800abbc:	1e4d      	subs	r5, r1, #1
 800abbe:	4355      	muls	r5, r2
 800abc0:	460e      	mov	r6, r1
 800abc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abc6:	f7ff fa59 	bl	800a07c <_malloc_r>
 800abca:	4604      	mov	r4, r0
 800abcc:	b140      	cbz	r0, 800abe0 <__sfmoreglue+0x28>
 800abce:	2100      	movs	r1, #0
 800abd0:	e9c0 1600 	strd	r1, r6, [r0]
 800abd4:	300c      	adds	r0, #12
 800abd6:	60a0      	str	r0, [r4, #8]
 800abd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abdc:	f7fb fd9e 	bl	800671c <memset>
 800abe0:	4620      	mov	r0, r4
 800abe2:	bd70      	pop	{r4, r5, r6, pc}

0800abe4 <__sfp_lock_acquire>:
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <__sfp_lock_acquire+0x8>)
 800abe6:	f000 b8b3 	b.w	800ad50 <__retarget_lock_acquire_recursive>
 800abea:	bf00      	nop
 800abec:	20000899 	.word	0x20000899

0800abf0 <__sfp_lock_release>:
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <__sfp_lock_release+0x8>)
 800abf2:	f000 b8ae 	b.w	800ad52 <__retarget_lock_release_recursive>
 800abf6:	bf00      	nop
 800abf8:	20000899 	.word	0x20000899

0800abfc <__sinit_lock_acquire>:
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <__sinit_lock_acquire+0x8>)
 800abfe:	f000 b8a7 	b.w	800ad50 <__retarget_lock_acquire_recursive>
 800ac02:	bf00      	nop
 800ac04:	2000089a 	.word	0x2000089a

0800ac08 <__sinit_lock_release>:
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <__sinit_lock_release+0x8>)
 800ac0a:	f000 b8a2 	b.w	800ad52 <__retarget_lock_release_recursive>
 800ac0e:	bf00      	nop
 800ac10:	2000089a 	.word	0x2000089a

0800ac14 <__sinit>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	4604      	mov	r4, r0
 800ac18:	f7ff fff0 	bl	800abfc <__sinit_lock_acquire>
 800ac1c:	69a3      	ldr	r3, [r4, #24]
 800ac1e:	b11b      	cbz	r3, 800ac28 <__sinit+0x14>
 800ac20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac24:	f7ff bff0 	b.w	800ac08 <__sinit_lock_release>
 800ac28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac2e:	4b13      	ldr	r3, [pc, #76]	; (800ac7c <__sinit+0x68>)
 800ac30:	4a13      	ldr	r2, [pc, #76]	; (800ac80 <__sinit+0x6c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac36:	42a3      	cmp	r3, r4
 800ac38:	bf04      	itt	eq
 800ac3a:	2301      	moveq	r3, #1
 800ac3c:	61a3      	streq	r3, [r4, #24]
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f000 f820 	bl	800ac84 <__sfp>
 800ac44:	6060      	str	r0, [r4, #4]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f000 f81c 	bl	800ac84 <__sfp>
 800ac4c:	60a0      	str	r0, [r4, #8]
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f818 	bl	800ac84 <__sfp>
 800ac54:	2200      	movs	r2, #0
 800ac56:	60e0      	str	r0, [r4, #12]
 800ac58:	2104      	movs	r1, #4
 800ac5a:	6860      	ldr	r0, [r4, #4]
 800ac5c:	f7ff ff82 	bl	800ab64 <std>
 800ac60:	68a0      	ldr	r0, [r4, #8]
 800ac62:	2201      	movs	r2, #1
 800ac64:	2109      	movs	r1, #9
 800ac66:	f7ff ff7d 	bl	800ab64 <std>
 800ac6a:	68e0      	ldr	r0, [r4, #12]
 800ac6c:	2202      	movs	r2, #2
 800ac6e:	2112      	movs	r1, #18
 800ac70:	f7ff ff78 	bl	800ab64 <std>
 800ac74:	2301      	movs	r3, #1
 800ac76:	61a3      	str	r3, [r4, #24]
 800ac78:	e7d2      	b.n	800ac20 <__sinit+0xc>
 800ac7a:	bf00      	nop
 800ac7c:	0800be14 	.word	0x0800be14
 800ac80:	0800abad 	.word	0x0800abad

0800ac84 <__sfp>:
 800ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac86:	4607      	mov	r7, r0
 800ac88:	f7ff ffac 	bl	800abe4 <__sfp_lock_acquire>
 800ac8c:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <__sfp+0x84>)
 800ac8e:	681e      	ldr	r6, [r3, #0]
 800ac90:	69b3      	ldr	r3, [r6, #24]
 800ac92:	b913      	cbnz	r3, 800ac9a <__sfp+0x16>
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7ff ffbd 	bl	800ac14 <__sinit>
 800ac9a:	3648      	adds	r6, #72	; 0x48
 800ac9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aca0:	3b01      	subs	r3, #1
 800aca2:	d503      	bpl.n	800acac <__sfp+0x28>
 800aca4:	6833      	ldr	r3, [r6, #0]
 800aca6:	b30b      	cbz	r3, 800acec <__sfp+0x68>
 800aca8:	6836      	ldr	r6, [r6, #0]
 800acaa:	e7f7      	b.n	800ac9c <__sfp+0x18>
 800acac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acb0:	b9d5      	cbnz	r5, 800ace8 <__sfp+0x64>
 800acb2:	4b16      	ldr	r3, [pc, #88]	; (800ad0c <__sfp+0x88>)
 800acb4:	60e3      	str	r3, [r4, #12]
 800acb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acba:	6665      	str	r5, [r4, #100]	; 0x64
 800acbc:	f000 f847 	bl	800ad4e <__retarget_lock_init_recursive>
 800acc0:	f7ff ff96 	bl	800abf0 <__sfp_lock_release>
 800acc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800accc:	6025      	str	r5, [r4, #0]
 800acce:	61a5      	str	r5, [r4, #24]
 800acd0:	2208      	movs	r2, #8
 800acd2:	4629      	mov	r1, r5
 800acd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acd8:	f7fb fd20 	bl	800671c <memset>
 800acdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ace0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ace4:	4620      	mov	r0, r4
 800ace6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace8:	3468      	adds	r4, #104	; 0x68
 800acea:	e7d9      	b.n	800aca0 <__sfp+0x1c>
 800acec:	2104      	movs	r1, #4
 800acee:	4638      	mov	r0, r7
 800acf0:	f7ff ff62 	bl	800abb8 <__sfmoreglue>
 800acf4:	4604      	mov	r4, r0
 800acf6:	6030      	str	r0, [r6, #0]
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d1d5      	bne.n	800aca8 <__sfp+0x24>
 800acfc:	f7ff ff78 	bl	800abf0 <__sfp_lock_release>
 800ad00:	230c      	movs	r3, #12
 800ad02:	603b      	str	r3, [r7, #0]
 800ad04:	e7ee      	b.n	800ace4 <__sfp+0x60>
 800ad06:	bf00      	nop
 800ad08:	0800be14 	.word	0x0800be14
 800ad0c:	ffff0001 	.word	0xffff0001

0800ad10 <_fwalk_reent>:
 800ad10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad14:	4606      	mov	r6, r0
 800ad16:	4688      	mov	r8, r1
 800ad18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad1c:	2700      	movs	r7, #0
 800ad1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad22:	f1b9 0901 	subs.w	r9, r9, #1
 800ad26:	d505      	bpl.n	800ad34 <_fwalk_reent+0x24>
 800ad28:	6824      	ldr	r4, [r4, #0]
 800ad2a:	2c00      	cmp	r4, #0
 800ad2c:	d1f7      	bne.n	800ad1e <_fwalk_reent+0xe>
 800ad2e:	4638      	mov	r0, r7
 800ad30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad34:	89ab      	ldrh	r3, [r5, #12]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d907      	bls.n	800ad4a <_fwalk_reent+0x3a>
 800ad3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	d003      	beq.n	800ad4a <_fwalk_reent+0x3a>
 800ad42:	4629      	mov	r1, r5
 800ad44:	4630      	mov	r0, r6
 800ad46:	47c0      	blx	r8
 800ad48:	4307      	orrs	r7, r0
 800ad4a:	3568      	adds	r5, #104	; 0x68
 800ad4c:	e7e9      	b.n	800ad22 <_fwalk_reent+0x12>

0800ad4e <__retarget_lock_init_recursive>:
 800ad4e:	4770      	bx	lr

0800ad50 <__retarget_lock_acquire_recursive>:
 800ad50:	4770      	bx	lr

0800ad52 <__retarget_lock_release_recursive>:
 800ad52:	4770      	bx	lr

0800ad54 <__swhatbuf_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	460e      	mov	r6, r1
 800ad58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	b096      	sub	sp, #88	; 0x58
 800ad60:	4614      	mov	r4, r2
 800ad62:	461d      	mov	r5, r3
 800ad64:	da08      	bge.n	800ad78 <__swhatbuf_r+0x24>
 800ad66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	061a      	lsls	r2, r3, #24
 800ad70:	d410      	bmi.n	800ad94 <__swhatbuf_r+0x40>
 800ad72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad76:	e00e      	b.n	800ad96 <__swhatbuf_r+0x42>
 800ad78:	466a      	mov	r2, sp
 800ad7a:	f000 f903 	bl	800af84 <_fstat_r>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	dbf1      	blt.n	800ad66 <__swhatbuf_r+0x12>
 800ad82:	9a01      	ldr	r2, [sp, #4]
 800ad84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad8c:	425a      	negs	r2, r3
 800ad8e:	415a      	adcs	r2, r3
 800ad90:	602a      	str	r2, [r5, #0]
 800ad92:	e7ee      	b.n	800ad72 <__swhatbuf_r+0x1e>
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	2000      	movs	r0, #0
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	b016      	add	sp, #88	; 0x58
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ada0 <__smakebuf_r>:
 800ada0:	898b      	ldrh	r3, [r1, #12]
 800ada2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ada4:	079d      	lsls	r5, r3, #30
 800ada6:	4606      	mov	r6, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d507      	bpl.n	800adbc <__smakebuf_r+0x1c>
 800adac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	2301      	movs	r3, #1
 800adb6:	6163      	str	r3, [r4, #20]
 800adb8:	b002      	add	sp, #8
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	ab01      	add	r3, sp, #4
 800adbe:	466a      	mov	r2, sp
 800adc0:	f7ff ffc8 	bl	800ad54 <__swhatbuf_r>
 800adc4:	9900      	ldr	r1, [sp, #0]
 800adc6:	4605      	mov	r5, r0
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff f957 	bl	800a07c <_malloc_r>
 800adce:	b948      	cbnz	r0, 800ade4 <__smakebuf_r+0x44>
 800add0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add4:	059a      	lsls	r2, r3, #22
 800add6:	d4ef      	bmi.n	800adb8 <__smakebuf_r+0x18>
 800add8:	f023 0303 	bic.w	r3, r3, #3
 800addc:	f043 0302 	orr.w	r3, r3, #2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	e7e3      	b.n	800adac <__smakebuf_r+0xc>
 800ade4:	4b0d      	ldr	r3, [pc, #52]	; (800ae1c <__smakebuf_r+0x7c>)
 800ade6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adf0:	81a3      	strh	r3, [r4, #12]
 800adf2:	9b00      	ldr	r3, [sp, #0]
 800adf4:	6163      	str	r3, [r4, #20]
 800adf6:	9b01      	ldr	r3, [sp, #4]
 800adf8:	6120      	str	r0, [r4, #16]
 800adfa:	b15b      	cbz	r3, 800ae14 <__smakebuf_r+0x74>
 800adfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f8d1 	bl	800afa8 <_isatty_r>
 800ae06:	b128      	cbz	r0, 800ae14 <__smakebuf_r+0x74>
 800ae08:	89a3      	ldrh	r3, [r4, #12]
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	f043 0301 	orr.w	r3, r3, #1
 800ae12:	81a3      	strh	r3, [r4, #12]
 800ae14:	89a0      	ldrh	r0, [r4, #12]
 800ae16:	4305      	orrs	r5, r0
 800ae18:	81a5      	strh	r5, [r4, #12]
 800ae1a:	e7cd      	b.n	800adb8 <__smakebuf_r+0x18>
 800ae1c:	0800abad 	.word	0x0800abad

0800ae20 <_malloc_usable_size_r>:
 800ae20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae24:	1f18      	subs	r0, r3, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfbc      	itt	lt
 800ae2a:	580b      	ldrlt	r3, [r1, r0]
 800ae2c:	18c0      	addlt	r0, r0, r3
 800ae2e:	4770      	bx	lr

0800ae30 <_raise_r>:
 800ae30:	291f      	cmp	r1, #31
 800ae32:	b538      	push	{r3, r4, r5, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	460d      	mov	r5, r1
 800ae38:	d904      	bls.n	800ae44 <_raise_r+0x14>
 800ae3a:	2316      	movs	r3, #22
 800ae3c:	6003      	str	r3, [r0, #0]
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae46:	b112      	cbz	r2, 800ae4e <_raise_r+0x1e>
 800ae48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae4c:	b94b      	cbnz	r3, 800ae62 <_raise_r+0x32>
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f830 	bl	800aeb4 <_getpid_r>
 800ae54:	462a      	mov	r2, r5
 800ae56:	4601      	mov	r1, r0
 800ae58:	4620      	mov	r0, r4
 800ae5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae5e:	f000 b817 	b.w	800ae90 <_kill_r>
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d00a      	beq.n	800ae7c <_raise_r+0x4c>
 800ae66:	1c59      	adds	r1, r3, #1
 800ae68:	d103      	bne.n	800ae72 <_raise_r+0x42>
 800ae6a:	2316      	movs	r3, #22
 800ae6c:	6003      	str	r3, [r0, #0]
 800ae6e:	2001      	movs	r0, #1
 800ae70:	e7e7      	b.n	800ae42 <_raise_r+0x12>
 800ae72:	2400      	movs	r4, #0
 800ae74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae78:	4628      	mov	r0, r5
 800ae7a:	4798      	blx	r3
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	e7e0      	b.n	800ae42 <_raise_r+0x12>

0800ae80 <raise>:
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <raise+0xc>)
 800ae82:	4601      	mov	r1, r0
 800ae84:	6818      	ldr	r0, [r3, #0]
 800ae86:	f7ff bfd3 	b.w	800ae30 <_raise_r>
 800ae8a:	bf00      	nop
 800ae8c:	20000030 	.word	0x20000030

0800ae90 <_kill_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_kill_r+0x20>)
 800ae94:	2300      	movs	r3, #0
 800ae96:	4604      	mov	r4, r0
 800ae98:	4608      	mov	r0, r1
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	602b      	str	r3, [r5, #0]
 800ae9e:	f7f7 fce1 	bl	8002864 <_kill>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	d102      	bne.n	800aeac <_kill_r+0x1c>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	b103      	cbz	r3, 800aeac <_kill_r+0x1c>
 800aeaa:	6023      	str	r3, [r4, #0]
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000894 	.word	0x20000894

0800aeb4 <_getpid_r>:
 800aeb4:	f7f7 bcce 	b.w	8002854 <_getpid>

0800aeb8 <__sread>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	460c      	mov	r4, r1
 800aebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec0:	f000 f894 	bl	800afec <_read_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	bfab      	itete	ge
 800aec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeca:	89a3      	ldrhlt	r3, [r4, #12]
 800aecc:	181b      	addge	r3, r3, r0
 800aece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aed2:	bfac      	ite	ge
 800aed4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aed6:	81a3      	strhlt	r3, [r4, #12]
 800aed8:	bd10      	pop	{r4, pc}

0800aeda <__swrite>:
 800aeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aede:	461f      	mov	r7, r3
 800aee0:	898b      	ldrh	r3, [r1, #12]
 800aee2:	05db      	lsls	r3, r3, #23
 800aee4:	4605      	mov	r5, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	4616      	mov	r6, r2
 800aeea:	d505      	bpl.n	800aef8 <__swrite+0x1e>
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	2302      	movs	r3, #2
 800aef2:	2200      	movs	r2, #0
 800aef4:	f000 f868 	bl	800afc8 <_lseek_r>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	4632      	mov	r2, r6
 800af06:	463b      	mov	r3, r7
 800af08:	4628      	mov	r0, r5
 800af0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	f000 b817 	b.w	800af40 <_write_r>

0800af12 <__sseek>:
 800af12:	b510      	push	{r4, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1a:	f000 f855 	bl	800afc8 <_lseek_r>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	bf15      	itete	ne
 800af24:	6560      	strne	r0, [r4, #84]	; 0x54
 800af26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af2e:	81a3      	strheq	r3, [r4, #12]
 800af30:	bf18      	it	ne
 800af32:	81a3      	strhne	r3, [r4, #12]
 800af34:	bd10      	pop	{r4, pc}

0800af36 <__sclose>:
 800af36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3a:	f000 b813 	b.w	800af64 <_close_r>
	...

0800af40 <_write_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	; (800af60 <_write_r+0x20>)
 800af44:	4604      	mov	r4, r0
 800af46:	4608      	mov	r0, r1
 800af48:	4611      	mov	r1, r2
 800af4a:	2200      	movs	r2, #0
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f7f7 fcbf 	bl	80028d2 <_write>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_write_r+0x1e>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_write_r+0x1e>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	20000894 	.word	0x20000894

0800af64 <_close_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d06      	ldr	r5, [pc, #24]	; (800af80 <_close_r+0x1c>)
 800af68:	2300      	movs	r3, #0
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	f7f7 fccb 	bl	800290a <_close>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_close_r+0x1a>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_close_r+0x1a>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20000894 	.word	0x20000894

0800af84 <_fstat_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	; (800afa4 <_fstat_r+0x20>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	4611      	mov	r1, r2
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	f7f7 fcc6 	bl	8002922 <_fstat>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	d102      	bne.n	800afa0 <_fstat_r+0x1c>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	b103      	cbz	r3, 800afa0 <_fstat_r+0x1c>
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	bf00      	nop
 800afa4:	20000894 	.word	0x20000894

0800afa8 <_isatty_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d06      	ldr	r5, [pc, #24]	; (800afc4 <_isatty_r+0x1c>)
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	f7f7 fcc5 	bl	8002942 <_isatty>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_isatty_r+0x1a>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_isatty_r+0x1a>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20000894 	.word	0x20000894

0800afc8 <_lseek_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_lseek_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f7 fcbe 	bl	8002958 <_lseek>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_lseek_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_lseek_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20000894 	.word	0x20000894

0800afec <_read_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_read_r+0x20>)
 800aff0:	4604      	mov	r4, r0
 800aff2:	4608      	mov	r0, r1
 800aff4:	4611      	mov	r1, r2
 800aff6:	2200      	movs	r2, #0
 800aff8:	602a      	str	r2, [r5, #0]
 800affa:	461a      	mov	r2, r3
 800affc:	f7f7 fc4c 	bl	8002898 <_read>
 800b000:	1c43      	adds	r3, r0, #1
 800b002:	d102      	bne.n	800b00a <_read_r+0x1e>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b103      	cbz	r3, 800b00a <_read_r+0x1e>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
 800b00c:	20000894 	.word	0x20000894

0800b010 <_init>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	bf00      	nop
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr

0800b01c <_fini>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	bf00      	nop
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr
