
411_OneWire_PTlib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b400  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000123c  0800b5a0  0800b5a0  0001b5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7dc  0800c7dc  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7dc  0800c7dc  0001c7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7e4  0800c7e4  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7e4  0800c7e4  0001c7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c7ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000200  0800c9ec  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  0800c9ec  000208c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d1c  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000346c  00000000  00000000  00036f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6c3  00000000  00000000  0003c938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019aca  00000000  00000000  00056ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e756  00000000  00000000  00070ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f21b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000664c  00000000  00000000  0010f26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b588 	.word	0x0800b588

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800b588 	.word	0x0800b588

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <USART_ReceiveData>:


char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	b29b      	uxth	r3, r3
 8001016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800101a:	b29b      	uxth	r3, r3
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <owReadHandler>:
    ow->lastROM[k] = 0x00;
  ow->lastDiscrepancy = 64;

}

void owReadHandler() { //USART interrupt handler
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800102e:	f000 f839 	bl	80010a4 <getUsartIndex>
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  /* We check that we caused an interrupt due to RXNE. */
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <owReadHandler+0x70>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	2b00      	cmp	r3, #0
 8001040:	d025      	beq.n	800108e <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <owReadHandler+0x70>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800104a:	2b00      	cmp	r3, #0
 800104c:	d01f      	beq.n	800108e <owReadHandler+0x66>

    /* We receive data from the periphery and reset the flag*/
		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800104e:	bf00      	nop
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <owReadHandler+0x70>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f9      	beq.n	8001050 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);              
 800105c:	79fc      	ldrb	r4, [r7, #7]
 800105e:	480e      	ldr	r0, [pc, #56]	; (8001098 <owReadHandler+0x70>)
 8001060:	f7ff ffd2 	bl	8001008 <USART_ReceiveData>
 8001064:	4603      	mov	r3, r0
 8001066:	461a      	mov	r2, r3
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <owReadHandler+0x74>)
 800106a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);//reset flag response received after
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2201      	movs	r2, #1
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	b25b      	sxtb	r3, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	b25a      	sxtb	r2, r3
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <owReadHandler+0x78>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4013      	ands	r3, r2
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <owReadHandler+0x78>)
 800108c:	701a      	strb	r2, [r3, #0]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	40004400 	.word	0x40004400
 800109c:	20000220 	.word	0x20000220
 80010a0:	2000021c 	.word	0x2000021c

080010a4 <getUsartIndex>:

	usart_setup(115200);// reconfigure UART speed
  return owPresence;
}

uint8_t getUsartIndex() {// looks at the UART number with which work will go
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
//	uint8_t result;
//	if(OW_USART==USART1)result = 0;
//	else if (OW_USART==USART2)result = 1;
//	else if (OW_USART==USART3)result = 2;
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0x98>)
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_ADC1_Init+0x9c>)
 80010ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_ADC1_Init+0x98>)
 80010ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_ADC1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_ADC1_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_ADC1_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC1_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_ADC1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_ADC1_Init+0x98>)
 80010f6:	4a17      	ldr	r2, [pc, #92]	; (8001154 <MX_ADC1_Init+0xa0>)
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_ADC1_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_ADC1_Init+0x98>)
 8001102:	2201      	movs	r2, #1
 8001104:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_ADC1_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_ADC1_Init+0x98>)
 8001110:	2201      	movs	r2, #1
 8001112:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_ADC1_Init+0x98>)
 8001116:	f001 fcf7 	bl	8002b08 <HAL_ADC_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001120:	f000 fe54 	bl	8001dcc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001124:	2301      	movs	r3, #1
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0x98>)
 8001136:	f001 fe77 	bl	8002e28 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001140:	f000 fe44 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000022c 	.word	0x2000022c
 8001150:	40012000 	.word	0x40012000
 8001154:	0f000001 	.word	0x0f000001

08001158 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d127      	bne.n	80011ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011b2:	2302      	movs	r3, #2
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_ADC_MspInit+0x84>)
 80011c6:	f002 fd71 	bl	8003cac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_DMA_Init+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <MX_DMA_Init+0x4c>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_DMA_Init+0x4c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2010      	movs	r0, #16
 8001208:	f002 f917 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800120c:	2010      	movs	r0, #16
 800120e:	f002 f930 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2011      	movs	r0, #17
 8001218:	f002 f90f 	bl	800343a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800121c:	2011      	movs	r0, #17
 800121e:	f002 f928 	bl	8003472 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <OneWire_Init>:
void OneWire_SetCallback(void(*OnComplete)(void), void(*OnErr)(void))
{
	onewire_callback.OnErr = OnErr;
	onewire_callback.OnComplete = OnComplete;
}
void OneWire_Init(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	OneWire_UARTInit(9600);
 8001234:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001238:	f000 f802 	bl	8001240 <OneWire_UARTInit>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <OneWire_UARTInit>:
// Declare a USART_HandleTypeDef handle structure.
void OneWire_UARTInit(uint32_t baudRate){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    huart2.Instance=USART2;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <OneWire_UARTInit+0x48>)
 800124a:	4a10      	ldr	r2, [pc, #64]	; (800128c <OneWire_UARTInit+0x4c>)
 800124c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = baudRate;
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <OneWire_UARTInit+0x48>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6053      	str	r3, [r2, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <OneWire_UARTInit+0x48>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <OneWire_UARTInit+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <OneWire_UARTInit+0x48>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <OneWire_UARTInit+0x48>)
 8001268:	220c      	movs	r2, #12
 800126a:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <OneWire_UARTInit+0x48>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <OneWire_UARTInit+0x48>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <OneWire_UARTInit+0x48>)
 800127a:	f004 fb05 	bl	8005888 <HAL_UART_Init>
    return ;
 800127e:	bf00      	nop
}
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200007a8 	.word	0x200007a8
 800128c:	40004400 	.word	0x40004400

08001290 <OneWire_TxCpltCallback>:

void OneWire_TxCpltCallback(){
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <OneWire_RxCpltCallback>:

void OneWire_RxCpltCallback(){
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
        StateMachine();
 80012a2:	f000 f803 	bl	80012ac <StateMachine>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <StateMachine>:
 /* OneWire_SendBytes & OneWire_ReadBytes */

void StateMachine(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    switch (state.Reset){
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <StateMachine+0xbc>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d854      	bhi.n	8001364 <StateMachine+0xb8>
 80012ba:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <StateMachine+0x14>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012d5 	.word	0x080012d5
 80012c4:	08001307 	.word	0x08001307
 80012c8:	08001325 	.word	0x08001325
 80012cc:	0800133d 	.word	0x0800133d
 80012d0:	08001355 	.word	0x08001355
        case 0: // start the reset produce;
            OneWire_UARTInit(9600);
 80012d4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80012d8:	f7ff ffb2 	bl	8001240 <OneWire_UARTInit>
            internal_Buffer[0]=0xf0;
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <StateMachine+0xc0>)
 80012de:	22f0      	movs	r2, #240	; 0xf0
 80012e0:	701a      	strb	r2, [r3, #0]
            HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4921      	ldr	r1, [pc, #132]	; (800136c <StateMachine+0xc0>)
 80012e6:	4822      	ldr	r0, [pc, #136]	; (8001370 <StateMachine+0xc4>)
 80012e8:	f004 fb1c 	bl	8005924 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	491f      	ldr	r1, [pc, #124]	; (800136c <StateMachine+0xc0>)
 80012f0:	481f      	ldr	r0, [pc, #124]	; (8001370 <StateMachine+0xc4>)
 80012f2:	f004 fb95 	bl	8005a20 <HAL_UART_Receive_DMA>
            state.Reset++;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <StateMachine+0xbc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b19      	ldr	r3, [pc, #100]	; (8001368 <StateMachine+0xbc>)
 8001302:	701a      	strb	r2, [r3, #0]
  	    break;
 8001304:	e02d      	b.n	8001362 <StateMachine+0xb6>
        case 1: // to check if the device exist or not.
	    if (internal_Buffer[0]==0xf0)
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <StateMachine+0xc0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2bf0      	cmp	r3, #240	; 0xf0
 800130c:	d103      	bne.n	8001316 <StateMachine+0x6a>
            {
		onewire_callback.OnErr();
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <StateMachine+0xc8>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4798      	blx	r3
                break;
 8001314:	e025      	b.n	8001362 <StateMachine+0xb6>
            }
            state.Reset++;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <StateMachine+0xbc>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <StateMachine+0xbc>)
 8001322:	701a      	strb	r2, [r3, #0]
        case 2:
            if (ROMStateMachine()==0)
 8001324:	f000 f828 	bl	8001378 <ROMStateMachine>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <StateMachine+0xb0>
		state.Reset++;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <StateMachine+0xbc>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	3301      	adds	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <StateMachine+0xbc>)
 800133a:	701a      	strb	r2, [r3, #0]
	    else break;
        case 3:
            if (FunctionStateMachine()==0)
 800133c:	f000 f930 	bl	80015a0 <FunctionStateMachine>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10c      	bne.n	8001360 <StateMachine+0xb4>
		state.Reset++;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <StateMachine+0xbc>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	3301      	adds	r3, #1
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <StateMachine+0xbc>)
 8001352:	701a      	strb	r2, [r3, #0]
	    else break;
        case 4:
	    onewire_callback.OnComplete();
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <StateMachine+0xc8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4798      	blx	r3
	    break;
 800135a:	e002      	b.n	8001362 <StateMachine+0xb6>
	    else break;
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <StateMachine+0xb6>
	    else break;
 8001360:	bf00      	nop
    }
    return ;
 8001362:	bf00      	nop
 8001364:	bf00      	nop
}
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000274 	.word	0x20000274
 800136c:	20000290 	.word	0x20000290
 8001370:	200007a8 	.word	0x200007a8
 8001374:	200002dc 	.word	0x200002dc

08001378 <ROMStateMachine>:

uint8_t ROMStateMachine(void){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
    switch(state.ROM){
 800137e:	4b85      	ldr	r3, [pc, #532]	; (8001594 <ROMStateMachine+0x21c>)
 8001380:	7e9b      	ldrb	r3, [r3, #26]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	f000 80c2 	beq.w	800150e <ROMStateMachine+0x196>
 800138a:	2b02      	cmp	r3, #2
 800138c:	f300 80fa 	bgt.w	8001584 <ROMStateMachine+0x20c>
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <ROMStateMachine+0x22>
 8001394:	2b01      	cmp	r3, #1
 8001396:	d030      	beq.n	80013fa <ROMStateMachine+0x82>
 8001398:	e0f4      	b.n	8001584 <ROMStateMachine+0x20c>
        case 0: // start the ROM command by sending the ROM_Command
            OneWire_UARTInit(115200);
 800139a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800139e:	f7ff ff4f 	bl	8001240 <OneWire_UARTInit>
            for (uint8_t i=0;i<8;i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	e013      	b.n	80013d0 <ROMStateMachine+0x58>
                internal_Buffer[i]=((state.ROM_Command>>i)&0x01)?0xff:0x00;
 80013a8:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <ROMStateMachine+0x21c>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	fa42 f303 	asr.w	r3, r2, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <ROMStateMachine+0x4a>
 80013be:	21ff      	movs	r1, #255	; 0xff
 80013c0:	e000      	b.n	80013c4 <ROMStateMachine+0x4c>
 80013c2:	2100      	movs	r1, #0
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a74      	ldr	r2, [pc, #464]	; (8001598 <ROMStateMachine+0x220>)
 80013c8:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i=0;i<8;i++)
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	3301      	adds	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	2b07      	cmp	r3, #7
 80013d4:	d9e8      	bls.n	80013a8 <ROMStateMachine+0x30>
            HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),8);
 80013d6:	2208      	movs	r2, #8
 80013d8:	496f      	ldr	r1, [pc, #444]	; (8001598 <ROMStateMachine+0x220>)
 80013da:	4870      	ldr	r0, [pc, #448]	; (800159c <ROMStateMachine+0x224>)
 80013dc:	f004 faa2 	bl	8005924 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),8);
 80013e0:	2208      	movs	r2, #8
 80013e2:	496d      	ldr	r1, [pc, #436]	; (8001598 <ROMStateMachine+0x220>)
 80013e4:	486d      	ldr	r0, [pc, #436]	; (800159c <ROMStateMachine+0x224>)
 80013e6:	f004 fb1b 	bl	8005a20 <HAL_UART_Receive_DMA>
            state.ROM++;
 80013ea:	4b6a      	ldr	r3, [pc, #424]	; (8001594 <ROMStateMachine+0x21c>)
 80013ec:	7e9b      	ldrb	r3, [r3, #26]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b67      	ldr	r3, [pc, #412]	; (8001594 <ROMStateMachine+0x21c>)
 80013f6:	769a      	strb	r2, [r3, #26]
            break;
 80013f8:	e0c4      	b.n	8001584 <ROMStateMachine+0x20c>
        case 1: // continue by sending necessary Tx buffer
            if (state.ROM_TxCount!=0){
 80013fa:	4b66      	ldr	r3, [pc, #408]	; (8001594 <ROMStateMachine+0x21c>)
 80013fc:	7b1b      	ldrb	r3, [r3, #12]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d049      	beq.n	8001498 <ROMStateMachine+0x120>
                for (uint8_t i=0;i<state.ROM_TxCount;i++)
 8001404:	2300      	movs	r3, #0
 8001406:	71bb      	strb	r3, [r7, #6]
 8001408:	e022      	b.n	8001450 <ROMStateMachine+0xd8>
                    for (uint8_t j=0;j<8;j++)
 800140a:	2300      	movs	r3, #0
 800140c:	717b      	strb	r3, [r7, #5]
 800140e:	e019      	b.n	8001444 <ROMStateMachine+0xcc>
                        internal_Buffer[i*8+j]=((state.ROM_TxBuffer[i]>>j)&0x01)?0xff:0x00;
 8001410:	4b60      	ldr	r3, [pc, #384]	; (8001594 <ROMStateMachine+0x21c>)
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	79bb      	ldrb	r3, [r7, #6]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	fa42 f303 	asr.w	r3, r2, r3
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <ROMStateMachine+0xb8>
 800142c:	21ff      	movs	r1, #255	; 0xff
 800142e:	e000      	b.n	8001432 <ROMStateMachine+0xba>
 8001430:	2100      	movs	r1, #0
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	00da      	lsls	r2, r3, #3
 8001436:	797b      	ldrb	r3, [r7, #5]
 8001438:	4413      	add	r3, r2
 800143a:	4a57      	ldr	r2, [pc, #348]	; (8001598 <ROMStateMachine+0x220>)
 800143c:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t j=0;j<8;j++)
 800143e:	797b      	ldrb	r3, [r7, #5]
 8001440:	3301      	adds	r3, #1
 8001442:	717b      	strb	r3, [r7, #5]
 8001444:	797b      	ldrb	r3, [r7, #5]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9e2      	bls.n	8001410 <ROMStateMachine+0x98>
                for (uint8_t i=0;i<state.ROM_TxCount;i++)
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	3301      	adds	r3, #1
 800144e:	71bb      	strb	r3, [r7, #6]
 8001450:	4b50      	ldr	r3, [pc, #320]	; (8001594 <ROMStateMachine+0x21c>)
 8001452:	7b1b      	ldrb	r3, [r3, #12]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	79ba      	ldrb	r2, [r7, #6]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3d6      	bcc.n	800140a <ROMStateMachine+0x92>
                HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),state.ROM_TxCount*8);
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <ROMStateMachine+0x21c>)
 800145e:	7b1b      	ldrb	r3, [r3, #12]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	b29b      	uxth	r3, r3
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	b29b      	uxth	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	494b      	ldr	r1, [pc, #300]	; (8001598 <ROMStateMachine+0x220>)
 800146c:	484b      	ldr	r0, [pc, #300]	; (800159c <ROMStateMachine+0x224>)
 800146e:	f004 fa59 	bl	8005924 <HAL_UART_Transmit_DMA>
                HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),state.ROM_TxCount*8);
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <ROMStateMachine+0x21c>)
 8001474:	7b1b      	ldrb	r3, [r3, #12]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b29b      	uxth	r3, r3
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	b29b      	uxth	r3, r3
 800147e:	461a      	mov	r2, r3
 8001480:	4945      	ldr	r1, [pc, #276]	; (8001598 <ROMStateMachine+0x220>)
 8001482:	4846      	ldr	r0, [pc, #280]	; (800159c <ROMStateMachine+0x224>)
 8001484:	f004 facc 	bl	8005a20 <HAL_UART_Receive_DMA>
		state.ROM++;
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <ROMStateMachine+0x21c>)
 800148a:	7e9b      	ldrb	r3, [r3, #26]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3301      	adds	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <ROMStateMachine+0x21c>)
 8001494:	769a      	strb	r2, [r3, #26]
		break;
 8001496:	e075      	b.n	8001584 <ROMStateMachine+0x20c>
            }
	    if (state.ROM_RxCount!=0){
 8001498:	4b3e      	ldr	r3, [pc, #248]	; (8001594 <ROMStateMachine+0x21c>)
 800149a:	7b5b      	ldrb	r3, [r3, #13]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d02e      	beq.n	8001500 <ROMStateMachine+0x188>
                for (uint8_t i=0;i<=state.ROM_RxCount*8;i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	713b      	strb	r3, [r7, #4]
 80014a6:	e006      	b.n	80014b6 <ROMStateMachine+0x13e>
                    internal_Buffer[i]=0xff;
 80014a8:	793b      	ldrb	r3, [r7, #4]
 80014aa:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <ROMStateMachine+0x220>)
 80014ac:	21ff      	movs	r1, #255	; 0xff
 80014ae:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i=0;i<=state.ROM_RxCount*8;i++)
 80014b0:	793b      	ldrb	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	713b      	strb	r3, [r7, #4]
 80014b6:	793a      	ldrb	r2, [r7, #4]
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <ROMStateMachine+0x21c>)
 80014ba:	7b5b      	ldrb	r3, [r3, #13]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	429a      	cmp	r2, r3
 80014c2:	ddf1      	ble.n	80014a8 <ROMStateMachine+0x130>
                HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),state.ROM_RxCount*8);
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <ROMStateMachine+0x21c>)
 80014c6:	7b5b      	ldrb	r3, [r3, #13]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	4931      	ldr	r1, [pc, #196]	; (8001598 <ROMStateMachine+0x220>)
 80014d4:	4831      	ldr	r0, [pc, #196]	; (800159c <ROMStateMachine+0x224>)
 80014d6:	f004 fa25 	bl	8005924 <HAL_UART_Transmit_DMA>
                HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),state.ROM_RxCount*8);
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <ROMStateMachine+0x21c>)
 80014dc:	7b5b      	ldrb	r3, [r3, #13]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	492b      	ldr	r1, [pc, #172]	; (8001598 <ROMStateMachine+0x220>)
 80014ea:	482c      	ldr	r0, [pc, #176]	; (800159c <ROMStateMachine+0x224>)
 80014ec:	f004 fa98 	bl	8005a20 <HAL_UART_Receive_DMA>
		state.ROM++;
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <ROMStateMachine+0x21c>)
 80014f2:	7e9b      	ldrb	r3, [r3, #26]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b26      	ldr	r3, [pc, #152]	; (8001594 <ROMStateMachine+0x21c>)
 80014fc:	769a      	strb	r2, [r3, #26]
		break;
 80014fe:	e041      	b.n	8001584 <ROMStateMachine+0x20c>
            }
	    state.ROM++;
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <ROMStateMachine+0x21c>)
 8001502:	7e9b      	ldrb	r3, [r3, #26]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3301      	adds	r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <ROMStateMachine+0x21c>)
 800150c:	769a      	strb	r2, [r3, #26]
        case 2:
            if (state.ROM_RxCount!=0){
 800150e:	4b21      	ldr	r3, [pc, #132]	; (8001594 <ROMStateMachine+0x21c>)
 8001510:	7b5b      	ldrb	r3, [r3, #13]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d031      	beq.n	800157c <ROMStateMachine+0x204>
        		for (uint8_t i=0;i<state.ROM_RxCount;i++)
 8001518:	2300      	movs	r3, #0
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	e028      	b.n	8001570 <ROMStateMachine+0x1f8>
	                	for (uint8_t j=0;j<8;j++)
 800151e:	2300      	movs	r3, #0
 8001520:	70bb      	strb	r3, [r7, #2]
 8001522:	e01f      	b.n	8001564 <ROMStateMachine+0x1ec>
	      	  	        state.ROM_RxBuffer[i]=state.ROM_RxBuffer[i]+
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <ROMStateMachine+0x21c>)
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	4413      	add	r3, r2
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	b2d9      	uxtb	r1, r3
					(((internal_Buffer[i*8+j]==0xff)?0x01:0x00)<<j);
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	78bb      	ldrb	r3, [r7, #2]
 8001536:	4413      	add	r3, r2
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <ROMStateMachine+0x220>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	2bff      	cmp	r3, #255	; 0xff
 800153e:	bf0c      	ite	eq
 8001540:	2301      	moveq	r3, #1
 8001542:	2300      	movne	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	78bb      	ldrb	r3, [r7, #2]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
	      	  	        state.ROM_RxBuffer[i]=state.ROM_RxBuffer[i]+
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <ROMStateMachine+0x21c>)
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	4403      	add	r3, r0
 8001558:	440a      	add	r2, r1
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	701a      	strb	r2, [r3, #0]
	                	for (uint8_t j=0;j<8;j++)
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	3301      	adds	r3, #1
 8001562:	70bb      	strb	r3, [r7, #2]
 8001564:	78bb      	ldrb	r3, [r7, #2]
 8001566:	2b07      	cmp	r3, #7
 8001568:	d9dc      	bls.n	8001524 <ROMStateMachine+0x1ac>
        		for (uint8_t i=0;i<state.ROM_RxCount;i++)
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	3301      	adds	r3, #1
 800156e:	70fb      	strb	r3, [r7, #3]
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <ROMStateMachine+0x21c>)
 8001572:	7b5b      	ldrb	r3, [r3, #13]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	78fa      	ldrb	r2, [r7, #3]
 8001578:	429a      	cmp	r2, r3
 800157a:	d3d0      	bcc.n	800151e <ROMStateMachine+0x1a6>
	    }
            state.ROM=0;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <ROMStateMachine+0x21c>)
 800157e:	2200      	movs	r2, #0
 8001580:	769a      	strb	r2, [r3, #26]
            break;
 8001582:	bf00      	nop
        }
    return state.ROM;
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <ROMStateMachine+0x21c>)
 8001586:	7e9b      	ldrb	r3, [r3, #26]
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000274 	.word	0x20000274
 8001598:	20000290 	.word	0x20000290
 800159c:	200007a8 	.word	0x200007a8

080015a0 <FunctionStateMachine>:

uint8_t FunctionStateMachine(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
    switch(state.Function){
 80015a6:	4b85      	ldr	r3, [pc, #532]	; (80017bc <FunctionStateMachine+0x21c>)
 80015a8:	7edb      	ldrb	r3, [r3, #27]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f000 80c2 	beq.w	8001736 <FunctionStateMachine+0x196>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	f300 80fa 	bgt.w	80017ac <FunctionStateMachine+0x20c>
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <FunctionStateMachine+0x22>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d030      	beq.n	8001622 <FunctionStateMachine+0x82>
 80015c0:	e0f4      	b.n	80017ac <FunctionStateMachine+0x20c>
        case 0:
            OneWire_UARTInit(115200);
 80015c2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80015c6:	f7ff fe3b 	bl	8001240 <OneWire_UARTInit>
            for (uint8_t i=0;i<8;i++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	e013      	b.n	80015f8 <FunctionStateMachine+0x58>
                internal_Buffer[i]=((state.Function_Command>>i)&0x01)?0xff:0x00;
 80015d0:	4b7a      	ldr	r3, [pc, #488]	; (80017bc <FunctionStateMachine+0x21c>)
 80015d2:	789b      	ldrb	r3, [r3, #2]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	fa42 f303 	asr.w	r3, r2, r3
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <FunctionStateMachine+0x4a>
 80015e6:	21ff      	movs	r1, #255	; 0xff
 80015e8:	e000      	b.n	80015ec <FunctionStateMachine+0x4c>
 80015ea:	2100      	movs	r1, #0
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4a74      	ldr	r2, [pc, #464]	; (80017c0 <FunctionStateMachine+0x220>)
 80015f0:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i=0;i<8;i++)
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3301      	adds	r3, #1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	d9e8      	bls.n	80015d0 <FunctionStateMachine+0x30>
            HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),8);
 80015fe:	2208      	movs	r2, #8
 8001600:	496f      	ldr	r1, [pc, #444]	; (80017c0 <FunctionStateMachine+0x220>)
 8001602:	4870      	ldr	r0, [pc, #448]	; (80017c4 <FunctionStateMachine+0x224>)
 8001604:	f004 f98e 	bl	8005924 <HAL_UART_Transmit_DMA>
            HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),8);
 8001608:	2208      	movs	r2, #8
 800160a:	496d      	ldr	r1, [pc, #436]	; (80017c0 <FunctionStateMachine+0x220>)
 800160c:	486d      	ldr	r0, [pc, #436]	; (80017c4 <FunctionStateMachine+0x224>)
 800160e:	f004 fa07 	bl	8005a20 <HAL_UART_Receive_DMA>
            state.Function++;
 8001612:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <FunctionStateMachine+0x21c>)
 8001614:	7edb      	ldrb	r3, [r3, #27]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b67      	ldr	r3, [pc, #412]	; (80017bc <FunctionStateMachine+0x21c>)
 800161e:	76da      	strb	r2, [r3, #27]
            break;
 8001620:	e0c4      	b.n	80017ac <FunctionStateMachine+0x20c>
        case 1: // continue by sending necessary Tx buffer
            if (state.Function_TxCount!=0){
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <FunctionStateMachine+0x21c>)
 8001624:	7e1b      	ldrb	r3, [r3, #24]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d049      	beq.n	80016c0 <FunctionStateMachine+0x120>
                for (uint8_t i=0;i<state.Function_TxCount;i++)
 800162c:	2300      	movs	r3, #0
 800162e:	71bb      	strb	r3, [r7, #6]
 8001630:	e022      	b.n	8001678 <FunctionStateMachine+0xd8>
                    for (uint8_t j=0;j<8;j++)
 8001632:	2300      	movs	r3, #0
 8001634:	717b      	strb	r3, [r7, #5]
 8001636:	e019      	b.n	800166c <FunctionStateMachine+0xcc>
                        internal_Buffer[i*8+j]=((state.Function_TxBuffer[i]>>j)&0x01)?0xff:0x00;
 8001638:	4b60      	ldr	r3, [pc, #384]	; (80017bc <FunctionStateMachine+0x21c>)
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	79bb      	ldrb	r3, [r7, #6]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	fa42 f303 	asr.w	r3, r2, r3
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <FunctionStateMachine+0xb8>
 8001654:	21ff      	movs	r1, #255	; 0xff
 8001656:	e000      	b.n	800165a <FunctionStateMachine+0xba>
 8001658:	2100      	movs	r1, #0
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	00da      	lsls	r2, r3, #3
 800165e:	797b      	ldrb	r3, [r7, #5]
 8001660:	4413      	add	r3, r2
 8001662:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <FunctionStateMachine+0x220>)
 8001664:	54d1      	strb	r1, [r2, r3]
                    for (uint8_t j=0;j<8;j++)
 8001666:	797b      	ldrb	r3, [r7, #5]
 8001668:	3301      	adds	r3, #1
 800166a:	717b      	strb	r3, [r7, #5]
 800166c:	797b      	ldrb	r3, [r7, #5]
 800166e:	2b07      	cmp	r3, #7
 8001670:	d9e2      	bls.n	8001638 <FunctionStateMachine+0x98>
                for (uint8_t i=0;i<state.Function_TxCount;i++)
 8001672:	79bb      	ldrb	r3, [r7, #6]
 8001674:	3301      	adds	r3, #1
 8001676:	71bb      	strb	r3, [r7, #6]
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <FunctionStateMachine+0x21c>)
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3d6      	bcc.n	8001632 <FunctionStateMachine+0x92>
                HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),state.Function_TxCount*8);
 8001684:	4b4d      	ldr	r3, [pc, #308]	; (80017bc <FunctionStateMachine+0x21c>)
 8001686:	7e1b      	ldrb	r3, [r3, #24]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	b29b      	uxth	r3, r3
 8001690:	461a      	mov	r2, r3
 8001692:	494b      	ldr	r1, [pc, #300]	; (80017c0 <FunctionStateMachine+0x220>)
 8001694:	484b      	ldr	r0, [pc, #300]	; (80017c4 <FunctionStateMachine+0x224>)
 8001696:	f004 f945 	bl	8005924 <HAL_UART_Transmit_DMA>
                HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),state.Function_TxCount*8);
 800169a:	4b48      	ldr	r3, [pc, #288]	; (80017bc <FunctionStateMachine+0x21c>)
 800169c:	7e1b      	ldrb	r3, [r3, #24]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4945      	ldr	r1, [pc, #276]	; (80017c0 <FunctionStateMachine+0x220>)
 80016aa:	4846      	ldr	r0, [pc, #280]	; (80017c4 <FunctionStateMachine+0x224>)
 80016ac:	f004 f9b8 	bl	8005a20 <HAL_UART_Receive_DMA>
	        state.Function++;
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <FunctionStateMachine+0x21c>)
 80016b2:	7edb      	ldrb	r3, [r3, #27]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b40      	ldr	r3, [pc, #256]	; (80017bc <FunctionStateMachine+0x21c>)
 80016bc:	76da      	strb	r2, [r3, #27]
		break;
 80016be:	e075      	b.n	80017ac <FunctionStateMachine+0x20c>
            }
            if (state.Function_RxCount!=0){
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <FunctionStateMachine+0x21c>)
 80016c2:	7e5b      	ldrb	r3, [r3, #25]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d02e      	beq.n	8001728 <FunctionStateMachine+0x188>
                for (uint8_t i=0;i<=state.Function_RxCount*8;i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	713b      	strb	r3, [r7, #4]
 80016ce:	e006      	b.n	80016de <FunctionStateMachine+0x13e>
                    internal_Buffer[i]=0xff;
 80016d0:	793b      	ldrb	r3, [r7, #4]
 80016d2:	4a3b      	ldr	r2, [pc, #236]	; (80017c0 <FunctionStateMachine+0x220>)
 80016d4:	21ff      	movs	r1, #255	; 0xff
 80016d6:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i=0;i<=state.Function_RxCount*8;i++)
 80016d8:	793b      	ldrb	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	713b      	strb	r3, [r7, #4]
 80016de:	793a      	ldrb	r2, [r7, #4]
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <FunctionStateMachine+0x21c>)
 80016e2:	7e5b      	ldrb	r3, [r3, #25]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	429a      	cmp	r2, r3
 80016ea:	ddf1      	ble.n	80016d0 <FunctionStateMachine+0x130>
                HAL_UART_Transmit_DMA(&huart2,&(internal_Buffer[0]),state.Function_RxCount*8);
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <FunctionStateMachine+0x21c>)
 80016ee:	7e5b      	ldrb	r3, [r3, #25]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	461a      	mov	r2, r3
 80016fa:	4931      	ldr	r1, [pc, #196]	; (80017c0 <FunctionStateMachine+0x220>)
 80016fc:	4831      	ldr	r0, [pc, #196]	; (80017c4 <FunctionStateMachine+0x224>)
 80016fe:	f004 f911 	bl	8005924 <HAL_UART_Transmit_DMA>
                HAL_UART_Receive_DMA(&huart2,&(internal_Buffer[0]),state.Function_RxCount*8);
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <FunctionStateMachine+0x21c>)
 8001704:	7e5b      	ldrb	r3, [r3, #25]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	b29b      	uxth	r3, r3
 800170e:	461a      	mov	r2, r3
 8001710:	492b      	ldr	r1, [pc, #172]	; (80017c0 <FunctionStateMachine+0x220>)
 8001712:	482c      	ldr	r0, [pc, #176]	; (80017c4 <FunctionStateMachine+0x224>)
 8001714:	f004 f984 	bl	8005a20 <HAL_UART_Receive_DMA>
		state.Function++;
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <FunctionStateMachine+0x21c>)
 800171a:	7edb      	ldrb	r3, [r3, #27]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <FunctionStateMachine+0x21c>)
 8001724:	76da      	strb	r2, [r3, #27]
		break;
 8001726:	e041      	b.n	80017ac <FunctionStateMachine+0x20c>
            }
	    state.Function++;
 8001728:	4b24      	ldr	r3, [pc, #144]	; (80017bc <FunctionStateMachine+0x21c>)
 800172a:	7edb      	ldrb	r3, [r3, #27]
 800172c:	b2db      	uxtb	r3, r3
 800172e:	3301      	adds	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <FunctionStateMachine+0x21c>)
 8001734:	76da      	strb	r2, [r3, #27]
        case 2:
	    if (state.Function_RxCount!=0){
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <FunctionStateMachine+0x21c>)
 8001738:	7e5b      	ldrb	r3, [r3, #25]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d031      	beq.n	80017a4 <FunctionStateMachine+0x204>
		for (uint8_t i=0;i<state.Function_RxCount;i++)
 8001740:	2300      	movs	r3, #0
 8001742:	70fb      	strb	r3, [r7, #3]
 8001744:	e028      	b.n	8001798 <FunctionStateMachine+0x1f8>
         	    for (uint8_t j=0;j<8;j++)
 8001746:	2300      	movs	r3, #0
 8001748:	70bb      	strb	r3, [r7, #2]
 800174a:	e01f      	b.n	800178c <FunctionStateMachine+0x1ec>
			state.Function_RxBuffer[i]=state.Function_RxBuffer[i]+
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <FunctionStateMachine+0x21c>)
 800174e:	695a      	ldr	r2, [r3, #20]
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	4413      	add	r3, r2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b2d9      	uxtb	r1, r3
				(((internal_Buffer[i*8+j]==0xff)?0x01:0x00)<<j);
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	00da      	lsls	r2, r3, #3
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <FunctionStateMachine+0x220>)
 8001762:	5cd3      	ldrb	r3, [r2, r3]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	78bb      	ldrb	r3, [r7, #2]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
			state.Function_RxBuffer[i]=state.Function_RxBuffer[i]+
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <FunctionStateMachine+0x21c>)
 800177a:	6958      	ldr	r0, [r3, #20]
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	4403      	add	r3, r0
 8001780:	440a      	add	r2, r1
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]
         	    for (uint8_t j=0;j<8;j++)
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	3301      	adds	r3, #1
 800178a:	70bb      	strb	r3, [r7, #2]
 800178c:	78bb      	ldrb	r3, [r7, #2]
 800178e:	2b07      	cmp	r3, #7
 8001790:	d9dc      	bls.n	800174c <FunctionStateMachine+0x1ac>
		for (uint8_t i=0;i<state.Function_RxCount;i++)
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	3301      	adds	r3, #1
 8001796:	70fb      	strb	r3, [r7, #3]
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <FunctionStateMachine+0x21c>)
 800179a:	7e5b      	ldrb	r3, [r3, #25]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3d0      	bcc.n	8001746 <FunctionStateMachine+0x1a6>
	    }
            state.Function=0;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <FunctionStateMachine+0x21c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	76da      	strb	r2, [r3, #27]
	    break;
 80017aa:	bf00      	nop
    }
    return state.Function;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <FunctionStateMachine+0x21c>)
 80017ae:	7edb      	ldrb	r3, [r3, #27]
 80017b0:	b2db      	uxtb	r3, r3
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000274 	.word	0x20000274
 80017c0:	20000290 	.word	0x20000290
 80017c4:	200007a8 	.word	0x200007a8

080017c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <MX_GPIO_Init+0x124>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a41      	ldr	r2, [pc, #260]	; (80018ec <MX_GPIO_Init+0x124>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b3f      	ldr	r3, [pc, #252]	; (80018ec <MX_GPIO_Init+0x124>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <MX_GPIO_Init+0x124>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a3a      	ldr	r2, [pc, #232]	; (80018ec <MX_GPIO_Init+0x124>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <MX_GPIO_Init+0x124>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <MX_GPIO_Init+0x124>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a33      	ldr	r2, [pc, #204]	; (80018ec <MX_GPIO_Init+0x124>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b31      	ldr	r3, [pc, #196]	; (80018ec <MX_GPIO_Init+0x124>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <MX_GPIO_Init+0x124>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a2c      	ldr	r2, [pc, #176]	; (80018ec <MX_GPIO_Init+0x124>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <MX_GPIO_Init+0x124>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001854:	4826      	ldr	r0, [pc, #152]	; (80018f0 <MX_GPIO_Init+0x128>)
 8001856:	f002 fbad 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 800185a:	2200      	movs	r2, #0
 800185c:	f24f 0107 	movw	r1, #61447	; 0xf007
 8001860:	4824      	ldr	r0, [pc, #144]	; (80018f4 <MX_GPIO_Init+0x12c>)
 8001862:	f002 fba7 	bl	8003fb4 <HAL_GPIO_WritePin>
                          |MS1_Pin|MS2_Pin|MS3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186c:	4822      	ldr	r0, [pc, #136]	; (80018f8 <MX_GPIO_Init+0x130>)
 800186e:	f002 fba1 	bl	8003fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4819      	ldr	r0, [pc, #100]	; (80018f0 <MX_GPIO_Init+0x128>)
 800188c:	f002 fa0e 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4815      	ldr	r0, [pc, #84]	; (80018f8 <MX_GPIO_Init+0x130>)
 80018a4:	f002 fa02 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = S_SLEEP_Pin|STEP_Pin|DIR_Pin|S_ENABLE_Pin
 80018a8:	f24f 0307 	movw	r3, #61447	; 0xf007
 80018ac:	617b      	str	r3, [r7, #20]
                          |MS1_Pin|MS2_Pin|MS3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <MX_GPIO_Init+0x12c>)
 80018c2:	f002 f9f3 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S_RESET_Pin;
 80018c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(S_RESET_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_GPIO_Init+0x130>)
 80018e0:	f002 f9e4 	bl	8003cac <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020000 	.word	0x40020000

080018fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C1_Init+0x50>)
 800193a:	f002 fb55 	bl	8003fe8 <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001944:	f000 fa42 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200002e4 	.word	0x200002e4
 8001950:	40005400 	.word	0x40005400
 8001954:	00061a80 	.word	0x00061a80

08001958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	; 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_I2C_MspInit+0x84>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12b      	bne.n	80019d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001996:	23c0      	movs	r3, #192	; 0xc0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199a:	2312      	movs	r3, #18
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a6:	2304      	movs	r3, #4
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <HAL_I2C_MspInit+0x8c>)
 80019b2:	f002 f97b 	bl	8003cac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_I2C_MspInit+0x88>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40005400 	.word	0x40005400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_TIM_IC_CaptureCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern float Temp[MAXDEVICES_ON_THE_BUS];

void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	counter = __HAL_TIM_GET_COUNTER(htim) / 2;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019fa:	6013      	str	r3, [r2, #0]
	if (counter > 30000)
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f247 5230 	movw	r2, #30000	; 0x7530
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d906      	bls.n	8001a16 <HAL_TIM_IC_CaptureCallback+0x2e>
	{
		__HAL_TIM_SetCounter(&htim3,0);
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24
		counter=0;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
	}
	if (counter > counter_limit)
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f643 32c4 	movw	r2, #15300	; 0x3bc4
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d90a      	bls.n	8001a38 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		__HAL_TIM_SetCounter(&htim3, counter_limit * 2);
 8001a22:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001a26:	005a      	lsls	r2, r3, #1
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24
		counter=counter_limit;
 8001a2e:	f643 33c4 	movw	r3, #15300	; 0x3bc4
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a36:	601a      	str	r2, [r3, #0]
	}
	counter_position = (int16_t)counter;
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001a40:	801a      	strh	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000344 	.word	0x20000344
 8001a54:	20000760 	.word	0x20000760
 8001a58:	20000348 	.word	0x20000348
 8001a5c:	00000000 	.word	0x00000000

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a64:	f000 ffba 	bl	80029dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a68:	f000 f948 	bl	8001cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6c:	f7ff feac 	bl	80017c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a70:	f7ff fbb6 	bl	80011e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a74:	f7ff ff42 	bl	80018fc <MX_I2C1_Init>
  MX_ADC1_Init();
 8001a78:	f7ff fb1c 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001a7c:	f000 fdde 	bl	800263c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001a80:	f000 fe80 	bl	8002784 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT (&htim3, TIM_CHANNEL_ALL   );
 8001a84:	213c      	movs	r1, #60	; 0x3c
 8001a86:	488c      	ldr	r0, [pc, #560]	; (8001cb8 <main+0x258>)
 8001a88:	f003 fbf8 	bl	800527c <HAL_TIM_Encoder_Start_IT>
  /* Initialize stepper motor controller */
  HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET); // set high for half step
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a92:	488a      	ldr	r0, [pc, #552]	; (8001cbc <main+0x25c>)
 8001a94:	f002 fa8e 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET); // set for microstep
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	4887      	ldr	r0, [pc, #540]	; (8001cbc <main+0x25c>)
 8001aa0:	f002 fa88 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET); // set for microstep
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	4884      	ldr	r0, [pc, #528]	; (8001cbc <main+0x25c>)
 8001aac:	f002 fa82 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_SLEEP_GPIO_Port, S_SLEEP_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4881      	ldr	r0, [pc, #516]	; (8001cbc <main+0x25c>)
 8001ab6:	f002 fa7d 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac0:	487e      	ldr	r0, [pc, #504]	; (8001cbc <main+0x25c>)
 8001ac2:	f002 fa77 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2102      	movs	r1, #2
 8001aca:	487c      	ldr	r0, [pc, #496]	; (8001cbc <main+0x25c>)
 8001acc:	f002 fa72 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2104      	movs	r1, #4
 8001ad4:	4879      	ldr	r0, [pc, #484]	; (8001cbc <main+0x25c>)
 8001ad6:	f002 fa6d 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae0:	4877      	ldr	r0, [pc, #476]	; (8001cc0 <main+0x260>)
 8001ae2:	f002 fa67 	bl	8003fb4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001ae6:	2064      	movs	r0, #100	; 0x64
 8001ae8:	f000 ffea 	bl	8002ac0 <HAL_Delay>
  HAL_GPIO_WritePin(S_RESET_GPIO_Port, S_RESET_Pin, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af2:	4873      	ldr	r0, [pc, #460]	; (8001cc0 <main+0x260>)
 8001af4:	f002 fa5e 	bl	8003fb4 <HAL_GPIO_WritePin>

// OLED init
  SSD1306_Init(&oled);
 8001af8:	4872      	ldr	r0, [pc, #456]	; (8001cc4 <main+0x264>)
 8001afa:	f000 f96d 	bl	8001dd8 <SSD1306_Init>
  SSD1306_GotoXY(0, 0);
 8001afe:	2100      	movs	r1, #0
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 fb0d 	bl	8002120 <SSD1306_GotoXY>
  SSD1306_Puts("SH1106", &Font_11x18, SSD1306_COLOR_WHITE);
 8001b06:	2201      	movs	r2, #1
 8001b08:	496f      	ldr	r1, [pc, #444]	; (8001cc8 <main+0x268>)
 8001b0a:	4870      	ldr	r0, [pc, #448]	; (8001ccc <main+0x26c>)
 8001b0c:	f000 fb9e 	bl	800224c <SSD1306_Puts>
  HAL_ADC_Start(&hadc1);
 8001b10:	486f      	ldr	r0, [pc, #444]	; (8001cd0 <main+0x270>)
 8001b12:	f001 f83d 	bl	8002b90 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b16:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1a:	486d      	ldr	r0, [pc, #436]	; (8001cd0 <main+0x270>)
 8001b1c:	f001 f8ec 	bl	8002cf8 <HAL_ADC_PollForConversion>
  raw = HAL_ADC_GetValue(&hadc1);
 8001b20:	486b      	ldr	r0, [pc, #428]	; (8001cd0 <main+0x270>)
 8001b22:	f001 f974 	bl	8002e0e <HAL_ADC_GetValue>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <main+0x274>)
 8001b2c:	601a      	str	r2, [r3, #0]
  voltage = raw /  187.3 ; // Umcu = 3.375V
 8001b2e:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <main+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fcfe 	bl	8000534 <__aeabi_i2d>
 8001b38:	a35d      	add	r3, pc, #372	; (adr r3, 8001cb0 <main+0x250>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fe8d 	bl	800085c <__aeabi_ddiv>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff f855 	bl	8000bf8 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a61      	ldr	r2, [pc, #388]	; (8001cd8 <main+0x278>)
 8001b52:	6013      	str	r3, [r2, #0]
  sprintf(text, "%1.2f", voltage);
 8001b54:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <main+0x278>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcfd 	bl	8000558 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	495e      	ldr	r1, [pc, #376]	; (8001cdc <main+0x27c>)
 8001b64:	485e      	ldr	r0, [pc, #376]	; (8001ce0 <main+0x280>)
 8001b66:	f005 ff1d 	bl	80079a4 <siprintf>
  SSD1306_GotoXY (0, 20);
 8001b6a:	2114      	movs	r1, #20
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 fad7 	bl	8002120 <SSD1306_GotoXY>
  SSD1306_Puts (text, &Font_11x18, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	4954      	ldr	r1, [pc, #336]	; (8001cc8 <main+0x268>)
 8001b76:	485a      	ldr	r0, [pc, #360]	; (8001ce0 <main+0x280>)
 8001b78:	f000 fb68 	bl	800224c <SSD1306_Puts>
  SSD1306_Puts ("V", &Font_11x18, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4952      	ldr	r1, [pc, #328]	; (8001cc8 <main+0x268>)
 8001b80:	4858      	ldr	r0, [pc, #352]	; (8001ce4 <main+0x284>)
 8001b82:	f000 fb63 	bl	800224c <SSD1306_Puts>
//  SSD1306_dim(127);
  SSD1306_UpdateScreen(); // update screen
 8001b86:	f000 fa1b 	bl	8001fc0 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b8e:	f000 ff97 	bl	8002ac0 <HAL_Delay>

  OneWire_Init();
 8001b92:	f7ff fb4d 	bl	8001230 <OneWire_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9c:	4852      	ldr	r0, [pc, #328]	; (8001ce8 <main+0x288>)
 8001b9e:	f002 fa09 	bl	8003fb4 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001ba2:	e05e      	b.n	8001c62 <main+0x202>
	  {
		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001baa:	4844      	ldr	r0, [pc, #272]	; (8001cbc <main+0x25c>)
 8001bac:	f002 fa02 	bl	8003fb4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	484c      	ldr	r0, [pc, #304]	; (8001ce8 <main+0x288>)
 8001bb8:	f002 f9fc 	bl	8003fb4 <HAL_GPIO_WritePin>
		  if (motor_position < counter_position)
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <main+0x28c>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <main+0x290>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dd22      	ble.n	8001c12 <main+0x1b2>
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2104      	movs	r1, #4
 8001bd0:	483a      	ldr	r0, [pc, #232]	; (8001cbc <main+0x25c>)
 8001bd2:	f002 f9ef 	bl	8003fb4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4838      	ldr	r0, [pc, #224]	; (8001cbc <main+0x25c>)
 8001bdc:	f002 f9ea 	bl	8003fb4 <HAL_GPIO_WritePin>
			  motor_position = motor_position + 1 ;
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <main+0x290>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <main+0x290>)
 8001be8:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2102      	movs	r1, #2
 8001bee:	4833      	ldr	r0, [pc, #204]	; (8001cbc <main+0x25c>)
 8001bf0:	f002 f9e0 	bl	8003fb4 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	; (8001cf4 <main+0x294>)
 8001bf6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001bfa:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001bfc:	e004      	b.n	8001c08 <main+0x1a8>
 8001bfe:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <main+0x294>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <main+0x294>)
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <main+0x294>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f6      	bne.n	8001bfe <main+0x19e>
 8001c10:	e021      	b.n	8001c56 <main+0x1f6>
		  }
		  else
		  {

			  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2104      	movs	r1, #4
 8001c16:	4829      	ldr	r0, [pc, #164]	; (8001cbc <main+0x25c>)
 8001c18:	f002 f9cc 	bl	8003fb4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2102      	movs	r1, #2
 8001c20:	4826      	ldr	r0, [pc, #152]	; (8001cbc <main+0x25c>)
 8001c22:	f002 f9c7 	bl	8003fb4 <HAL_GPIO_WritePin>
			  motor_position = motor_position - 1 ;
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <main+0x290>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <main+0x290>)
 8001c2e:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2102      	movs	r1, #2
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <main+0x25c>)
 8001c36:	f002 f9bd 	bl	8003fb4 <HAL_GPIO_WritePin>
			  us_delay = 7500;
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <main+0x294>)
 8001c3c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001c40:	601a      	str	r2, [r3, #0]
			  while (us_delay) { us_delay = us_delay - 1;}
 8001c42:	e004      	b.n	8001c4e <main+0x1ee>
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <main+0x294>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <main+0x294>)
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <main+0x294>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f6      	bne.n	8001c44 <main+0x1e4>
		  }
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5c:	4822      	ldr	r0, [pc, #136]	; (8001ce8 <main+0x288>)
 8001c5e:	f002 f9a9 	bl	8003fb4 <HAL_GPIO_WritePin>
	  while (motor_position != counter_position)
 8001c62:	4b22      	ldr	r3, [pc, #136]	; (8001cec <main+0x28c>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <main+0x290>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d198      	bne.n	8001ba4 <main+0x144>
//		  HAL_GPIO_WritePin(S_ENABLE_GPIO_Port, S_ENABLE_Pin, GPIO_PIN_SET);
	  }


	  sprintf(text, "%5i", counter_position);
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <main+0x28c>)
 8001c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	491f      	ldr	r1, [pc, #124]	; (8001cf8 <main+0x298>)
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <main+0x280>)
 8001c7e:	f005 fe91 	bl	80079a4 <siprintf>
	  SSD1306_Fill(0);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f000 f9d4 	bl	8002030 <SSD1306_Fill>
	  SSD1306_GotoXY(0, 0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f000 fa48 	bl	8002120 <SSD1306_GotoXY>
	  SSD1306_Puts (text, &Font_11x18, 1);
 8001c90:	2201      	movs	r2, #1
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <main+0x268>)
 8001c94:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <main+0x280>)
 8001c96:	f000 fad9 	bl	800224c <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001c9a:	f000 f991 	bl	8001fc0 <SSD1306_UpdateScreen>

	  OneWire_Init();
 8001c9e:	f7ff fac7 	bl	8001230 <OneWire_Init>
	  OneWire_Execute(0xcc,0,0,0); // skip rom phase
	  OneWire_Execute(0xcc,0,0xbe,&(FunctionBuffer[0])); // start to read configuration & result
*/


	  HAL_Delay (100);
 8001ca2:	2064      	movs	r0, #100	; 0x64
 8001ca4:	f000 ff0c 	bl	8002ac0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ca8:	e775      	b.n	8001b96 <main+0x136>
 8001caa:	bf00      	nop
 8001cac:	f3af 8000 	nop.w
 8001cb0:	9999999a 	.word	0x9999999a
 8001cb4:	40676999 	.word	0x40676999
 8001cb8:	20000760 	.word	0x20000760
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	20000008 	.word	0x20000008
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	0800b5a0 	.word	0x0800b5a0
 8001cd0:	2000022c 	.word	0x2000022c
 8001cd4:	2000033c 	.word	0x2000033c
 8001cd8:	20000340 	.word	0x20000340
 8001cdc:	0800b5a8 	.word	0x0800b5a8
 8001ce0:	20000014 	.word	0x20000014
 8001ce4:	0800b5b0 	.word	0x0800b5b0
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	20000348 	.word	0x20000348
 8001cf0:	20000338 	.word	0x20000338
 8001cf4:	2000034c 	.word	0x2000034c
 8001cf8:	0800b5b4 	.word	0x0800b5b4

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b094      	sub	sp, #80	; 0x50
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2230      	movs	r2, #48	; 0x30
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 ffc2 	bl	8006c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <SystemClock_Config+0xc8>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a20      	ldr	r2, [pc, #128]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <SystemClock_Config+0xcc>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001d6c:	230d      	movs	r3, #13
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001d70:	2368      	movs	r3, #104	; 0x68
 8001d72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	4618      	mov	r0, r3
 8001d82:	f002 fd7d 	bl	8004880 <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d8c:	f000 f81e 	bl	8001dcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2103      	movs	r1, #3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 ffdf 	bl	8004d70 <HAL_RCC_ClockConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001db8:	f000 f808 	bl	8001dcc <Error_Handler>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3750      	adds	r7, #80	; 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000

08001dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd0:	b672      	cpsid	i
}
 8001dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <Error_Handler+0x8>
	...

08001dd8 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(OledHandleTypedef *mydev)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

    /* Init I2C */
    dev = mydev;
 8001de0:	4a75      	ldr	r2, [pc, #468]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]

    /* A little delay */
    uint32_t p = 2500;
 8001de6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001dea:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001dec:	e002      	b.n	8001df4 <SSD1306_Init+0x1c>
        p--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	60fb      	str	r3, [r7, #12]
    while(p>0)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f9      	bne.n	8001dee <SSD1306_Init+0x16>

    /* Init LCD */
    SSD1306_WRITECOMMAND(0xAE); //display off
 8001dfa:	21ae      	movs	r1, #174	; 0xae
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f000 faa9 	bl	8002354 <ssd1306_I2C_Write>

    if(dev->type == SSD1306_I2C) {
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <SSD1306_Init+0x44>
        SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f000 faa0 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x10); //00:Horizontal, 01:Vertical,10:Page, 11:Invalid
 8001e14:	2110      	movs	r1, #16
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 fa9c 	bl	8002354 <ssd1306_I2C_Write>
    }                           // Note: SH1106 has only Page mode

    SSD1306_WRITECOMMAND(0xB0); //Set Page Address for Page Addressing Mode,0-7
 8001e1c:	21b0      	movs	r1, #176	; 0xb0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f000 fa98 	bl	8002354 <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) {
 8001e24:	4b64      	ldr	r3, [pc, #400]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d104      	bne.n	8001e38 <SSD1306_Init+0x60>
        SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 8001e2e:	2102      	movs	r1, #2
 8001e30:	2000      	movs	r0, #0
 8001e32:	f000 fa8f 	bl	8002354 <ssd1306_I2C_Write>
 8001e36:	e003      	b.n	8001e40 <SSD1306_Init+0x68>
    } else {
        SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306 ***
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 fa8a 	bl	8002354 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001e40:	2110      	movs	r1, #16
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 fa86 	bl	8002354 <ssd1306_I2C_Write>

    if(dev->orientation == 0) { //--- This is the "normal" direction
 8001e48:	4b5b      	ldr	r3, [pc, #364]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	885b      	ldrh	r3, [r3, #2]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <SSD1306_Init+0x8c>
        SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127
 8001e52:	21a0      	movs	r1, #160	; 0xa0
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 fa7d 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction 0 to 63
 8001e5a:	21c0      	movs	r1, #192	; 0xc0
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f000 fa79 	bl	8002354 <ssd1306_I2C_Write>
 8001e62:	e007      	b.n	8001e74 <SSD1306_Init+0x9c>
    } else {                    //--- This is the "upside down" direction
        SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 127 to 0
 8001e64:	21a1      	movs	r1, #161	; 0xa1
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 fa74 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction 63 to 0
 8001e6c:	21c8      	movs	r1, #200	; 0xc8
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 fa70 	bl	8002354 <ssd1306_I2C_Write>
    }
    if(dev->type == SH1106_I2C) {
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d103      	bne.n	8001e86 <SSD1306_Init+0xae>
        SSD1306_WRITECOMMAND(0x32); //--set pump voltage value to 8.0V (SH1106 only)
 8001e7e:	2132      	movs	r1, #50	; 0x32
 8001e80:	2000      	movs	r0, #0
 8001e82:	f000 fa67 	bl	8002354 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 fa63 	bl	8002354 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001e8e:	2181      	movs	r1, #129	; 0x81
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 fa5f 	bl	8002354 <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d104      	bne.n	8001eaa <SSD1306_Init+0xd2>
        SSD1306_WRITECOMMAND(0x80); //  POR value = 80 for SH1106
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 fa56 	bl	8002354 <ssd1306_I2C_Write>
 8001ea8:	e003      	b.n	8001eb2 <SSD1306_Init+0xda>
    } else if(SSD1306_HEIGHT == 32) {
        SSD1306_WRITECOMMAND(0x8F); // 0x8F for 32 line SSD1306
    } else {
        SSD1306_WRITECOMMAND(0xFF); // 0xFF for 64 line SSD1306
 8001eaa:	21ff      	movs	r1, #255	; 0xff
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 fa51 	bl	8002354 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xA4); // 0xa4,normal output 0xa5,highlight all pixels
 8001eb2:	21a4      	movs	r1, #164	; 0xa4
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 fa4d 	bl	8002354 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001eba:	21a6      	movs	r1, #166	; 0xa6
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 fa49 	bl	8002354 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ec2:	21a8      	movs	r1, #168	; 0xa8
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f000 fa45 	bl	8002354 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(SSD1306_HEIGHT-1); //*** 31 or 63
 8001eca:	213f      	movs	r1, #63	; 0x3f
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 fa41 	bl	8002354 <ssd1306_I2C_Write>

    SSD1306_WRITECOMMAND(0xD3); //--set display offset
 8001ed2:	21d3      	movs	r1, #211	; 0xd3
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 fa3d 	bl	8002354 <ssd1306_I2C_Write>
    SSD1306_WRITECOMMAND(0x00); //  no offset
 8001eda:	2100      	movs	r1, #0
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 fa39 	bl	8002354 <ssd1306_I2C_Write>

    if(dev->type == SH1106_I2C) { // SH1106 with 64 line display
 8001ee2:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d110      	bne.n	8001f0e <SSD1306_Init+0x136>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001eec:	21d5      	movs	r1, #213	; 0xd5
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 fa30 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x50); //  set frequency and divide ratio
 8001ef4:	2150      	movs	r1, #80	; 0x50
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f000 fa2c 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set dis-charge/pre-charge period
 8001efc:	21d9      	movs	r1, #217	; 0xd9
 8001efe:	2000      	movs	r0, #0
 8001f00:	f000 fa28 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001f04:	2122      	movs	r1, #34	; 0x22
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 fa24 	bl	8002354 <ssd1306_I2C_Write>
 8001f0c:	e00f      	b.n	8001f2e <SSD1306_Init+0x156>
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
        SSD1306_WRITECOMMAND(0x80); //  set recommended divide ratio
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
        SSD1306_WRITECOMMAND(0xF1); //
    } else {                    // SSD1306 with 64 line display
        SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001f0e:	21d5      	movs	r1, #213	; 0xd5
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 fa1f 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xF0); //  set divide ratio
 8001f16:	21f0      	movs	r1, #240	; 0xf0
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 fa1b 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001f1e:	21d9      	movs	r1, #217	; 0xd9
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 fa17 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x22); //
 8001f26:	2122      	movs	r1, #34	; 0x22
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 fa13 	bl	8002354 <ssd1306_I2C_Write>
    }

    SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001f2e:	21da      	movs	r1, #218	; 0xda
 8001f30:	2000      	movs	r0, #0
 8001f32:	f000 fa0f 	bl	8002354 <ssd1306_I2C_Write>
    if(SSD1306_HEIGHT == 64) {
        SSD1306_WRITECOMMAND(0x12); //*** 12:for 64 line
 8001f36:	2112      	movs	r1, #18
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 fa0b 	bl	8002354 <ssd1306_I2C_Write>
    } else {
        SSD1306_WRITECOMMAND(0x02); //*** 02: for 32 line
    }

    SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001f3e:	21db      	movs	r1, #219	; 0xdb
 8001f40:	2000      	movs	r0, #0
 8001f42:	f000 fa07 	bl	8002354 <ssd1306_I2C_Write>
    if(dev->type == SH1106_I2C) {
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <SSD1306_Init+0x1e0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d10c      	bne.n	8001f6a <SSD1306_Init+0x192>
        SSD1306_WRITECOMMAND(0x35); //  SH1106: 0x35 0.77xVcc
 8001f50:	2135      	movs	r1, #53	; 0x35
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f9fe 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0xAD); //--set DC-DC mode
 8001f58:	21ad      	movs	r1, #173	; 0xad
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f9fa 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8B); //  DC-DC converter ON
 8001f60:	218b      	movs	r1, #139	; 0x8b
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f9f6 	bl	8002354 <ssd1306_I2C_Write>
 8001f68:	e00f      	b.n	8001f8a <SSD1306_Init+0x1b2>
    } else {
        SSD1306_WRITECOMMAND(0x20); //  SSD1306: 0x20 0.77xVcc
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 f9f1 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x8D); //--Charge Pump Setting
 8001f72:	218d      	movs	r1, #141	; 0x8d
 8001f74:	2000      	movs	r0, #0
 8001f76:	f000 f9ed 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x14);	//  Enable Charge Pump
 8001f7a:	2114      	movs	r1, #20
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f000 f9e9 	bl	8002354 <ssd1306_I2C_Write>
        SSD1306_WRITECOMMAND(0x2E); //--Stop scrolling
 8001f82:	212e      	movs	r1, #46	; 0x2e
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 f9e5 	bl	8002354 <ssd1306_I2C_Write>
    }
    SSD1306_WRITECOMMAND(0xAF); //--turn on SH1106/SSD1306 panel
 8001f8a:	21af      	movs	r1, #175	; 0xaf
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 f9e1 	bl	8002354 <ssd1306_I2C_Write>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f84c 	bl	8002030 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 8001f98:	f000 f812 	bl	8001fc0 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <SSD1306_Init+0x1e4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <SSD1306_Init+0x1e4>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <SSD1306_Init+0x1e4>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	715a      	strb	r2, [r3, #5]

    /* Return OK */
    return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000750 	.word	0x20000750
 8001fbc:	20000754 	.word	0x20000754

08001fc0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
    uint8_t m;

    for (m = 0; m < 8; m++) {
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	e024      	b.n	8002016 <SSD1306_UpdateScreen+0x56>
        SSD1306_WRITECOMMAND(0xB0 + m);
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	3b50      	subs	r3, #80	; 0x50
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f000 f9bd 	bl	8002354 <ssd1306_I2C_Write>
        if(dev->type == SH1106_I2C) {
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <SSD1306_UpdateScreen+0x68>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d104      	bne.n	8001fee <SSD1306_UpdateScreen+0x2e>
            SSD1306_WRITECOMMAND(0x02); //---set low column address 	2: for SH1106 ***
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f9b4 	bl	8002354 <ssd1306_I2C_Write>
 8001fec:	e003      	b.n	8001ff6 <SSD1306_UpdateScreen+0x36>
        } else {
            SSD1306_WRITECOMMAND(0x00); //---set low column address 	0: for SSD1306+ ***
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f000 f9af 	bl	8002354 <ssd1306_I2C_Write>
        }
        SSD1306_WRITECOMMAND(0x10);
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f000 f9ab 	bl	8002354 <ssd1306_I2C_Write>
        /* Write multi data */
        ssd1306_I2C_WriteMulti(0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	01db      	lsls	r3, r3, #7
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <SSD1306_UpdateScreen+0x6c>)
 8002004:	4413      	add	r3, r2
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	4619      	mov	r1, r3
 800200a:	2040      	movs	r0, #64	; 0x40
 800200c:	f000 f944 	bl	8002298 <ssd1306_I2C_WriteMulti>
    for (m = 0; m < 8; m++) {
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	3301      	adds	r3, #1
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b07      	cmp	r3, #7
 800201a:	d9d7      	bls.n	8001fcc <SSD1306_UpdateScreen+0xc>
    }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000750 	.word	0x20000750
 800202c:	20000350 	.word	0x20000350

08002030 <SSD1306_Fill>:
        SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
    }
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <SSD1306_Fill+0x14>
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <SSD1306_Fill+0x16>
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800204a:	4619      	mov	r1, r3
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <SSD1306_Fill+0x2c>)
 800204e:	f004 fe21 	bl	8006c94 <memset>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000350 	.word	0x20000350

08002060 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
 800206a:	460b      	mov	r3, r1
 800206c:	80bb      	strh	r3, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	70fb      	strb	r3, [r7, #3]
    if (
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	2b7f      	cmp	r3, #127	; 0x7f
 8002076:	d848      	bhi.n	800210a <SSD1306_DrawPixel+0xaa>
        x >= SSD1306_WIDTH ||
 8002078:	88bb      	ldrh	r3, [r7, #4]
 800207a:	2b3f      	cmp	r3, #63	; 0x3f
 800207c:	d845      	bhi.n	800210a <SSD1306_DrawPixel+0xaa>
        /* Error */
        return;
    }

    /* Check if pixels are inverted */
    if (SSD1306.Inverted) {
 800207e:	4b26      	ldr	r3, [pc, #152]	; (8002118 <SSD1306_DrawPixel+0xb8>)
 8002080:	791b      	ldrb	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <SSD1306_DrawPixel+0x34>
        color = (SSD1306_COLOR_t)!color;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	70fb      	strb	r3, [r7, #3]
    }

    /* Set color */
    if (color == SSD1306_COLOR_WHITE) {
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d11a      	bne.n	80020d0 <SSD1306_DrawPixel+0x70>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	08db      	lsrs	r3, r3, #3
 80020a0:	b298      	uxth	r0, r3
 80020a2:	4603      	mov	r3, r0
 80020a4:	01db      	lsls	r3, r3, #7
 80020a6:	4413      	add	r3, r2
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <SSD1306_DrawPixel+0xbc>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b259      	sxtb	r1, r3
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	4603      	mov	r3, r0
 80020c4:	01db      	lsls	r3, r3, #7
 80020c6:	4413      	add	r3, r2
 80020c8:	b2c9      	uxtb	r1, r1
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <SSD1306_DrawPixel+0xbc>)
 80020cc:	54d1      	strb	r1, [r2, r3]
 80020ce:	e01d      	b.n	800210c <SSD1306_DrawPixel+0xac>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80020d0:	88fa      	ldrh	r2, [r7, #6]
 80020d2:	88bb      	ldrh	r3, [r7, #4]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	b298      	uxth	r0, r3
 80020d8:	4603      	mov	r3, r0
 80020da:	01db      	lsls	r3, r3, #7
 80020dc:	4413      	add	r3, r2
 80020de:	4a0f      	ldr	r2, [pc, #60]	; (800211c <SSD1306_DrawPixel+0xbc>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	b25a      	sxtb	r2, r3
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	2101      	movs	r1, #1
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	4013      	ands	r3, r2
 80020f8:	b259      	sxtb	r1, r3
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	4603      	mov	r3, r0
 80020fe:	01db      	lsls	r3, r3, #7
 8002100:	4413      	add	r3, r2
 8002102:	b2c9      	uxtb	r1, r1
 8002104:	4a05      	ldr	r2, [pc, #20]	; (800211c <SSD1306_DrawPixel+0xbc>)
 8002106:	54d1      	strb	r1, [r2, r3]
 8002108:	e000      	b.n	800210c <SSD1306_DrawPixel+0xac>
        return;
 800210a:	bf00      	nop
    }
}
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000754 	.word	0x20000754
 800211c:	20000350 	.word	0x20000350

08002120 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	460a      	mov	r2, r1
 800212a:	80fb      	strh	r3, [r7, #6]
 800212c:	4613      	mov	r3, r2
 800212e:	80bb      	strh	r3, [r7, #4]
    /* Set write pointers */
    SSD1306.CurrentX = x;
 8002130:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SSD1306_GotoXY+0x28>)
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <SSD1306_GotoXY+0x28>)
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	8053      	strh	r3, [r2, #2]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	20000754 	.word	0x20000754

0800214c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4613      	mov	r3, r2
 800215a:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    /* Check available space in LCD */
    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <SSD1306_Putc+0xfc>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
    if (
 8002168:	2b7f      	cmp	r3, #127	; 0x7f
 800216a:	dc07      	bgt.n	800217c <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <SSD1306_Putc+0xfc>)
 800216e:	885b      	ldrh	r3, [r3, #2]
 8002170:	461a      	mov	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	785b      	ldrb	r3, [r3, #1]
 8002176:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002178:	2b3f      	cmp	r3, #63	; 0x3f
 800217a:	dd01      	ble.n	8002180 <SSD1306_Putc+0x34>
    ) {
        /* Error */
        return 0;
 800217c:	2300      	movs	r3, #0
 800217e:	e05e      	b.n	800223e <SSD1306_Putc+0xf2>
    }

    /* Go through font */
    for (i = 0; i < Font->FontHeight; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e04b      	b.n	800221e <SSD1306_Putc+0xd2>
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	3b20      	subs	r3, #32
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	7849      	ldrb	r1, [r1, #1]
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4619      	mov	r1, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	440b      	add	r3, r1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++) {
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e030      	b.n	800220c <SSD1306_Putc+0xc0>
            if ((b << j) & 0x8000) {
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <SSD1306_Putc+0x90>
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80021ba:	4b23      	ldr	r3, [pc, #140]	; (8002248 <SSD1306_Putc+0xfc>)
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	b298      	uxth	r0, r3
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <SSD1306_Putc+0xfc>)
 80021c8:	885a      	ldrh	r2, [r3, #2]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	79ba      	ldrb	r2, [r7, #6]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f7ff ff43 	bl	8002060 <SSD1306_DrawPixel>
 80021da:	e014      	b.n	8002206 <SSD1306_Putc+0xba>
            } else {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <SSD1306_Putc+0xfc>)
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	b298      	uxth	r0, r3
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <SSD1306_Putc+0xfc>)
 80021ea:	885a      	ldrh	r2, [r3, #2]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	b299      	uxth	r1, r3
 80021f4:	79bb      	ldrb	r3, [r7, #6]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	f7ff ff2d 	bl	8002060 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++) {
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	3301      	adds	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4293      	cmp	r3, r2
 8002216:	d3c8      	bcc.n	80021aa <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++) {
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	461a      	mov	r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	4293      	cmp	r3, r2
 8002228:	d3ad      	bcc.n	8002186 <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 800222a:	4b07      	ldr	r3, [pc, #28]	; (8002248 <SSD1306_Putc+0xfc>)
 800222c:	881a      	ldrh	r2, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4413      	add	r3, r2
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <SSD1306_Putc+0xfc>)
 800223a:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 800223c:	79fb      	ldrb	r3, [r7, #7]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000754 	.word	0x20000754

0800224c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str) {
 800225a:	e012      	b.n	8002282 <SSD1306_Puts+0x36>
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str) {
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff71 	bl	800214c <SSD1306_Putc>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d002      	beq.n	800227c <SSD1306_Puts+0x30>
            /* Return error */
            return *str;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	e008      	b.n	800228e <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e8      	bne.n	800225c <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	781b      	ldrb	r3, [r3, #0]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <ssd1306_I2C_WriteMulti>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(uint8_t reg, uint8_t* data, uint16_t count)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b0c7      	sub	sp, #284	; 0x11c
 800229c:	af02      	add	r7, sp, #8
 800229e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022a6:	6019      	str	r1, [r3, #0]
 80022a8:	4611      	mov	r1, r2
 80022aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ae:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80022b2:	4602      	mov	r2, r0
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022be:	460a      	mov	r2, r1
 80022c0:	801a      	strh	r2, [r3, #0]
    uint8_t dt[256];
    dt[0] = reg;
 80022c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80022c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80022ca:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022ce:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 80022d2:	7812      	ldrb	r2, [r2, #0]
 80022d4:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i = 0; i < count; i++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022dc:	e015      	b.n	800230a <ssd1306_I2C_WriteMulti+0x72>
        dt[i+1] = data[i];
 80022de:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022e2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022e6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	441a      	add	r2, r3
 80022ee:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022f2:	3301      	adds	r3, #1
 80022f4:	7811      	ldrb	r1, [r2, #0]
 80022f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80022fa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80022fe:	54d1      	strb	r1, [r2, r3]
    for(i = 0; i < count; i++)
 8002300:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002304:	3301      	adds	r3, #1
 8002306:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800230a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800230e:	b29b      	uxth	r3, r3
 8002310:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002314:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d8df      	bhi.n	80022de <ssd1306_I2C_WriteMulti+0x46>
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, count+1, 20);
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <ssd1306_I2C_WriteMulti+0xb8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6898      	ldr	r0, [r3, #8]
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <ssd1306_I2C_WriteMulti+0xb8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	8899      	ldrh	r1, [r3, #4]
 800232a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800232e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	b29b      	uxth	r3, r3
 8002338:	f107 020c 	add.w	r2, r7, #12
 800233c:	2414      	movs	r4, #20
 800233e:	9400      	str	r4, [sp, #0]
 8002340:	f001 ff96 	bl	8004270 <HAL_I2C_Master_Transmit>
//  I2C1_Write(address, dt, count+1, 10);
}
 8002344:	bf00      	nop
 8002346:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	20000750 	.word	0x20000750

08002354 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t reg, uint8_t data)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af02      	add	r7, sp, #8
 800235a:	4603      	mov	r3, r0
 800235c:	460a      	mov	r2, r1
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	4613      	mov	r3, r2
 8002362:	71bb      	strb	r3, [r7, #6]
    uint8_t dt[2];
    dt[0] = reg;
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	733b      	strb	r3, [r7, #12]
    dt[1] = data;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(dev->i2c, dev->i2c_address, dt, 2, 20);
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <ssd1306_I2C_Write+0x3c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6898      	ldr	r0, [r3, #8]
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <ssd1306_I2C_Write+0x3c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	8899      	ldrh	r1, [r3, #4]
 8002378:	f107 020c 	add.w	r2, r7, #12
 800237c:	2314      	movs	r3, #20
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	2302      	movs	r3, #2
 8002382:	f001 ff75 	bl	8004270 <HAL_I2C_Master_Transmit>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000750 	.word	0x20000750

08002394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_MspInit+0x4c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_MspInit+0x4c>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <NMI_Handler+0x4>

080023ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	e7fe      	b.n	80023f4 <MemManage_Handler+0x4>

080023f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <UsageFault_Handler+0x4>

08002402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002430:	f000 fb26 	bl	8002a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <DMA1_Stream5_IRQHandler+0x10>)
 800243e:	f001 f9cb 	bl	80037d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200007ec 	.word	0x200007ec

0800244c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002450:	4802      	ldr	r0, [pc, #8]	; (800245c <DMA1_Stream6_IRQHandler+0x10>)
 8002452:	f001 f9c1 	bl	80037d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2000084c 	.word	0x2000084c

08002460 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM3_IRQHandler+0x10>)
 8002466:	f002 ffb7 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000760 	.word	0x20000760

08002474 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	owReadHandler();
 8002478:	f7fe fdd6 	bl	8001028 <owReadHandler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <USART2_IRQHandler+0x14>)
 800247e:	f003 faff 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200007a8 	.word	0x200007a8

0800248c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:

int _kill(int pid, int sig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024a6:	f004 fbcb 	bl	8006c40 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
	return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:

void _exit (int status)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ce:	e7fe      	b.n	80024ce <_exit+0x12>

080024d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00a      	b.n	80024f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024e2:	f3af 8000 	nop.w
 80024e6:	4601      	mov	r1, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbf0      	blt.n	80024e2 <_read+0x12>
	}

return len;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e009      	b.n	8002530 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf1      	blt.n	800251c <_write+0x12>
	}
	return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f004 fb30 	bl	8006c40 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20020000 	.word	0x20020000
 800260c:	00000400 	.word	0x00000400
 8002610:	2000075c 	.word	0x2000075c
 8002614:	200008c0 	.word	0x200008c0

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f004 fb22 	bl	8006c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_TIM3_Init+0xa0>)
 800265a:	4a21      	ldr	r2, [pc, #132]	; (80026e0 <MX_TIM3_Init+0xa4>)
 800265c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_TIM3_Init+0xa0>)
 8002660:	2200      	movs	r2, #0
 8002662:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_TIM3_Init+0xa0>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_TIM3_Init+0xa0>)
 800266c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002670:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_TIM3_Init+0xa0>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002678:	4b18      	ldr	r3, [pc, #96]	; (80026dc <MX_TIM3_Init+0xa0>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800267e:	2301      	movs	r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002686:	2301      	movs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800268e:	230a      	movs	r3, #10
 8002690:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002692:	2300      	movs	r3, #0
 8002694:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800269e:	230a      	movs	r3, #10
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026a2:	f107 030c 	add.w	r3, r7, #12
 80026a6:	4619      	mov	r1, r3
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <MX_TIM3_Init+0xa0>)
 80026aa:	f002 fd41 	bl	8005130 <HAL_TIM_Encoder_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026b4:	f7ff fb8a 	bl	8001dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_TIM3_Init+0xa0>)
 80026c6:	f003 f85d 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026d0:	f7ff fb7c 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026d4:	bf00      	nop
 80026d6:	3730      	adds	r7, #48	; 0x30
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000760 	.word	0x20000760
 80026e0:	40000400 	.word	0x40000400

080026e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_TIM_Encoder_MspInit+0x94>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d133      	bne.n	800276e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a1b      	ldr	r2, [pc, #108]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_TIM_Encoder_MspInit+0x98>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800274e:	2302      	movs	r3, #2
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	4619      	mov	r1, r3
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <HAL_TIM_Encoder_MspInit+0x9c>)
 800275a:	f001 faa7 	bl	8003cac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	201d      	movs	r0, #29
 8002764:	f000 fe69 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002768:	201d      	movs	r0, #29
 800276a:	f000 fe82 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800276e:	bf00      	nop
 8002770:	3728      	adds	r7, #40	; 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40000400 	.word	0x40000400
 800277c:	40023800 	.word	0x40023800
 8002780:	40020000 	.word	0x40020000

08002784 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <MX_USART2_UART_Init+0x50>)
 800278c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027a2:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027aa:	220c      	movs	r2, #12
 80027ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ae:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_USART2_UART_Init+0x4c>)
 80027bc:	f003 f864 	bl	8005888 <HAL_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027c6:	f7ff fb01 	bl	8001dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200007a8 	.word	0x200007a8
 80027d4:	40004400 	.word	0x40004400

080027d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	; (8002924 <HAL_UART_MspInit+0x14c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 8090 	bne.w	800291c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b49      	ldr	r3, [pc, #292]	; (8002928 <HAL_UART_MspInit+0x150>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	4a48      	ldr	r2, [pc, #288]	; (8002928 <HAL_UART_MspInit+0x150>)
 8002806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280a:	6413      	str	r3, [r2, #64]	; 0x40
 800280c:	4b46      	ldr	r3, [pc, #280]	; (8002928 <HAL_UART_MspInit+0x150>)
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_UART_MspInit+0x150>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4a41      	ldr	r2, [pc, #260]	; (8002928 <HAL_UART_MspInit+0x150>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6313      	str	r3, [r2, #48]	; 0x30
 8002828:	4b3f      	ldr	r3, [pc, #252]	; (8002928 <HAL_UART_MspInit+0x150>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002834:	230c      	movs	r3, #12
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002840:	2303      	movs	r3, #3
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002844:	2307      	movs	r3, #7
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4837      	ldr	r0, [pc, #220]	; (800292c <HAL_UART_MspInit+0x154>)
 8002850:	f001 fa2c 	bl	8003cac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002856:	4a37      	ldr	r2, [pc, #220]	; (8002934 <HAL_UART_MspInit+0x15c>)
 8002858:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800285a:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_UART_MspInit+0x158>)
 800285c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002860:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_UART_MspInit+0x158>)
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002874:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002878:	2200      	movs	r2, #0
 800287a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_UART_MspInit+0x158>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002882:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002884:	2200      	movs	r2, #0
 8002886:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_UART_MspInit+0x158>)
 800288a:	2200      	movs	r2, #0
 800288c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800288e:	4b28      	ldr	r3, [pc, #160]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002890:	2200      	movs	r2, #0
 8002892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002894:	4826      	ldr	r0, [pc, #152]	; (8002930 <HAL_UART_MspInit+0x158>)
 8002896:	f000 fe07 	bl	80034a8 <HAL_DMA_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80028a0:	f7ff fa94 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_UART_MspInit+0x158>)
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
 80028aa:	4a21      	ldr	r2, [pc, #132]	; (8002930 <HAL_UART_MspInit+0x158>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_UART_MspInit+0x164>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028b6:	4b20      	ldr	r3, [pc, #128]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d2:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e4:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ea:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028f0:	4811      	ldr	r0, [pc, #68]	; (8002938 <HAL_UART_MspInit+0x160>)
 80028f2:	f000 fdd9 	bl	80034a8 <HAL_DMA_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80028fc:	f7ff fa66 	bl	8001dcc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
 8002906:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_UART_MspInit+0x160>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2100      	movs	r1, #0
 8002910:	2026      	movs	r0, #38	; 0x26
 8002912:	f000 fd92 	bl	800343a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002916:	2026      	movs	r0, #38	; 0x26
 8002918:	f000 fdab 	bl	8003472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800291c:	bf00      	nop
 800291e:	3728      	adds	r7, #40	; 0x28
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40004400 	.word	0x40004400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000
 8002930:	200007ec 	.word	0x200007ec
 8002934:	40026088 	.word	0x40026088
 8002938:	2000084c 	.word	0x2000084c
 800293c:	400260a0 	.word	0x400260a0

08002940 <HAL_UART_TxCpltCallback>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *uarth){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
		if (uarth->Instance == USART2){
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_UART_TxCpltCallback+0x20>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d101      	bne.n	8002956 <HAL_UART_TxCpltCallback+0x16>
			OneWire_TxCpltCallback();
 8002952:	f7fe fc9d 	bl	8001290 <OneWire_TxCpltCallback>
		}
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40004400 	.word	0x40004400

08002964 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *uarth){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
		if (uarth->Instance == USART2){
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <HAL_UART_RxCpltCallback+0x20>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_UART_RxCpltCallback+0x16>
			OneWire_RxCpltCallback();
 8002976:	f7fe fc92 	bl	800129e <OneWire_RxCpltCallback>
		}
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40004400 	.word	0x40004400

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029b2:	f7ff fe31 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f004 f949 	bl	8006c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7ff f851 	bl	8001a60 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80029cc:	0800c7ec 	.word	0x0800c7ec
  ldr r2, =_sbss
 80029d0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80029d4:	200008c0 	.word	0x200008c0

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_Init+0x40>)
 80029e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_Init+0x40>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_Init+0x40>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 fd0d 	bl	8003424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f000 f808 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f7ff fcc0 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x54>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x58>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fd25 	bl	800348e <HAL_SYSTICK_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00e      	b.n	8002a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d80a      	bhi.n	8002a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a54:	2200      	movs	r2, #0
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f000 fced 	bl	800343a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <HAL_InitTick+0x5c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000020 	.word	0x20000020
 8002a78:	20000028 	.word	0x20000028
 8002a7c:	20000024 	.word	0x20000024

08002a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x24>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_IncTick+0x24>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000028 	.word	0x20000028
 8002aa4:	200008ac 	.word	0x200008ac

08002aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_GetTick+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	200008ac 	.word	0x200008ac

08002ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff ffee 	bl	8002aa8 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d005      	beq.n	8002ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_Delay+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae6:	bf00      	nop
 8002ae8:	f7ff ffde 	bl	8002aa8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d8f7      	bhi.n	8002ae8 <HAL_Delay+0x28>
  {
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000028 	.word	0x20000028

08002b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e033      	b.n	8002b86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fb16 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d118      	bne.n	8002b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b4e:	f023 0302 	bic.w	r3, r3, #2
 8002b52:	f043 0202 	orr.w	r2, r3, #2
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fa96 	bl	800308c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
 8002b76:	e001      	b.n	8002b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_Start+0x1a>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e097      	b.n	8002cda <HAL_ADC_Start+0x14a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d018      	beq.n	8002bf2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd0:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <HAL_ADC_Start+0x158>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a45      	ldr	r2, [pc, #276]	; (8002cec <HAL_ADC_Start+0x15c>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0c9a      	lsrs	r2, r3, #18
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d15f      	bne.n	8002cc0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3e:	d106      	bne.n	8002c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c44:	f023 0206 	bic.w	r2, r3, #6
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c4c:	e002      	b.n	8002c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_ADC_Start+0x160>)
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d129      	bne.n	8002cd8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	e020      	b.n	8002cd8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a16      	ldr	r2, [pc, #88]	; (8002cf4 <HAL_ADC_Start+0x164>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d11b      	bne.n	8002cd8 <HAL_ADC_Start+0x148>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0210 	orr.w	r2, r3, #16
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000020 	.word	0x20000020
 8002cec:	431bde83 	.word	0x431bde83
 8002cf0:	40012300 	.word	0x40012300
 8002cf4:	40012000 	.word	0x40012000

08002cf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d14:	d113      	bne.n	8002d3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d24:	d10b      	bne.n	8002d3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e063      	b.n	8002e06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d3e:	f7ff feb3 	bl	8002aa8 <HAL_GetTick>
 8002d42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d44:	e021      	b.n	8002d8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d01d      	beq.n	8002d8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x6c>
 8002d54:	f7ff fea8 	bl	8002aa8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d212      	bcs.n	8002d8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d00b      	beq.n	8002d8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e03d      	b.n	8002e06 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d1d6      	bne.n	8002d46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0212 	mvn.w	r2, #18
 8002da0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d123      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d11f      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d006      	beq.n	8002de0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f043 0201 	orr.w	r2, r3, #1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e113      	b.n	800306c <HAL_ADC_ConfigChannel+0x244>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d925      	bls.n	8002ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	3b1e      	subs	r3, #30
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43da      	mvns	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	400a      	ands	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68d9      	ldr	r1, [r3, #12]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4403      	add	r3, r0
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	409a      	lsls	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e022      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6919      	ldr	r1, [r3, #16]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4403      	add	r3, r0
 8002edc:	409a      	lsls	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d824      	bhi.n	8002f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b05      	subs	r3, #5
 8002f00:	221f      	movs	r2, #31
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b05      	subs	r3, #5
 8002f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
 8002f36:	e04c      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d824      	bhi.n	8002f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b23      	subs	r3, #35	; 0x23
 8002f52:	221f      	movs	r2, #31
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	400a      	ands	r2, r1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b23      	subs	r3, #35	; 0x23
 8002f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	e023      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	3b41      	subs	r3, #65	; 0x41
 8002f9c:	221f      	movs	r2, #31
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	400a      	ands	r2, r1
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b41      	subs	r3, #65	; 0x41
 8002fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_ADC_ConfigChannel+0x250>)
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_ADC_ConfigChannel+0x254>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d10f      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1d8>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	d10b      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_ADC_ConfigChannel+0x254>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x23a>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1c      	ldr	r2, [pc, #112]	; (8003080 <HAL_ADC_ConfigChannel+0x258>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <HAL_ADC_ConfigChannel+0x1f4>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b11      	cmp	r3, #17
 800301a:	d122      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a11      	ldr	r2, [pc, #68]	; (8003080 <HAL_ADC_ConfigChannel+0x258>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d111      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_ADC_ConfigChannel+0x25c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a11      	ldr	r2, [pc, #68]	; (8003088 <HAL_ADC_ConfigChannel+0x260>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9a      	lsrs	r2, r3, #18
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003054:	e002      	b.n	800305c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f9      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40012300 	.word	0x40012300
 800307c:	40012000 	.word	0x40012000
 8003080:	10000012 	.word	0x10000012
 8003084:	20000020 	.word	0x20000020
 8003088:	431bde83 	.word	0x431bde83

0800308c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003094:	4b79      	ldr	r3, [pc, #484]	; (800327c <ADC_Init+0x1f0>)
 8003096:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	021a      	lsls	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	4a58      	ldr	r2, [pc, #352]	; (8003280 <ADC_Init+0x1f4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e00f      	b.n	800318a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0202 	bic.w	r2, r2, #2
 8003198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6899      	ldr	r1, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7e1b      	ldrb	r3, [r3, #24]
 80031a4:	005a      	lsls	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01b      	beq.n	80031f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	3b01      	subs	r3, #1
 80031e4:	035a      	lsls	r2, r3, #13
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	e007      	b.n	8003200 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800320e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	3b01      	subs	r3, #1
 800321c:	051a      	lsls	r2, r3, #20
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003242:	025a      	lsls	r2, r3, #9
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	029a      	lsls	r2, r3, #10
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40012300 	.word	0x40012300
 8003280:	0f000001 	.word	0x0f000001

08003284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a0:	4013      	ands	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b6:	4a04      	ldr	r2, [pc, #16]	; (80032c8 <__NVIC_SetPriorityGrouping+0x44>)
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	60d3      	str	r3, [r2, #12]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000ed00 	.word	0xe000ed00

080032cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <__NVIC_GetPriorityGrouping+0x18>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 0307 	and.w	r3, r3, #7
}
 80032da:	4618      	mov	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	db0b      	blt.n	8003312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	f003 021f 	and.w	r2, r3, #31
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <__NVIC_EnableIRQ+0x38>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2001      	movs	r0, #1
 800330a:	fa00 f202 	lsl.w	r2, r0, r2
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000e100 	.word	0xe000e100

08003324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	2b00      	cmp	r3, #0
 8003336:	db0a      	blt.n	800334e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	490c      	ldr	r1, [pc, #48]	; (8003370 <__NVIC_SetPriority+0x4c>)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	0112      	lsls	r2, r2, #4
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	440b      	add	r3, r1
 8003348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800334c:	e00a      	b.n	8003364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4908      	ldr	r1, [pc, #32]	; (8003374 <__NVIC_SetPriority+0x50>)
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	3b04      	subs	r3, #4
 800335c:	0112      	lsls	r2, r2, #4
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	440b      	add	r3, r1
 8003362:	761a      	strb	r2, [r3, #24]
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	e000e100 	.word	0xe000e100
 8003374:	e000ed00 	.word	0xe000ed00

08003378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f1c3 0307 	rsb	r3, r3, #7
 8003392:	2b04      	cmp	r3, #4
 8003394:	bf28      	it	cs
 8003396:	2304      	movcs	r3, #4
 8003398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3304      	adds	r3, #4
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d902      	bls.n	80033a8 <NVIC_EncodePriority+0x30>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3b03      	subs	r3, #3
 80033a6:	e000      	b.n	80033aa <NVIC_EncodePriority+0x32>
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	f04f 32ff 	mov.w	r2, #4294967295
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	401a      	ands	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 31ff 	mov.w	r1, #4294967295
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	43d9      	mvns	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	4313      	orrs	r3, r2
         );
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f0:	d301      	bcc.n	80033f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033f2:	2301      	movs	r3, #1
 80033f4:	e00f      	b.n	8003416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <SysTick_Config+0x40>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033fe:	210f      	movs	r1, #15
 8003400:	f04f 30ff 	mov.w	r0, #4294967295
 8003404:	f7ff ff8e 	bl	8003324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <SysTick_Config+0x40>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <SysTick_Config+0x40>)
 8003410:	2207      	movs	r2, #7
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000e010 	.word	0xe000e010

08003424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff29 	bl	8003284 <__NVIC_SetPriorityGrouping>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800343a:	b580      	push	{r7, lr}
 800343c:	b086      	sub	sp, #24
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800344c:	f7ff ff3e 	bl	80032cc <__NVIC_GetPriorityGrouping>
 8003450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f7ff ff8e 	bl	8003378 <NVIC_EncodePriority>
 800345c:	4602      	mov	r2, r0
 800345e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003462:	4611      	mov	r1, r2
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff ff5d 	bl	8003324 <__NVIC_SetPriority>
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800347c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff31 	bl	80032e8 <__NVIC_EnableIRQ>
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ffa2 	bl	80033e0 <SysTick_Config>
 800349c:	4603      	mov	r3, r0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034b4:	f7ff faf8 	bl	8002aa8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e099      	b.n	80035f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e4:	e00f      	b.n	8003506 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034e6:	f7ff fadf 	bl	8002aa8 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b05      	cmp	r3, #5
 80034f2:	d908      	bls.n	8003506 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2203      	movs	r2, #3
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e078      	b.n	80035f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e8      	bne.n	80034e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_DMA_Init+0x158>)
 8003520:	4013      	ands	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003532:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800353e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800354a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	2b04      	cmp	r3, #4
 800355e:	d107      	bne.n	8003570 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	4313      	orrs	r3, r2
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f023 0307 	bic.w	r3, r3, #7
 8003586:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b04      	cmp	r3, #4
 8003598:	d117      	bne.n	80035ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb01 	bl	8003bb4 <DMA_CheckFifoParam>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2240      	movs	r2, #64	; 0x40
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035c6:	2301      	movs	r3, #1
 80035c8:	e016      	b.n	80035f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fab8 	bl	8003b48 <DMA_CalcBaseAndBitshift>
 80035d8:	4603      	mov	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	223f      	movs	r2, #63	; 0x3f
 80035e2:	409a      	lsls	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	f010803f 	.word	0xf010803f

08003604 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_DMA_Start_IT+0x26>
 8003626:	2302      	movs	r3, #2
 8003628:	e040      	b.n	80036ac <HAL_DMA_Start_IT+0xa8>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d12f      	bne.n	800369e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa4a 	bl	8003aec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	223f      	movs	r2, #63	; 0x3f
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0216 	orr.w	r2, r2, #22
 8003672:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e005      	b.n	80036aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
 80036a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036c2:	f7ff f9f1 	bl	8002aa8 <HAL_GetTick>
 80036c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d008      	beq.n	80036e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e052      	b.n	800378c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0216 	bic.w	r2, r2, #22
 80036f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003704:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_DMA_Abort+0x62>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0208 	bic.w	r2, r2, #8
 8003724:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003736:	e013      	b.n	8003760 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003738:	f7ff f9b6 	bl	8002aa8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b05      	cmp	r3, #5
 8003744:	d90c      	bls.n	8003760 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2203      	movs	r2, #3
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e015      	b.n	800378c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e4      	bne.n	8003738 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003772:	223f      	movs	r2, #63	; 0x3f
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d004      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2280      	movs	r2, #128	; 0x80
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00c      	b.n	80037cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2205      	movs	r2, #5
 80037b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e4:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_DMA_IRQHandler+0x248>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a8e      	ldr	r2, [pc, #568]	; (8003a24 <HAL_DMA_IRQHandler+0x24c>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	2208      	movs	r2, #8
 8003804:	409a      	lsls	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4013      	ands	r3, r2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d01a      	beq.n	8003844 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	2208      	movs	r2, #8
 8003832:	409a      	lsls	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003848:	2201      	movs	r2, #1
 800384a:	409a      	lsls	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d012      	beq.n	800387a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	2201      	movs	r2, #1
 8003868:	409a      	lsls	r2, r3
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387e:	2204      	movs	r2, #4
 8003880:	409a      	lsls	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d012      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	2204      	movs	r2, #4
 800389e:	409a      	lsls	r2, r3
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a8:	f043 0204 	orr.w	r2, r3, #4
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	2210      	movs	r2, #16
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d043      	beq.n	8003948 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d03c      	beq.n	8003948 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	2210      	movs	r2, #16
 80038d4:	409a      	lsls	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d018      	beq.n	800391a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d024      	beq.n	8003948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
 8003906:	e01f      	b.n	8003948 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	2b00      	cmp	r3, #0
 800390e:	d01b      	beq.n	8003948 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	4798      	blx	r3
 8003918:	e016      	b.n	8003948 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0208 	bic.w	r2, r2, #8
 8003936:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394c:	2220      	movs	r2, #32
 800394e:	409a      	lsls	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 808f 	beq.w	8003a78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8087 	beq.w	8003a78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	2220      	movs	r2, #32
 8003970:	409a      	lsls	r2, r3
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b05      	cmp	r3, #5
 8003980:	d136      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0216 	bic.w	r2, r2, #22
 8003990:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_DMA_IRQHandler+0x1da>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0208 	bic.w	r2, r2, #8
 80039c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	223f      	movs	r2, #63	; 0x3f
 80039c8:	409a      	lsls	r2, r3
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d07e      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
        }
        return;
 80039ee:	e079      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10d      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d031      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e02c      	b.n	8003a78 <HAL_DMA_IRQHandler+0x2a0>
 8003a1e:	bf00      	nop
 8003a20:	20000020 	.word	0x20000020
 8003a24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d023      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
 8003a38:	e01e      	b.n	8003a78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10f      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0210 	bic.w	r2, r2, #16
 8003a56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d032      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2205      	movs	r2, #5
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d307      	bcc.n	8003ac0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f2      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x2cc>
 8003abe:	e000      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ac0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
 8003ae2:	e000      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ae4:	bf00      	nop
    }
  }
}
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d108      	bne.n	8003b2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b2a:	e007      	b.n	8003b3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3b10      	subs	r3, #16
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <DMA_CalcBaseAndBitshift+0x64>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d909      	bls.n	8003b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	1d1a      	adds	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	659a      	str	r2, [r3, #88]	; 0x58
 8003b88:	e007      	b.n	8003b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	aaaaaaab 	.word	0xaaaaaaab
 8003bb0:	0800c32c 	.word	0x0800c32c

08003bb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11f      	bne.n	8003c0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d856      	bhi.n	8003c82 <DMA_CheckFifoParam+0xce>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <DMA_CheckFifoParam+0x28>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bff 	.word	0x08003bff
 8003be4:	08003bed 	.word	0x08003bed
 8003be8:	08003c83 	.word	0x08003c83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d046      	beq.n	8003c86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e043      	b.n	8003c86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c06:	d140      	bne.n	8003c8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0c:	e03d      	b.n	8003c8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	d121      	bne.n	8003c5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d837      	bhi.n	8003c8e <DMA_CheckFifoParam+0xda>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <DMA_CheckFifoParam+0x70>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c3b 	.word	0x08003c3b
 8003c2c:	08003c35 	.word	0x08003c35
 8003c30:	08003c4d 	.word	0x08003c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
      break;
 8003c38:	e030      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d025      	beq.n	8003c92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4a:	e022      	b.n	8003c92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c54:	d11f      	bne.n	8003c96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c5a:	e01c      	b.n	8003c96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d903      	bls.n	8003c6a <DMA_CheckFifoParam+0xb6>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d003      	beq.n	8003c70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c68:	e018      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6e:	e015      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c80:	e00b      	b.n	8003c9a <DMA_CheckFifoParam+0xe6>
      break;
 8003c82:	bf00      	nop
 8003c84:	e00a      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c86:	bf00      	nop
 8003c88:	e008      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e006      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e004      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <DMA_CheckFifoParam+0xe8>
      break;
 8003c9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e159      	b.n	8003f7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f040 8148 	bne.w	8003f76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d005      	beq.n	8003cfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d130      	bne.n	8003d60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d34:	2201      	movs	r2, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f003 0201 	and.w	r2, r3, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d017      	beq.n	8003d9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d123      	bne.n	8003df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	08da      	lsrs	r2, r3, #3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3208      	adds	r2, #8
 8003db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	220f      	movs	r2, #15
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	08da      	lsrs	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3208      	adds	r2, #8
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0203 	and.w	r2, r3, #3
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a2 	beq.w	8003f76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4b57      	ldr	r3, [pc, #348]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	4a56      	ldr	r2, [pc, #344]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e40:	6453      	str	r3, [r2, #68]	; 0x44
 8003e42:	4b54      	ldr	r3, [pc, #336]	; (8003f94 <HAL_GPIO_Init+0x2e8>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e4e:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_GPIO_Init+0x2ec>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a49      	ldr	r2, [pc, #292]	; (8003f9c <HAL_GPIO_Init+0x2f0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d019      	beq.n	8003eae <HAL_GPIO_Init+0x202>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a48      	ldr	r2, [pc, #288]	; (8003fa0 <HAL_GPIO_Init+0x2f4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_Init+0x1fe>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <HAL_GPIO_Init+0x2f8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00d      	beq.n	8003ea6 <HAL_GPIO_Init+0x1fa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a46      	ldr	r2, [pc, #280]	; (8003fa8 <HAL_GPIO_Init+0x2fc>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <HAL_GPIO_Init+0x1f6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_GPIO_Init+0x300>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_GPIO_Init+0x1f2>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e008      	b.n	8003eb0 <HAL_GPIO_Init+0x204>
 8003e9e:	2307      	movs	r3, #7
 8003ea0:	e006      	b.n	8003eb0 <HAL_GPIO_Init+0x204>
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e004      	b.n	8003eb0 <HAL_GPIO_Init+0x204>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e002      	b.n	8003eb0 <HAL_GPIO_Init+0x204>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_Init+0x204>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	f002 0203 	and.w	r2, r2, #3
 8003eb6:	0092      	lsls	r2, r2, #2
 8003eb8:	4093      	lsls	r3, r2
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ec0:	4935      	ldr	r1, [pc, #212]	; (8003f98 <HAL_GPIO_Init+0x2ec>)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f1c:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f22:	4b23      	ldr	r3, [pc, #140]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f46:	4a1a      	ldr	r2, [pc, #104]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f4c:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f70:	4a0f      	ldr	r2, [pc, #60]	; (8003fb0 <HAL_GPIO_Init+0x304>)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	2b0f      	cmp	r3, #15
 8003f80:	f67f aea2 	bls.w	8003cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3724      	adds	r7, #36	; 0x24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40013800 	.word	0x40013800
 8003f9c:	40020000 	.word	0x40020000
 8003fa0:	40020400 	.word	0x40020400
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40020c00 	.word	0x40020c00
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc4:	787b      	ldrb	r3, [r7, #1]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fca:	887a      	ldrh	r2, [r7, #2]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fd0:	e003      	b.n	8003fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	041a      	lsls	r2, r3, #16
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	619a      	str	r2, [r3, #24]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e12b      	b.n	8004252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd fca2 	bl	8001958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800404a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800404c:	f001 f848 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8004050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a81      	ldr	r2, [pc, #516]	; (800425c <HAL_I2C_Init+0x274>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d807      	bhi.n	800406c <HAL_I2C_Init+0x84>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a80      	ldr	r2, [pc, #512]	; (8004260 <HAL_I2C_Init+0x278>)
 8004060:	4293      	cmp	r3, r2
 8004062:	bf94      	ite	ls
 8004064:	2301      	movls	r3, #1
 8004066:	2300      	movhi	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e006      	b.n	800407a <HAL_I2C_Init+0x92>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a7d      	ldr	r2, [pc, #500]	; (8004264 <HAL_I2C_Init+0x27c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0e7      	b.n	8004252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a78      	ldr	r2, [pc, #480]	; (8004268 <HAL_I2C_Init+0x280>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0c9b      	lsrs	r3, r3, #18
 800408c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a6a      	ldr	r2, [pc, #424]	; (800425c <HAL_I2C_Init+0x274>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d802      	bhi.n	80040bc <HAL_I2C_Init+0xd4>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	e009      	b.n	80040d0 <HAL_I2C_Init+0xe8>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	4a69      	ldr	r2, [pc, #420]	; (800426c <HAL_I2C_Init+0x284>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	3301      	adds	r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	495c      	ldr	r1, [pc, #368]	; (800425c <HAL_I2C_Init+0x274>)
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d819      	bhi.n	8004124 <HAL_I2C_Init+0x13c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e59      	subs	r1, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004104:	400b      	ands	r3, r1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_I2C_Init+0x138>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e59      	subs	r1, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fbb1 f3f3 	udiv	r3, r1, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	e051      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004120:	2304      	movs	r3, #4
 8004122:	e04f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d111      	bne.n	8004150 <HAL_I2C_Init+0x168>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e012      	b.n	8004176 <HAL_I2C_Init+0x18e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Init+0x196>
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <HAL_I2C_Init+0x1bc>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e58      	subs	r0, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	440b      	add	r3, r1
 8004194:	fbb0 f3f3 	udiv	r3, r0, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	0099      	lsls	r1, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6809      	ldr	r1, [r1, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6911      	ldr	r1, [r2, #16]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	430b      	orrs	r3, r1
 8004206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	000186a0 	.word	0x000186a0
 8004260:	001e847f 	.word	0x001e847f
 8004264:	003d08ff 	.word	0x003d08ff
 8004268:	431bde83 	.word	0x431bde83
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004284:	f7fe fc10 	bl	8002aa8 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 80e0 	bne.w	8004458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	4970      	ldr	r1, [pc, #448]	; (8004464 <HAL_I2C_Master_Transmit+0x1f4>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f964 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0d3      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2C_Master_Transmit+0x50>
 80042bc:	2302      	movs	r3, #2
 80042be:	e0cc      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d007      	beq.n	80042e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2221      	movs	r2, #33	; 0x21
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2210      	movs	r2, #16
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	893a      	ldrh	r2, [r7, #8]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a50      	ldr	r2, [pc, #320]	; (8004468 <HAL_I2C_Master_Transmit+0x1f8>)
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f89c 	bl	800446c <I2C_MasterRequestWrite>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e08d      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004354:	e066      	b.n	8004424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	6a39      	ldr	r1, [r7, #32]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f9de 	bl	800471c <I2C_WaitOnTXEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b04      	cmp	r3, #4
 800436c:	d107      	bne.n	800437e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e06b      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d11b      	bne.n	80043f8 <HAL_I2C_Master_Transmit+0x188>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	6a39      	ldr	r1, [r7, #32]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f9ce 	bl	800479e <I2C_WaitOnBTFFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b04      	cmp	r3, #4
 800440e:	d107      	bne.n	8004420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e01a      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d194      	bne.n	8004356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	00100002 	.word	0x00100002
 8004468:	ffff0000 	.word	0xffff0000

0800446c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b08      	cmp	r3, #8
 8004486:	d006      	beq.n	8004496 <I2C_MasterRequestWrite+0x2a>
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d003      	beq.n	8004496 <I2C_MasterRequestWrite+0x2a>
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004494:	d108      	bne.n	80044a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	e00b      	b.n	80044c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	2b12      	cmp	r3, #18
 80044ae:	d107      	bne.n	80044c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f84f 	bl	8004570 <I2C_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00d      	beq.n	80044f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d103      	bne.n	80044f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e035      	b.n	8004560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044fc:	d108      	bne.n	8004510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fe:	897b      	ldrh	r3, [r7, #10]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	e01b      	b.n	8004548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004510:	897b      	ldrh	r3, [r7, #10]
 8004512:	11db      	asrs	r3, r3, #7
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0306 	and.w	r3, r3, #6
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f063 030f 	orn	r3, r3, #15
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	490e      	ldr	r1, [pc, #56]	; (8004568 <I2C_MasterRequestWrite+0xfc>)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f875 	bl	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e010      	b.n	8004560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800453e:	897b      	ldrh	r3, [r7, #10]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4907      	ldr	r1, [pc, #28]	; (800456c <I2C_MasterRequestWrite+0x100>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f865 	bl	800461e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	00010008 	.word	0x00010008
 800456c:	00010002 	.word	0x00010002

08004570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004580:	e025      	b.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d021      	beq.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458a:	f7fe fa8d 	bl	8002aa8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d302      	bcc.n	80045a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d116      	bne.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f043 0220 	orr.w	r2, r3, #32
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e023      	b.n	8004616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10d      	bne.n	80045f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	e00c      	b.n	800460e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4013      	ands	r3, r2
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	bf0c      	ite	eq
 8004606:	2301      	moveq	r3, #1
 8004608:	2300      	movne	r3, #0
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	429a      	cmp	r2, r3
 8004612:	d0b6      	beq.n	8004582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800462c:	e051      	b.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463c:	d123      	bne.n	8004686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0204 	orr.w	r2, r3, #4
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e046      	b.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468c:	d021      	beq.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468e:	f7fe fa0b 	bl	8002aa8 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d302      	bcc.n	80046a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d116      	bne.n	80046d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e020      	b.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10c      	bne.n	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4013      	ands	r3, r2
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	e00b      	b.n	800470e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	43da      	mvns	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d18d      	bne.n	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004728:	e02d      	b.n	8004786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f878 	bl	8004820 <I2C_IsAcknowledgeFailed>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e02d      	b.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d021      	beq.n	8004786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004742:	f7fe f9b1 	bl	8002aa8 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	429a      	cmp	r2, r3
 8004750:	d302      	bcc.n	8004758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d116      	bne.n	8004786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e007      	b.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d1ca      	bne.n	800472a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047aa:	e02d      	b.n	8004808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 f837 	bl	8004820 <I2C_IsAcknowledgeFailed>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e02d      	b.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d021      	beq.n	8004808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c4:	f7fe f970 	bl	8002aa8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d116      	bne.n	8004808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e007      	b.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d1ca      	bne.n	80047ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d11b      	bne.n	8004870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e267      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d075      	beq.n	800498a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489e:	4b88      	ldr	r3, [pc, #544]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048aa:	4b85      	ldr	r3, [pc, #532]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d112      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c2:	d10b      	bne.n	80048dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d05b      	beq.n	8004988 <HAL_RCC_OscConfig+0x108>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d157      	bne.n	8004988 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e242      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d106      	bne.n	80048f4 <HAL_RCC_OscConfig+0x74>
 80048e6:	4b76      	ldr	r3, [pc, #472]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a75      	ldr	r2, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e01d      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x98>
 80048fe:	4b70      	ldr	r3, [pc, #448]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6f      	ldr	r2, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b6d      	ldr	r3, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6c      	ldr	r2, [pc, #432]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e00b      	b.n	8004930 <HAL_RCC_OscConfig+0xb0>
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a68      	ldr	r2, [pc, #416]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800491e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b66      	ldr	r3, [pc, #408]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a65      	ldr	r2, [pc, #404]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d013      	beq.n	8004960 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004938:	f7fe f8b6 	bl	8002aa8 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004940:	f7fe f8b2 	bl	8002aa8 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e207      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b5b      	ldr	r3, [pc, #364]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xc0>
 800495e:	e014      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fe f8a2 	bl	8002aa8 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004968:	f7fe f89e 	bl	8002aa8 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b64      	cmp	r3, #100	; 0x64
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e1f3      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	4b51      	ldr	r3, [pc, #324]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0xe8>
 8004986:	e000      	b.n	800498a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d063      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004996:	4b4a      	ldr	r3, [pc, #296]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049a2:	4b47      	ldr	r3, [pc, #284]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d11c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d116      	bne.n	80049e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e1c7      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	4937      	ldr	r1, [pc, #220]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	e03a      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f0:	4b34      	ldr	r3, [pc, #208]	; (8004ac4 <HAL_RCC_OscConfig+0x244>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f6:	f7fe f857 	bl	8002aa8 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049fe:	f7fe f853 	bl	8002aa8 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e1a8      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	4b2b      	ldr	r3, [pc, #172]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1c:	4b28      	ldr	r3, [pc, #160]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4925      	ldr	r1, [pc, #148]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]
 8004a30:	e015      	b.n	8004a5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <HAL_RCC_OscConfig+0x244>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fe f836 	bl	8002aa8 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fe f832 	bl	8002aa8 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e187      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d036      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a78:	f7fe f816 	bl	8002aa8 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a80:	f7fe f812 	bl	8002aa8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e167      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <HAL_RCC_OscConfig+0x240>)
 8004a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x200>
 8004a9e:	e01b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCC_OscConfig+0x248>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa6:	f7fd ffff 	bl	8002aa8 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aac:	e00e      	b.n	8004acc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aae:	f7fd fffb 	bl	8002aa8 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d907      	bls.n	8004acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e150      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	42470000 	.word	0x42470000
 8004ac8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1ea      	bne.n	8004aae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 8097 	beq.w	8004c14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aea:	4b81      	ldr	r3, [pc, #516]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	4b7d      	ldr	r3, [pc, #500]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a7c      	ldr	r2, [pc, #496]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b7a      	ldr	r3, [pc, #488]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	60bb      	str	r3, [r7, #8]
 8004b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	4b77      	ldr	r3, [pc, #476]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d118      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b22:	4b74      	ldr	r3, [pc, #464]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a73      	ldr	r2, [pc, #460]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2e:	f7fd ffbb 	bl	8002aa8 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b36:	f7fd ffb7 	bl	8002aa8 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e10c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <HAL_RCC_OscConfig+0x474>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0f0      	beq.n	8004b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <HAL_RCC_OscConfig+0x2ea>
 8004b5c:	4b64      	ldr	r3, [pc, #400]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b60:	4a63      	ldr	r2, [pc, #396]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6713      	str	r3, [r2, #112]	; 0x70
 8004b68:	e01c      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x30c>
 8004b72:	4b5f      	ldr	r3, [pc, #380]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a5e      	ldr	r2, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	4b5c      	ldr	r3, [pc, #368]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	4a5b      	ldr	r2, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8a:	e00b      	b.n	8004ba4 <HAL_RCC_OscConfig+0x324>
 8004b8c:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b55      	ldr	r3, [pc, #340]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a54      	ldr	r2, [pc, #336]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd ff7c 	bl	8002aa8 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fd ff78 	bl	8002aa8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0cb      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bca:	4b49      	ldr	r3, [pc, #292]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0ee      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x334>
 8004bd6:	e014      	b.n	8004c02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd8:	f7fd ff66 	bl	8002aa8 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bde:	e00a      	b.n	8004bf6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be0:	f7fd ff62 	bl	8002aa8 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e0b5      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1ee      	bne.n	8004be0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d105      	bne.n	8004c14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80a1 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1e:	4b34      	ldr	r3, [pc, #208]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 030c 	and.w	r3, r3, #12
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d05c      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d141      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd ff36 	bl	8002aa8 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fd ff32 	bl	8002aa8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e087      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	019b      	lsls	r3, r3, #6
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	491b      	ldr	r1, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8e:	f7fd ff0b 	bl	8002aa8 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c96:	f7fd ff07 	bl	8002aa8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e05c      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <HAL_RCC_OscConfig+0x416>
 8004cb4:	e054      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_OscConfig+0x478>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fef4 	bl	8002aa8 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc4:	f7fd fef0 	bl	8002aa8 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e045      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd6:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x444>
 8004ce2:	e03d      	b.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e038      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cfc:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_RCC_OscConfig+0x4ec>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d028      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d121      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d11a      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d111      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	3b01      	subs	r3, #1
 8004d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d001      	beq.n	8004d60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800

08004d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0cc      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b68      	ldr	r3, [pc, #416]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d90c      	bls.n	8004dac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e0b8      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d020      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc4:	4b59      	ldr	r3, [pc, #356]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4a58      	ldr	r2, [pc, #352]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a52      	ldr	r2, [pc, #328]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004de6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de8:	4b50      	ldr	r3, [pc, #320]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	494d      	ldr	r1, [pc, #308]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d044      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0e:	4b47      	ldr	r3, [pc, #284]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d119      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d003      	beq.n	8004e2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b3f      	ldr	r3, [pc, #252]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e06f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e067      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4934      	ldr	r1, [pc, #208]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e60:	f7fd fe22 	bl	8002aa8 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fd fe1e 	bl	8002aa8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04f      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b25      	ldr	r3, [pc, #148]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d20c      	bcs.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e032      	b.n	8004f1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec4:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4916      	ldr	r1, [pc, #88]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee2:	4b12      	ldr	r3, [pc, #72]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	490e      	ldr	r1, [pc, #56]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ef6:	f000 f821 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004efa:	4602      	mov	r2, r0
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	490a      	ldr	r1, [pc, #40]	; (8004f30 <HAL_RCC_ClockConfig+0x1c0>)
 8004f08:	5ccb      	ldrb	r3, [r1, r3]
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	4a09      	ldr	r2, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f12:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1c8>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fd fd82 	bl	8002a20 <HAL_InitTick>

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40023c00 	.word	0x40023c00
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	0800c314 	.word	0x0800c314
 8004f34:	20000020 	.word	0x20000020
 8004f38:	20000024 	.word	0x20000024

08004f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b090      	sub	sp, #64	; 0x40
 8004f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
 8004f48:	2300      	movs	r3, #0
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f54:	4b59      	ldr	r3, [pc, #356]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x40>
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	f200 80a1 	bhi.w	80050a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0x34>
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6e:	e09b      	b.n	80050a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f74:	e09b      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f76:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f7a:	e098      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f7c:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f86:	4b4d      	ldr	r3, [pc, #308]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d028      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f92:	4b4a      	ldr	r3, [pc, #296]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	099b      	lsrs	r3, r3, #6
 8004f98:	2200      	movs	r2, #0
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa8:	fb03 f201 	mul.w	r2, r3, r1
 8004fac:	2300      	movs	r3, #0
 8004fae:	fb00 f303 	mul.w	r3, r0, r3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	4a43      	ldr	r2, [pc, #268]	; (80050c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb6:	fba0 1202 	umull	r1, r2, r0, r2
 8004fba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc2:	4413      	add	r3, r2
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	61fa      	str	r2, [r7, #28]
 8004fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fd6:	f7fb fe5f 	bl	8000c98 <__aeabi_uldivmod>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4613      	mov	r3, r2
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe2:	e053      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe4:	4b35      	ldr	r3, [pc, #212]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	099b      	lsrs	r3, r3, #6
 8004fea:	2200      	movs	r2, #0
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	617a      	str	r2, [r7, #20]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ff6:	f04f 0b00 	mov.w	fp, #0
 8004ffa:	4652      	mov	r2, sl
 8004ffc:	465b      	mov	r3, fp
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500c:	0150      	lsls	r0, r2, #5
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	ebb2 080a 	subs.w	r8, r2, sl
 8005016:	eb63 090b 	sbc.w	r9, r3, fp
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005026:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800502a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800502e:	ebb2 0408 	subs.w	r4, r2, r8
 8005032:	eb63 0509 	sbc.w	r5, r3, r9
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	00eb      	lsls	r3, r5, #3
 8005040:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005044:	00e2      	lsls	r2, r4, #3
 8005046:	4614      	mov	r4, r2
 8005048:	461d      	mov	r5, r3
 800504a:	eb14 030a 	adds.w	r3, r4, sl
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	eb45 030b 	adc.w	r3, r5, fp
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005062:	4629      	mov	r1, r5
 8005064:	028b      	lsls	r3, r1, #10
 8005066:	4621      	mov	r1, r4
 8005068:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800506c:	4621      	mov	r1, r4
 800506e:	028a      	lsls	r2, r1, #10
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005076:	2200      	movs	r2, #0
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	60fa      	str	r2, [r7, #12]
 800507c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005080:	f7fb fe0a 	bl	8000c98 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4613      	mov	r3, r2
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_GetSysClockFreq+0x180>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	3301      	adds	r3, #1
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800509c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050a6:	e002      	b.n	80050ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80050aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3740      	adds	r7, #64	; 0x40
 80050b4:	46bd      	mov	sp, r7
 80050b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	017d7840 	.word	0x017d7840

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000020 	.word	0x20000020

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	0800c324 	.word	0x0800c324

08005108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800510c:	f7ff ffdc 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	0b5b      	lsrs	r3, r3, #13
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK2Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	0800c324 	.word	0x0800c324

08005130 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e097      	b.n	8005274 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d106      	bne.n	800515e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7fd fac3 	bl	80026e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6812      	ldr	r2, [r2, #0]
 8005170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005174:	f023 0307 	bic.w	r3, r3, #7
 8005178:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 fa57 	bl	8005638 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	4313      	orrs	r3, r2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80051d0:	f023 030c 	bic.w	r3, r3, #12
 80051d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	021b      	lsls	r3, r3, #8
 80051ec:	4313      	orrs	r3, r2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	011a      	lsls	r2, r3, #4
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	031b      	lsls	r3, r3, #12
 8005200:	4313      	orrs	r3, r2
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4313      	orrs	r3, r2
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005216:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	4313      	orrs	r3, r2
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3718      	adds	r7, #24
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800528c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005294:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800529c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d110      	bne.n	80052ce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d102      	bne.n	80052b8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b2:	7b7b      	ldrb	r3, [r7, #13]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d001      	beq.n	80052bc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e089      	b.n	80053d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052cc:	e031      	b.n	8005332 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d110      	bne.n	80052f6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052d4:	7bbb      	ldrb	r3, [r7, #14]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d102      	bne.n	80052e0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80052da:	7b3b      	ldrb	r3, [r7, #12]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d001      	beq.n	80052e4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e075      	b.n	80053d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052f4:	e01d      	b.n	8005332 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d108      	bne.n	800530e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005302:	7b7b      	ldrb	r3, [r7, #13]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d102      	bne.n	800530e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005308:	7b3b      	ldrb	r3, [r7, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e05e      	b.n	80053d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2202      	movs	r2, #2
 800531e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2202      	movs	r2, #2
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d010      	beq.n	8005360 <HAL_TIM_Encoder_Start_IT+0xe4>
 800533e:	e01f      	b.n	8005380 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2201      	movs	r2, #1
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f9f5 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0202 	orr.w	r2, r2, #2
 800535c:	60da      	str	r2, [r3, #12]
      break;
 800535e:	e02e      	b.n	80053be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	2104      	movs	r1, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f9e5 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f042 0204 	orr.w	r2, r2, #4
 800537c:	60da      	str	r2, [r3, #12]
      break;
 800537e:	e01e      	b.n	80053be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2201      	movs	r2, #1
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f9d5 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	2104      	movs	r1, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f9ce 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0202 	orr.w	r2, r2, #2
 80053aa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0204 	orr.w	r2, r2, #4
 80053ba:	60da      	str	r2, [r3, #12]
      break;
 80053bc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fc fae4 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8ea 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8f1 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0204 	mvn.w	r2, #4
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc faba 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8c0 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8c7 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0208 	mvn.w	r2, #8
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fc fa90 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f896 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f89d 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2208      	movs	r2, #8
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc fa66 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f86c 	bl	80055fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f873 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0201 	mvn.w	r2, #1
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f846 	bl	80055e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f976 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f838 	bl	8005624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0220 	mvn.w	r2, #32
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f940 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a34      	ldr	r2, [pc, #208]	; (800571c <TIM_Base_SetConfig+0xe4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a31      	ldr	r2, [pc, #196]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a30      	ldr	r2, [pc, #192]	; (8005724 <TIM_Base_SetConfig+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x38>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a2f      	ldr	r2, [pc, #188]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_Base_SetConfig+0xe4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d017      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_Base_SetConfig+0xe8>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_Base_SetConfig+0xec>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <TIM_Base_SetConfig+0xf0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1f      	ldr	r2, [pc, #124]	; (800572c <TIM_Base_SetConfig+0xf4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1e      	ldr	r2, [pc, #120]	; (8005730 <TIM_Base_SetConfig+0xf8>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_Base_SetConfig+0x8a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <TIM_Base_SetConfig+0xfc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d108      	bne.n	80056d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a08      	ldr	r2, [pc, #32]	; (800571c <TIM_Base_SetConfig+0xe4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d103      	bne.n	8005708 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	615a      	str	r2, [r3, #20]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40010000 	.word	0x40010000
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e050      	b.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e8:	d013      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a16      	ldr	r2, [pc, #88]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10c      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4313      	orrs	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e03f      	b.n	800591a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc ff92 	bl	80027d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	; 0x24
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ff43 	bl	8006758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	; 0x30
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	4613      	mov	r3, r2
 8005930:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b20      	cmp	r3, #32
 800593c:	d165      	bne.n	8005a0a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Transmit_DMA+0x26>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e05e      	b.n	8005a0c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UART_Transmit_DMA+0x38>
 8005958:	2302      	movs	r3, #2
 800595a:	e057      	b.n	8005a0c <HAL_UART_Transmit_DMA+0xe8>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2221      	movs	r2, #33	; 0x21
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <HAL_UART_Transmit_DMA+0xf0>)
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <HAL_UART_Transmit_DMA+0xf4>)
 8005992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005998:	4a20      	ldr	r2, [pc, #128]	; (8005a1c <HAL_UART_Transmit_DMA+0xf8>)
 800599a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	2200      	movs	r2, #0
 80059a2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80059a4:	f107 0308 	add.w	r3, r7, #8
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	6819      	ldr	r1, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3304      	adds	r3, #4
 80059b8:	461a      	mov	r2, r3
 80059ba:	88fb      	ldrh	r3, [r7, #6]
 80059bc:	f7fd fe22 	bl	8003604 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059c8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f2:	627a      	str	r2, [r7, #36]	; 0x24
 80059f4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6a39      	ldr	r1, [r7, #32]
 80059f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3730      	adds	r7, #48	; 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	08005ff1 	.word	0x08005ff1
 8005a18:	0800608b 	.word	0x0800608b
 8005a1c:	08006203 	.word	0x08006203

08005a20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d11d      	bne.n	8005a76 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_UART_Receive_DMA+0x26>
 8005a40:	88fb      	ldrh	r3, [r7, #6]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e016      	b.n	8005a78 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Receive_DMA+0x38>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e00f      	b.n	8005a78 <HAL_UART_Receive_DMA+0x58>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 fc13 	bl	8006298 <UART_Start_Receive_DMA>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e000      	b.n	8005a78 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a76:	2302      	movs	r3, #2
  }
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0ba      	sub	sp, #232	; 0xe8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd7f 	bl	80065e2 <UART_Receive_IT>
      return;
 8005ae4:	e256      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80de 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80d1 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
 8005b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 81ed 	beq.w	8005f8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fd0a 	bl	80065e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_UART_IRQHandler+0x17a>
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04f      	beq.n	8005c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc12 	bl	8006424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d141      	bne.n	8005c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1d9      	bne.n	8005c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	4a7d      	ldr	r2, [pc, #500]	; (8005e5c <HAL_UART_IRQHandler+0x3dc>)
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd fd90 	bl	8003794 <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e00e      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f99a 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00a      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f996 	bl	8005fc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e006      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f992 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ca6:	e170      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	bf00      	nop
    return;
 8005caa:	e16e      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 814a 	bne.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8143 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 813c 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	f040 80b4 	bne.w	8005e60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8140 	beq.w	8005f8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f080 8139 	bcs.w	8005f8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2e:	f000 8088 	beq.w	8005e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e1      	bne.n	8005d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fc39 	bl	80036b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8c0 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e58:	e099      	b.n	8005f8e <HAL_UART_IRQHandler+0x50e>
 8005e5a:	bf00      	nop
 8005e5c:	080064eb 	.word	0x080064eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 808b 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8005eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e3      	bne.n	8005e86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3314      	adds	r3, #20
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f28:	61fa      	str	r2, [r7, #28]
 8005f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	617b      	str	r3, [r7, #20]
   return(result);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e3      	bne.n	8005f04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f848 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f48:	e023      	b.n	8005f92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
 8005f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fad5 	bl	8006512 <UART_Transmit_IT>
    return;
 8005f68:	e014      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb15 	bl	80065b2 <UART_EndTransmit_IT>
    return;
 8005f88:	e004      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    return;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	37e8      	adds	r7, #232	; 0xe8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fe4:	bf00      	nop
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b090      	sub	sp, #64	; 0x40
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d137      	bne.n	800607c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	2200      	movs	r2, #0
 8006010:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	623b      	str	r3, [r7, #32]
   return(result);
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006032:	633a      	str	r2, [r7, #48]	; 0x30
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e5      	bne.n	8006012 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	60fb      	str	r3, [r7, #12]
   return(result);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006066:	61fa      	str	r2, [r7, #28]
 8006068:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	69b9      	ldr	r1, [r7, #24]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	617b      	str	r3, [r7, #20]
   return(result);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800607a:	e002      	b.n	8006082 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800607c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800607e:	f7fc fc5f 	bl	8002940 <HAL_UART_TxCpltCallback>
}
 8006082:	bf00      	nop
 8006084:	3740      	adds	r7, #64	; 0x40
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff ff7f 	bl	8005f9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800609e:	bf00      	nop
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b09c      	sub	sp, #112	; 0x70
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d172      	bne.n	80061a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c4:	2200      	movs	r2, #0
 80060c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	330c      	adds	r3, #12
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800610c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800610e:	f023 0301 	bic.w	r3, r3, #1
 8006112:	667b      	str	r3, [r7, #100]	; 0x64
 8006114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3314      	adds	r3, #20
 800611a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800611c:	647a      	str	r2, [r7, #68]	; 0x44
 800611e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800612a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e5      	bne.n	80060fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3314      	adds	r3, #20
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	623b      	str	r3, [r7, #32]
   return(result);
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006146:	663b      	str	r3, [r7, #96]	; 0x60
 8006148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3314      	adds	r3, #20
 800614e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006150:	633a      	str	r2, [r7, #48]	; 0x30
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d119      	bne.n	80061a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	330c      	adds	r3, #12
 800617a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60fb      	str	r3, [r7, #12]
   return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0310 	bic.w	r3, r3, #16
 800618a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800618c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	617b      	str	r3, [r7, #20]
   return(result);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d106      	bne.n	80061be <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061b4:	4619      	mov	r1, r3
 80061b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061b8:	f7ff ff0e 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061bc:	e002      	b.n	80061c4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80061be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80061c0:	f7fc fbd0 	bl	8002964 <HAL_UART_RxCpltCallback>
}
 80061c4:	bf00      	nop
 80061c6:	3770      	adds	r7, #112	; 0x70
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d108      	bne.n	80061f4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	4619      	mov	r1, r3
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fef3 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061f2:	e002      	b.n	80061fa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fedb 	bl	8005fb0 <HAL_UART_RxHalfCpltCallback>
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	bf0c      	ite	eq
 8006222:	2301      	moveq	r3, #1
 8006224:	2300      	movne	r3, #0
 8006226:	b2db      	uxtb	r3, r3
 8006228:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b21      	cmp	r3, #33	; 0x21
 8006234:	d108      	bne.n	8006248 <UART_DMAError+0x46>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006242:	68b8      	ldr	r0, [r7, #8]
 8006244:	f000 f8c6 	bl	80063d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b22      	cmp	r3, #34	; 0x22
 8006268:	d108      	bne.n	800627c <UART_DMAError+0x7a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f000 f8d4 	bl	8006424 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	f043 0210 	orr.w	r2, r3, #16
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f7ff fe9b 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b098      	sub	sp, #96	; 0x60
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2222      	movs	r2, #34	; 0x22
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c4:	4a40      	ldr	r2, [pc, #256]	; (80063c8 <UART_Start_Receive_DMA+0x130>)
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	4a3f      	ldr	r2, [pc, #252]	; (80063cc <UART_Start_Receive_DMA+0x134>)
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d4:	4a3e      	ldr	r2, [pc, #248]	; (80063d0 <UART_Start_Receive_DMA+0x138>)
 80062d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2200      	movs	r2, #0
 80062de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062e0:	f107 0308 	add.w	r3, r7, #8
 80062e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	f7fd f984 	bl	8003604 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80062fc:	2300      	movs	r3, #0
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d019      	beq.n	8006356 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
 8006328:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006338:	65bb      	str	r3, [r7, #88]	; 0x58
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006342:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006344:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e5      	bne.n	8006322 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3314      	adds	r3, #20
 800635c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	f043 0301 	orr.w	r3, r3, #1
 800636c:	657b      	str	r3, [r7, #84]	; 0x54
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006376:	63ba      	str	r2, [r7, #56]	; 0x38
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800637c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	617b      	str	r3, [r7, #20]
   return(result);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063aa:	627a      	str	r2, [r7, #36]	; 0x24
 80063ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ae:	6a39      	ldr	r1, [r7, #32]
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e5      	bne.n	800638a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3760      	adds	r7, #96	; 0x60
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	080060a7 	.word	0x080060a7
 80063cc:	080061cd 	.word	0x080061cd
 80063d0:	08006203 	.word	0x08006203

080063d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b089      	sub	sp, #36	; 0x24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	61ba      	str	r2, [r7, #24]
 80063fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	613b      	str	r3, [r7, #16]
   return(result);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006418:	bf00      	nop
 800641a:	3724      	adds	r7, #36	; 0x24
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b095      	sub	sp, #84	; 0x54
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	330c      	adds	r3, #12
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006436:	e853 3f00 	ldrex	r3, [r3]
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	330c      	adds	r3, #12
 800644a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800644c:	643a      	str	r2, [r7, #64]	; 0x40
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006452:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e5      	bne.n	800642c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3314      	adds	r3, #20
 8006466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	e853 3f00 	ldrex	r3, [r3]
 800646e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	64bb      	str	r3, [r7, #72]	; 0x48
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3314      	adds	r3, #20
 800647e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006488:	e841 2300 	strex	r3, r2, [r1]
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1e5      	bne.n	8006460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d119      	bne.n	80064d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	330c      	adds	r3, #12
 80064a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f023 0310 	bic.w	r3, r3, #16
 80064b2:	647b      	str	r3, [r7, #68]	; 0x44
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	330c      	adds	r3, #12
 80064ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064bc:	61ba      	str	r2, [r7, #24]
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	613b      	str	r3, [r7, #16]
   return(result);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80064de:	bf00      	nop
 80064e0:	3754      	adds	r7, #84	; 0x54
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f7ff fd5d 	bl	8005fc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006512:	b480      	push	{r7}
 8006514:	b085      	sub	sp, #20
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b21      	cmp	r3, #33	; 0x21
 8006524:	d13e      	bne.n	80065a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800652e:	d114      	bne.n	800655a <UART_Transmit_IT+0x48>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d110      	bne.n	800655a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1b      	ldr	r3, [r3, #32]
 800653c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800654c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	1c9a      	adds	r2, r3, #2
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	621a      	str	r2, [r3, #32]
 8006558:	e008      	b.n	800656c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	1c59      	adds	r1, r3, #1
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6211      	str	r1, [r2, #32]
 8006564:	781a      	ldrb	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29b      	uxth	r3, r3
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4619      	mov	r1, r3
 800657a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800658e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e000      	b.n	80065a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065a4:	2302      	movs	r3, #2
  }
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fc f9b4 	bl	8002940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08c      	sub	sp, #48	; 0x30
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b22      	cmp	r3, #34	; 0x22
 80065f4:	f040 80ab 	bne.w	800674e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006600:	d117      	bne.n	8006632 <UART_Receive_IT+0x50>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d113      	bne.n	8006632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006620:	b29a      	uxth	r2, r3
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	1c9a      	adds	r2, r3, #2
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28
 8006630:	e026      	b.n	8006680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006638:	2300      	movs	r3, #0
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006644:	d007      	beq.n	8006656 <UART_Receive_IT+0x74>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10a      	bne.n	8006664 <UART_Receive_IT+0x82>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	e008      	b.n	8006676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	1c5a      	adds	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006690:	2b00      	cmp	r3, #0
 8006692:	d15a      	bne.n	800674a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0220 	bic.w	r2, r2, #32
 80066a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0201 	bic.w	r2, r2, #1
 80066c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d135      	bne.n	8006740 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	e853 3f00 	ldrex	r3, [r3]
 80066e8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f023 0310 	bic.w	r3, r3, #16
 80066f0:	627b      	str	r3, [r7, #36]	; 0x24
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fa:	623a      	str	r2, [r7, #32]
 80066fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	69f9      	ldr	r1, [r7, #28]
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	61bb      	str	r3, [r7, #24]
   return(result);
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e5      	bne.n	80066da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d10a      	bne.n	8006732 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fc4d 	bl	8005fd8 <HAL_UARTEx_RxEventCallback>
 800673e:	e002      	b.n	8006746 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fc f90f 	bl	8002964 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e002      	b.n	8006750 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	e000      	b.n	8006750 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800674e:	2302      	movs	r3, #2
  }
}
 8006750:	4618      	mov	r0, r3
 8006752:	3730      	adds	r7, #48	; 0x30
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800675c:	b0c0      	sub	sp, #256	; 0x100
 800675e:	af00      	add	r7, sp, #0
 8006760:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006774:	68d9      	ldr	r1, [r3, #12]
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	ea40 0301 	orr.w	r3, r0, r1
 8006780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	431a      	orrs	r2, r3
 8006790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067b0:	f021 010c 	bic.w	r1, r1, #12
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067be:	430b      	orrs	r3, r1
 80067c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d2:	6999      	ldr	r1, [r3, #24]
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	ea40 0301 	orr.w	r3, r0, r1
 80067de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b8f      	ldr	r3, [pc, #572]	; (8006a24 <UART_SetConfig+0x2cc>)
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d005      	beq.n	80067f8 <UART_SetConfig+0xa0>
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b8d      	ldr	r3, [pc, #564]	; (8006a28 <UART_SetConfig+0x2d0>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d104      	bne.n	8006802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fe fc86 	bl	8005108 <HAL_RCC_GetPCLK2Freq>
 80067fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006800:	e003      	b.n	800680a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006802:	f7fe fc6d 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8006806:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006814:	f040 810c 	bne.w	8006a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800682a:	4622      	mov	r2, r4
 800682c:	462b      	mov	r3, r5
 800682e:	1891      	adds	r1, r2, r2
 8006830:	65b9      	str	r1, [r7, #88]	; 0x58
 8006832:	415b      	adcs	r3, r3
 8006834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800683a:	4621      	mov	r1, r4
 800683c:	eb12 0801 	adds.w	r8, r2, r1
 8006840:	4629      	mov	r1, r5
 8006842:	eb43 0901 	adc.w	r9, r3, r1
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800685a:	4690      	mov	r8, r2
 800685c:	4699      	mov	r9, r3
 800685e:	4623      	mov	r3, r4
 8006860:	eb18 0303 	adds.w	r3, r8, r3
 8006864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006868:	462b      	mov	r3, r5
 800686a:	eb49 0303 	adc.w	r3, r9, r3
 800686e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800687e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006886:	460b      	mov	r3, r1
 8006888:	18db      	adds	r3, r3, r3
 800688a:	653b      	str	r3, [r7, #80]	; 0x50
 800688c:	4613      	mov	r3, r2
 800688e:	eb42 0303 	adc.w	r3, r2, r3
 8006892:	657b      	str	r3, [r7, #84]	; 0x54
 8006894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800689c:	f7fa f9fc 	bl	8000c98 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4b61      	ldr	r3, [pc, #388]	; (8006a2c <UART_SetConfig+0x2d4>)
 80068a6:	fba3 2302 	umull	r2, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	011c      	lsls	r4, r3, #4
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80068bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80068c8:	415b      	adcs	r3, r3
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80068d0:	4641      	mov	r1, r8
 80068d2:	eb12 0a01 	adds.w	sl, r2, r1
 80068d6:	4649      	mov	r1, r9
 80068d8:	eb43 0b01 	adc.w	fp, r3, r1
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f0:	4692      	mov	sl, r2
 80068f2:	469b      	mov	fp, r3
 80068f4:	4643      	mov	r3, r8
 80068f6:	eb1a 0303 	adds.w	r3, sl, r3
 80068fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068fe:	464b      	mov	r3, r9
 8006900:	eb4b 0303 	adc.w	r3, fp, r3
 8006904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006914:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800691c:	460b      	mov	r3, r1
 800691e:	18db      	adds	r3, r3, r3
 8006920:	643b      	str	r3, [r7, #64]	; 0x40
 8006922:	4613      	mov	r3, r2
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
 800692a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800692e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006932:	f7fa f9b1 	bl	8000c98 <__aeabi_uldivmod>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4611      	mov	r1, r2
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <UART_SetConfig+0x2d4>)
 800693e:	fba3 2301 	umull	r2, r3, r3, r1
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2264      	movs	r2, #100	; 0x64
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006952:	4b36      	ldr	r3, [pc, #216]	; (8006a2c <UART_SetConfig+0x2d4>)
 8006954:	fba3 2302 	umull	r2, r3, r3, r2
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006960:	441c      	add	r4, r3
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800696c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	63b9      	str	r1, [r7, #56]	; 0x38
 800697c:	415b      	adcs	r3, r3
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006984:	4641      	mov	r1, r8
 8006986:	1851      	adds	r1, r2, r1
 8006988:	6339      	str	r1, [r7, #48]	; 0x30
 800698a:	4649      	mov	r1, r9
 800698c:	414b      	adcs	r3, r1
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800699c:	4659      	mov	r1, fp
 800699e:	00cb      	lsls	r3, r1, #3
 80069a0:	4651      	mov	r1, sl
 80069a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069a6:	4651      	mov	r1, sl
 80069a8:	00ca      	lsls	r2, r1, #3
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	4603      	mov	r3, r0
 80069b0:	4642      	mov	r2, r8
 80069b2:	189b      	adds	r3, r3, r2
 80069b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069b8:	464b      	mov	r3, r9
 80069ba:	460a      	mov	r2, r1
 80069bc:	eb42 0303 	adc.w	r3, r2, r3
 80069c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80069d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80069d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80069d8:	460b      	mov	r3, r1
 80069da:	18db      	adds	r3, r3, r3
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069de:	4613      	mov	r3, r2
 80069e0:	eb42 0303 	adc.w	r3, r2, r3
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069ee:	f7fa f953 	bl	8000c98 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <UART_SetConfig+0x2d4>)
 80069f8:	fba3 1302 	umull	r1, r3, r3, r2
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	2164      	movs	r1, #100	; 0x64
 8006a00:	fb01 f303 	mul.w	r3, r1, r3
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	3332      	adds	r3, #50	; 0x32
 8006a0a:	4a08      	ldr	r2, [pc, #32]	; (8006a2c <UART_SetConfig+0x2d4>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	f003 0207 	and.w	r2, r3, #7
 8006a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4422      	add	r2, r4
 8006a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a20:	e105      	b.n	8006c2e <UART_SetConfig+0x4d6>
 8006a22:	bf00      	nop
 8006a24:	40011000 	.word	0x40011000
 8006a28:	40011400 	.word	0x40011400
 8006a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006a42:	4642      	mov	r2, r8
 8006a44:	464b      	mov	r3, r9
 8006a46:	1891      	adds	r1, r2, r2
 8006a48:	6239      	str	r1, [r7, #32]
 8006a4a:	415b      	adcs	r3, r3
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a52:	4641      	mov	r1, r8
 8006a54:	1854      	adds	r4, r2, r1
 8006a56:	4649      	mov	r1, r9
 8006a58:	eb43 0501 	adc.w	r5, r3, r1
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	00eb      	lsls	r3, r5, #3
 8006a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a6a:	00e2      	lsls	r2, r4, #3
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	4643      	mov	r3, r8
 8006a72:	18e3      	adds	r3, r4, r3
 8006a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a78:	464b      	mov	r3, r9
 8006a7a:	eb45 0303 	adc.w	r3, r5, r3
 8006a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	008b      	lsls	r3, r1, #2
 8006aa2:	4621      	mov	r1, r4
 8006aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	008a      	lsls	r2, r1, #2
 8006aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ab0:	f7fa f8f2 	bl	8000c98 <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006aba:	fba3 2302 	umull	r2, r3, r3, r2
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	011c      	lsls	r4, r3, #4
 8006ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	464b      	mov	r3, r9
 8006ad8:	1891      	adds	r1, r2, r2
 8006ada:	61b9      	str	r1, [r7, #24]
 8006adc:	415b      	adcs	r3, r3
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae4:	4641      	mov	r1, r8
 8006ae6:	1851      	adds	r1, r2, r1
 8006ae8:	6139      	str	r1, [r7, #16]
 8006aea:	4649      	mov	r1, r9
 8006aec:	414b      	adcs	r3, r1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	f04f 0300 	mov.w	r3, #0
 8006af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006afc:	4659      	mov	r1, fp
 8006afe:	00cb      	lsls	r3, r1, #3
 8006b00:	4651      	mov	r1, sl
 8006b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b06:	4651      	mov	r1, sl
 8006b08:	00ca      	lsls	r2, r1, #3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	4642      	mov	r2, r8
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b18:	464b      	mov	r3, r9
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	eb42 0303 	adc.w	r3, r2, r3
 8006b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006b3c:	4649      	mov	r1, r9
 8006b3e:	008b      	lsls	r3, r1, #2
 8006b40:	4641      	mov	r1, r8
 8006b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b46:	4641      	mov	r1, r8
 8006b48:	008a      	lsls	r2, r1, #2
 8006b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b4e:	f7fa f8a3 	bl	8000c98 <__aeabi_uldivmod>
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006b58:	fba3 1302 	umull	r1, r3, r3, r2
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	2164      	movs	r1, #100	; 0x64
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	011b      	lsls	r3, r3, #4
 8006b68:	3332      	adds	r3, #50	; 0x32
 8006b6a:	4a34      	ldr	r2, [pc, #208]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	095b      	lsrs	r3, r3, #5
 8006b72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b76:	441c      	add	r4, r3
 8006b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b80:	677a      	str	r2, [r7, #116]	; 0x74
 8006b82:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	1891      	adds	r1, r2, r2
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b96:	4641      	mov	r1, r8
 8006b98:	1851      	adds	r1, r2, r1
 8006b9a:	6039      	str	r1, [r7, #0]
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	414b      	adcs	r3, r1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bae:	4659      	mov	r1, fp
 8006bb0:	00cb      	lsls	r3, r1, #3
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bb8:	4651      	mov	r1, sl
 8006bba:	00ca      	lsls	r2, r1, #3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4642      	mov	r2, r8
 8006bc4:	189b      	adds	r3, r3, r2
 8006bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc8:	464b      	mov	r3, r9
 8006bca:	460a      	mov	r2, r1
 8006bcc:	eb42 0303 	adc.w	r3, r2, r3
 8006bd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	663b      	str	r3, [r7, #96]	; 0x60
 8006bdc:	667a      	str	r2, [r7, #100]	; 0x64
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	f04f 0300 	mov.w	r3, #0
 8006be6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006bea:	4649      	mov	r1, r9
 8006bec:	008b      	lsls	r3, r1, #2
 8006bee:	4641      	mov	r1, r8
 8006bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	008a      	lsls	r2, r1, #2
 8006bf8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bfc:	f7fa f84c 	bl	8000c98 <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006c06:	fba3 1302 	umull	r1, r3, r3, r2
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2164      	movs	r1, #100	; 0x64
 8006c0e:	fb01 f303 	mul.w	r3, r1, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	3332      	adds	r3, #50	; 0x32
 8006c18:	4a08      	ldr	r2, [pc, #32]	; (8006c3c <UART_SetConfig+0x4e4>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	095b      	lsrs	r3, r3, #5
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4422      	add	r2, r4
 8006c2c:	609a      	str	r2, [r3, #8]
}
 8006c2e:	bf00      	nop
 8006c30:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006c34:	46bd      	mov	sp, r7
 8006c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c3a:	bf00      	nop
 8006c3c:	51eb851f 	.word	0x51eb851f

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2000002c 	.word	0x2000002c

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4d0d      	ldr	r5, [pc, #52]	; (8006c84 <__libc_init_array+0x38>)
 8006c50:	4c0d      	ldr	r4, [pc, #52]	; (8006c88 <__libc_init_array+0x3c>)
 8006c52:	1b64      	subs	r4, r4, r5
 8006c54:	10a4      	asrs	r4, r4, #2
 8006c56:	2600      	movs	r6, #0
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	4d0b      	ldr	r5, [pc, #44]	; (8006c8c <__libc_init_array+0x40>)
 8006c5e:	4c0c      	ldr	r4, [pc, #48]	; (8006c90 <__libc_init_array+0x44>)
 8006c60:	f004 fc92 	bl	800b588 <_init>
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	2600      	movs	r6, #0
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	0800c7e4 	.word	0x0800c7e4
 8006c88:	0800c7e4 	.word	0x0800c7e4
 8006c8c:	0800c7e4 	.word	0x0800c7e4
 8006c90:	0800c7e8 	.word	0x0800c7e8

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__cvt>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	ec55 4b10 	vmov	r4, r5, d0
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cba:	461d      	movlt	r5, r3
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	232d      	movlt	r3, #45	; 0x2d
 8006cc0:	700b      	strb	r3, [r1, #0]
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cc8:	4691      	mov	r9, r2
 8006cca:	f023 0820 	bic.w	r8, r3, #32
 8006cce:	bfbc      	itt	lt
 8006cd0:	4622      	movlt	r2, r4
 8006cd2:	4614      	movlt	r4, r2
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x42>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x3e>
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x44>
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	ab02      	add	r3, sp, #8
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	ec45 4b10 	vmov	d0, r4, r5
 8006cf4:	4653      	mov	r3, sl
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	f001 fdae 	bl	8008858 <_dtoa_r>
 8006cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d00:	4607      	mov	r7, r0
 8006d02:	d102      	bne.n	8006d0a <__cvt+0x66>
 8006d04:	f019 0f01 	tst.w	r9, #1
 8006d08:	d022      	beq.n	8006d50 <__cvt+0xac>
 8006d0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d0e:	eb07 0906 	add.w	r9, r7, r6
 8006d12:	d110      	bne.n	8006d36 <__cvt+0x92>
 8006d14:	783b      	ldrb	r3, [r7, #0]
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d10a      	bne.n	8006d30 <__cvt+0x8c>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d26:	b918      	cbnz	r0, 8006d30 <__cvt+0x8c>
 8006d28:	f1c6 0601 	rsb	r6, r6, #1
 8006d2c:	f8ca 6000 	str.w	r6, [sl]
 8006d30:	f8da 3000 	ldr.w	r3, [sl]
 8006d34:	4499      	add	r9, r3
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d42:	b108      	cbz	r0, 8006d48 <__cvt+0xa4>
 8006d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d48:	2230      	movs	r2, #48	; 0x30
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	454b      	cmp	r3, r9
 8006d4e:	d307      	bcc.n	8006d60 <__cvt+0xbc>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d54:	1bdb      	subs	r3, r3, r7
 8006d56:	4638      	mov	r0, r7
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	b004      	add	sp, #16
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	9103      	str	r1, [sp, #12]
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e7f0      	b.n	8006d4a <__cvt+0xa6>

08006d68 <__exponent>:
 8006d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	4249      	neglt	r1, r1
 8006d72:	f803 2b02 	strb.w	r2, [r3], #2
 8006d76:	bfb4      	ite	lt
 8006d78:	222d      	movlt	r2, #45	; 0x2d
 8006d7a:	222b      	movge	r2, #43	; 0x2b
 8006d7c:	2909      	cmp	r1, #9
 8006d7e:	7042      	strb	r2, [r0, #1]
 8006d80:	dd2a      	ble.n	8006dd8 <__exponent+0x70>
 8006d82:	f10d 0407 	add.w	r4, sp, #7
 8006d86:	46a4      	mov	ip, r4
 8006d88:	270a      	movs	r7, #10
 8006d8a:	46a6      	mov	lr, r4
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d92:	fb07 1516 	mls	r5, r7, r6, r1
 8006d96:	3530      	adds	r5, #48	; 0x30
 8006d98:	2a63      	cmp	r2, #99	; 0x63
 8006d9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006da2:	4631      	mov	r1, r6
 8006da4:	dcf1      	bgt.n	8006d8a <__exponent+0x22>
 8006da6:	3130      	adds	r1, #48	; 0x30
 8006da8:	f1ae 0502 	sub.w	r5, lr, #2
 8006dac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006db0:	1c44      	adds	r4, r0, #1
 8006db2:	4629      	mov	r1, r5
 8006db4:	4561      	cmp	r1, ip
 8006db6:	d30a      	bcc.n	8006dce <__exponent+0x66>
 8006db8:	f10d 0209 	add.w	r2, sp, #9
 8006dbc:	eba2 020e 	sub.w	r2, r2, lr
 8006dc0:	4565      	cmp	r5, ip
 8006dc2:	bf88      	it	hi
 8006dc4:	2200      	movhi	r2, #0
 8006dc6:	4413      	add	r3, r2
 8006dc8:	1a18      	subs	r0, r3, r0
 8006dca:	b003      	add	sp, #12
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dd6:	e7ed      	b.n	8006db4 <__exponent+0x4c>
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	3130      	adds	r1, #48	; 0x30
 8006ddc:	7083      	strb	r3, [r0, #2]
 8006dde:	70c1      	strb	r1, [r0, #3]
 8006de0:	1d03      	adds	r3, r0, #4
 8006de2:	e7f1      	b.n	8006dc8 <__exponent+0x60>

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	ed2d 8b02 	vpush	{d8}
 8006dec:	b08d      	sub	sp, #52	; 0x34
 8006dee:	460c      	mov	r4, r1
 8006df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006df4:	4616      	mov	r6, r2
 8006df6:	461f      	mov	r7, r3
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f002 fe8b 	bl	8009b14 <_localeconv_r>
 8006dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8006e02:	4650      	mov	r0, sl
 8006e04:	f7f9 f9ec 	bl	80001e0 <strlen>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	f8d8 3000 	ldr.w	r3, [r8]
 8006e14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	f103 0208 	add.w	r2, r3, #8
 8006e22:	f8c8 2000 	str.w	r2, [r8]
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	4b9f      	ldr	r3, [pc, #636]	; (80070c0 <_printf_float+0x2dc>)
 8006e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	f7f9 fe77 	bl	8000b3c <__aeabi_dcmpun>
 8006e4e:	bb88      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	4b9a      	ldr	r3, [pc, #616]	; (80070c0 <_printf_float+0x2dc>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe51 	bl	8000b00 <__aeabi_dcmple>
 8006e5e:	bb48      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe40 	bl	8000aec <__aeabi_dcmplt>
 8006e6c:	b110      	cbz	r0, 8006e74 <_printf_float+0x90>
 8006e6e:	232d      	movs	r3, #45	; 0x2d
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	4b93      	ldr	r3, [pc, #588]	; (80070c4 <_printf_float+0x2e0>)
 8006e76:	4894      	ldr	r0, [pc, #592]	; (80070c8 <_printf_float+0x2e4>)
 8006e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e7c:	bf94      	ite	ls
 8006e7e:	4698      	movls	r8, r3
 8006e80:	4680      	movhi	r8, r0
 8006e82:	2303      	movs	r3, #3
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	f023 0204 	bic.w	r2, r3, #4
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	9700      	str	r7, [sp, #0]
 8006e94:	4633      	mov	r3, r6
 8006e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f9d8 	bl	8007250 <_printf_common>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f040 8090 	bne.w	8006fc6 <_printf_float+0x1e2>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b00d      	add	sp, #52	; 0x34
 8006eac:	ecbd 8b02 	vpop	{d8}
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe3e 	bl	8000b3c <__aeabi_dcmpun>
 8006ec0:	b140      	cbz	r0, 8006ed4 <_printf_float+0xf0>
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbc      	itt	lt
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ece:	487f      	ldr	r0, [pc, #508]	; (80070cc <_printf_float+0x2e8>)
 8006ed0:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <_printf_float+0x2ec>)
 8006ed2:	e7d1      	b.n	8006e78 <_printf_float+0x94>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eda:	9206      	str	r2, [sp, #24]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	d13f      	bne.n	8006f60 <_printf_float+0x17c>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	6861      	ldr	r1, [r4, #4]
 8006ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ef6:	ab09      	add	r3, sp, #36	; 0x24
 8006ef8:	ec49 8b10 	vmov	d0, r8, r9
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fecd 	bl	8006ca4 <__cvt>
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	4680      	mov	r8, r0
 8006f12:	d108      	bne.n	8006f26 <_printf_float+0x142>
 8006f14:	1cc8      	adds	r0, r1, #3
 8006f16:	db02      	blt.n	8006f1e <_printf_float+0x13a>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	dd41      	ble.n	8006fa2 <_printf_float+0x1be>
 8006f1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f22:	fa5f fb8b 	uxtb.w	fp, fp
 8006f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2a:	d820      	bhi.n	8006f6e <_printf_float+0x18a>
 8006f2c:	3901      	subs	r1, #1
 8006f2e:	465a      	mov	r2, fp
 8006f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f34:	9109      	str	r1, [sp, #36]	; 0x24
 8006f36:	f7ff ff17 	bl	8006d68 <__exponent>
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	1813      	adds	r3, r2, r0
 8006f3e:	2a01      	cmp	r2, #1
 8006f40:	4681      	mov	r9, r0
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	dc02      	bgt.n	8006f4c <_printf_float+0x168>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	d501      	bpl.n	8006f50 <_printf_float+0x16c>
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d09c      	beq.n	8006e92 <_printf_float+0xae>
 8006f58:	232d      	movs	r3, #45	; 0x2d
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5e:	e798      	b.n	8006e92 <_printf_float+0xae>
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	2a47      	cmp	r2, #71	; 0x47
 8006f64:	d1be      	bne.n	8006ee4 <_printf_float+0x100>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bc      	bne.n	8006ee4 <_printf_float+0x100>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7b9      	b.n	8006ee2 <_printf_float+0xfe>
 8006f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f72:	d118      	bne.n	8006fa6 <_printf_float+0x1c2>
 8006f74:	2900      	cmp	r1, #0
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	dd0b      	ble.n	8006f92 <_printf_float+0x1ae>
 8006f7a:	6121      	str	r1, [r4, #16]
 8006f7c:	b913      	cbnz	r3, 8006f84 <_printf_float+0x1a0>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	07d0      	lsls	r0, r2, #31
 8006f82:	d502      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006f84:	3301      	adds	r3, #1
 8006f86:	440b      	add	r3, r1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	e7de      	b.n	8006f50 <_printf_float+0x16c>
 8006f92:	b913      	cbnz	r3, 8006f9a <_printf_float+0x1b6>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	07d2      	lsls	r2, r2, #31
 8006f98:	d501      	bpl.n	8006f9e <_printf_float+0x1ba>
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	e7f4      	b.n	8006f88 <_printf_float+0x1a4>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e7f2      	b.n	8006f88 <_printf_float+0x1a4>
 8006fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	db05      	blt.n	8006fb8 <_printf_float+0x1d4>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	6121      	str	r1, [r4, #16]
 8006fb0:	07d8      	lsls	r0, r3, #31
 8006fb2:	d5ea      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006fb4:	1c4b      	adds	r3, r1, #1
 8006fb6:	e7e7      	b.n	8006f88 <_printf_float+0x1a4>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfd4      	ite	le
 8006fbc:	f1c1 0202 	rsble	r2, r1, #2
 8006fc0:	2201      	movgt	r2, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	e7e0      	b.n	8006f88 <_printf_float+0x1a4>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	055a      	lsls	r2, r3, #21
 8006fca:	d407      	bmi.n	8006fdc <_printf_float+0x1f8>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	4642      	mov	r2, r8
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d12c      	bne.n	8007034 <_printf_float+0x250>
 8006fda:	e764      	b.n	8006ea6 <_printf_float+0xc2>
 8006fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe0:	f240 80e0 	bls.w	80071a4 <_printf_float+0x3c0>
 8006fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7f9 fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d034      	beq.n	800705e <_printf_float+0x27a>
 8006ff4:	4a37      	ldr	r2, [pc, #220]	; (80070d4 <_printf_float+0x2f0>)
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f af51 	beq.w	8006ea6 <_printf_float+0xc2>
 8007004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007008:	429a      	cmp	r2, r3
 800700a:	db02      	blt.n	8007012 <_printf_float+0x22e>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07d8      	lsls	r0, r3, #31
 8007010:	d510      	bpl.n	8007034 <_printf_float+0x250>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af41 	beq.w	8006ea6 <_printf_float+0xc2>
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	f104 091a 	add.w	r9, r4, #26
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	4543      	cmp	r3, r8
 8007032:	dc09      	bgt.n	8007048 <_printf_float+0x264>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	079b      	lsls	r3, r3, #30
 8007038:	f100 8105 	bmi.w	8007246 <_printf_float+0x462>
 800703c:	68e0      	ldr	r0, [r4, #12]
 800703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007040:	4298      	cmp	r0, r3
 8007042:	bfb8      	it	lt
 8007044:	4618      	movlt	r0, r3
 8007046:	e730      	b.n	8006eaa <_printf_float+0xc6>
 8007048:	2301      	movs	r3, #1
 800704a:	464a      	mov	r2, r9
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af27 	beq.w	8006ea6 <_printf_float+0xc2>
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	e7e6      	b.n	800702c <_printf_float+0x248>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc39      	bgt.n	80070d8 <_printf_float+0x2f4>
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <_printf_float+0x2f0>)
 8007066:	2301      	movs	r3, #1
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af19 	beq.w	8006ea6 <_printf_float+0xc2>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	4313      	orrs	r3, r2
 800707a:	d102      	bne.n	8007082 <_printf_float+0x29e>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	07d9      	lsls	r1, r3, #31
 8007080:	d5d8      	bpl.n	8007034 <_printf_float+0x250>
 8007082:	ee18 3a10 	vmov	r3, s16
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af09 	beq.w	8006ea6 <_printf_float+0xc2>
 8007094:	f04f 0900 	mov.w	r9, #0
 8007098:	f104 0a1a 	add.w	sl, r4, #26
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	425b      	negs	r3, r3
 80070a0:	454b      	cmp	r3, r9
 80070a2:	dc01      	bgt.n	80070a8 <_printf_float+0x2c4>
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	e792      	b.n	8006fce <_printf_float+0x1ea>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f aef7 	beq.w	8006ea6 <_printf_float+0xc2>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7ee      	b.n	800709c <_printf_float+0x2b8>
 80070be:	bf00      	nop
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	0800c338 	.word	0x0800c338
 80070c8:	0800c33c 	.word	0x0800c33c
 80070cc:	0800c344 	.word	0x0800c344
 80070d0:	0800c340 	.word	0x0800c340
 80070d4:	0800c348 	.word	0x0800c348
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070dc:	429a      	cmp	r2, r3
 80070de:	bfa8      	it	ge
 80070e0:	461a      	movge	r2, r3
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	4691      	mov	r9, r2
 80070e6:	dc37      	bgt.n	8007158 <_printf_float+0x374>
 80070e8:	f04f 0b00 	mov.w	fp, #0
 80070ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f0:	f104 021a 	add.w	r2, r4, #26
 80070f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	eba3 0309 	sub.w	r3, r3, r9
 80070fc:	455b      	cmp	r3, fp
 80070fe:	dc33      	bgt.n	8007168 <_printf_float+0x384>
 8007100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	db3b      	blt.n	8007180 <_printf_float+0x39c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d438      	bmi.n	8007180 <_printf_float+0x39c>
 800710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007114:	1a9a      	subs	r2, r3, r2
 8007116:	eba3 0901 	sub.w	r9, r3, r1
 800711a:	4591      	cmp	r9, r2
 800711c:	bfa8      	it	ge
 800711e:	4691      	movge	r9, r2
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	dc35      	bgt.n	8007192 <_printf_float+0x3ae>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	4543      	cmp	r3, r8
 800713e:	f77f af79 	ble.w	8007034 <_printf_float+0x250>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f aeaa 	beq.w	8006ea6 <_printf_float+0xc2>
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e7ec      	b.n	8007132 <_printf_float+0x34e>
 8007158:	4613      	mov	r3, r2
 800715a:	4631      	mov	r1, r6
 800715c:	4642      	mov	r2, r8
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0x304>
 8007166:	e69e      	b.n	8006ea6 <_printf_float+0xc2>
 8007168:	2301      	movs	r3, #1
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae97 	beq.w	8006ea6 <_printf_float+0xc2>
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	f10b 0b01 	add.w	fp, fp, #1
 800717e:	e7b9      	b.n	80070f4 <_printf_float+0x310>
 8007180:	ee18 3a10 	vmov	r3, s16
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d1be      	bne.n	800710e <_printf_float+0x32a>
 8007190:	e689      	b.n	8006ea6 <_printf_float+0xc2>
 8007192:	9a05      	ldr	r2, [sp, #20]
 8007194:	464b      	mov	r3, r9
 8007196:	4442      	add	r2, r8
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	d1c1      	bne.n	8007126 <_printf_float+0x342>
 80071a2:	e680      	b.n	8006ea6 <_printf_float+0xc2>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	dc01      	bgt.n	80071ae <_printf_float+0x3ca>
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d538      	bpl.n	8007220 <_printf_float+0x43c>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4642      	mov	r2, r8
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f ae74 	beq.w	8006ea6 <_printf_float+0xc2>
 80071be:	ee18 3a10 	vmov	r3, s16
 80071c2:	4652      	mov	r2, sl
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f ae6b 	beq.w	8006ea6 <_printf_float+0xc2>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80071dc:	b9d8      	cbnz	r0, 8007216 <_printf_float+0x432>
 80071de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e0:	f108 0201 	add.w	r2, r8, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d10e      	bne.n	800720e <_printf_float+0x42a>
 80071f0:	e659      	b.n	8006ea6 <_printf_float+0xc2>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4652      	mov	r2, sl
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae52 	beq.w	8006ea6 <_printf_float+0xc2>
 8007202:	f108 0801 	add.w	r8, r8, #1
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	3b01      	subs	r3, #1
 800720a:	4543      	cmp	r3, r8
 800720c:	dcf1      	bgt.n	80071f2 <_printf_float+0x40e>
 800720e:	464b      	mov	r3, r9
 8007210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007214:	e6dc      	b.n	8006fd0 <_printf_float+0x1ec>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	f104 0a1a 	add.w	sl, r4, #26
 800721e:	e7f2      	b.n	8007206 <_printf_float+0x422>
 8007220:	2301      	movs	r3, #1
 8007222:	4642      	mov	r2, r8
 8007224:	e7df      	b.n	80071e6 <_printf_float+0x402>
 8007226:	2301      	movs	r3, #1
 8007228:	464a      	mov	r2, r9
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f ae38 	beq.w	8006ea6 <_printf_float+0xc2>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	4543      	cmp	r3, r8
 8007242:	dcf0      	bgt.n	8007226 <_printf_float+0x442>
 8007244:	e6fa      	b.n	800703c <_printf_float+0x258>
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	f104 0919 	add.w	r9, r4, #25
 800724e:	e7f4      	b.n	800723a <_printf_float+0x456>

08007250 <_printf_common>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	4616      	mov	r6, r2
 8007256:	4699      	mov	r9, r3
 8007258:	688a      	ldr	r2, [r1, #8]
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007260:	4293      	cmp	r3, r2
 8007262:	bfb8      	it	lt
 8007264:	4613      	movlt	r3, r2
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800726c:	4607      	mov	r7, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b10a      	cbz	r2, 8007276 <_printf_common+0x26>
 8007272:	3301      	adds	r3, #1
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	0699      	lsls	r1, r3, #26
 800727a:	bf42      	ittt	mi
 800727c:	6833      	ldrmi	r3, [r6, #0]
 800727e:	3302      	addmi	r3, #2
 8007280:	6033      	strmi	r3, [r6, #0]
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	f015 0506 	ands.w	r5, r5, #6
 8007288:	d106      	bne.n	8007298 <_printf_common+0x48>
 800728a:	f104 0a19 	add.w	sl, r4, #25
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	6832      	ldr	r2, [r6, #0]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dc26      	bgt.n	80072e6 <_printf_common+0x96>
 8007298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800729c:	1e13      	subs	r3, r2, #0
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	d42b      	bmi.n	8007300 <_printf_common+0xb0>
 80072a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d01e      	beq.n	80072f4 <_printf_common+0xa4>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	68e5      	ldr	r5, [r4, #12]
 80072ba:	6832      	ldr	r2, [r6, #0]
 80072bc:	f003 0306 	and.w	r3, r3, #6
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	bf08      	it	eq
 80072c4:	1aad      	subeq	r5, r5, r2
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	2600      	movs	r6, #0
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xc8>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xa8>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4649      	mov	r1, r9
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c0      	blx	r8
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xac>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c6      	b.n	800728e <_printf_common+0x3e>
 8007300:	18e1      	adds	r1, r4, r3
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	2030      	movs	r0, #48	; 0x30
 8007306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730a:	4422      	add	r2, r4
 800730c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007314:	3302      	adds	r3, #2
 8007316:	e7c7      	b.n	80072a8 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa4>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x8e>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	7e0f      	ldrb	r7, [r1, #24]
 8007332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007334:	2f78      	cmp	r7, #120	; 0x78
 8007336:	4691      	mov	r9, r2
 8007338:	4680      	mov	r8, r0
 800733a:	460c      	mov	r4, r1
 800733c:	469a      	mov	sl, r3
 800733e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	; 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d8 	beq.w	80074fe <_printf_i+0x1d2>
 800734e:	2f58      	cmp	r7, #88	; 0x58
 8007350:	f000 80a3 	beq.w	800749a <_printf_i+0x16e>
 8007354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_printf_i+0x40>)
 8007368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074e5 	.word	0x080074e5
 800739c:	08007409 	.word	0x08007409
 80073a0:	080074c7 	.word	0x080074c7
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	08007507 	.word	0x08007507
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007409 	.word	0x08007409
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	080074cf 	.word	0x080074cf
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	602a      	str	r2, [r5, #0]
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a3      	b.n	8007520 <_printf_i+0x1f4>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	6829      	ldr	r1, [r5, #0]
 80073dc:	0606      	lsls	r6, r0, #24
 80073de:	f101 0304 	add.w	r3, r1, #4
 80073e2:	d50a      	bpl.n	80073fa <_printf_i+0xce>
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_i+0xc8>
 80073ec:	232d      	movs	r3, #45	; 0x2d
 80073ee:	4276      	negs	r6, r6
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	485e      	ldr	r0, [pc, #376]	; (8007570 <_printf_i+0x244>)
 80073f6:	230a      	movs	r3, #10
 80073f8:	e019      	b.n	800742e <_printf_i+0x102>
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007402:	bf18      	it	ne
 8007404:	b236      	sxthne	r6, r6
 8007406:	e7ef      	b.n	80073e8 <_printf_i+0xbc>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6820      	ldr	r0, [r4, #0]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	6029      	str	r1, [r5, #0]
 8007410:	0601      	lsls	r1, r0, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xec>
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xf2>
 8007418:	0646      	lsls	r6, r0, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe8>
 800741c:	881e      	ldrh	r6, [r3, #0]
 800741e:	4854      	ldr	r0, [pc, #336]	; (8007570 <_printf_i+0x244>)
 8007420:	2f6f      	cmp	r7, #111	; 0x6f
 8007422:	bf0c      	ite	eq
 8007424:	2308      	moveq	r3, #8
 8007426:	230a      	movne	r3, #10
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6865      	ldr	r5, [r4, #4]
 8007430:	60a5      	str	r5, [r4, #8]
 8007432:	2d00      	cmp	r5, #0
 8007434:	bfa2      	ittt	ge
 8007436:	6821      	ldrge	r1, [r4, #0]
 8007438:	f021 0104 	bicge.w	r1, r1, #4
 800743c:	6021      	strge	r1, [r4, #0]
 800743e:	b90e      	cbnz	r6, 8007444 <_printf_i+0x118>
 8007440:	2d00      	cmp	r5, #0
 8007442:	d04d      	beq.n	80074e0 <_printf_i+0x1b4>
 8007444:	4615      	mov	r5, r2
 8007446:	fbb6 f1f3 	udiv	r1, r6, r3
 800744a:	fb03 6711 	mls	r7, r3, r1, r6
 800744e:	5dc7      	ldrb	r7, [r0, r7]
 8007450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007454:	4637      	mov	r7, r6
 8007456:	42bb      	cmp	r3, r7
 8007458:	460e      	mov	r6, r1
 800745a:	d9f4      	bls.n	8007446 <_printf_i+0x11a>
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10b      	bne.n	8007478 <_printf_i+0x14c>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07de      	lsls	r6, r3, #31
 8007464:	d508      	bpl.n	8007478 <_printf_i+0x14c>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bfde      	ittt	le
 800746e:	2330      	movle	r3, #48	; 0x30
 8007470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007478:	1b52      	subs	r2, r2, r5
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	f8cd a000 	str.w	sl, [sp]
 8007480:	464b      	mov	r3, r9
 8007482:	aa03      	add	r2, sp, #12
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff fee2 	bl	8007250 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	d14c      	bne.n	800752a <_printf_i+0x1fe>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b004      	add	sp, #16
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	4835      	ldr	r0, [pc, #212]	; (8007570 <_printf_i+0x244>)
 800749c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a0:	6829      	ldr	r1, [r5, #0]
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a8:	6029      	str	r1, [r5, #0]
 80074aa:	061d      	lsls	r5, r3, #24
 80074ac:	d514      	bpl.n	80074d8 <_printf_i+0x1ac>
 80074ae:	07df      	lsls	r7, r3, #31
 80074b0:	bf44      	itt	mi
 80074b2:	f043 0320 	orrmi.w	r3, r3, #32
 80074b6:	6023      	strmi	r3, [r4, #0]
 80074b8:	b91e      	cbnz	r6, 80074c2 <_printf_i+0x196>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f023 0320 	bic.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2310      	movs	r3, #16
 80074c4:	e7b0      	b.n	8007428 <_printf_i+0xfc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2378      	movs	r3, #120	; 0x78
 80074d0:	4828      	ldr	r0, [pc, #160]	; (8007574 <_printf_i+0x248>)
 80074d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d6:	e7e3      	b.n	80074a0 <_printf_i+0x174>
 80074d8:	0659      	lsls	r1, r3, #25
 80074da:	bf48      	it	mi
 80074dc:	b2b6      	uxthmi	r6, r6
 80074de:	e7e6      	b.n	80074ae <_printf_i+0x182>
 80074e0:	4615      	mov	r5, r2
 80074e2:	e7bb      	b.n	800745c <_printf_i+0x130>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	6826      	ldr	r6, [r4, #0]
 80074e8:	6961      	ldr	r1, [r4, #20]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6028      	str	r0, [r5, #0]
 80074ee:	0635      	lsls	r5, r6, #24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	d501      	bpl.n	80074f8 <_printf_i+0x1cc>
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e002      	b.n	80074fe <_printf_i+0x1d2>
 80074f8:	0670      	lsls	r0, r6, #25
 80074fa:	d5fb      	bpl.n	80074f4 <_printf_i+0x1c8>
 80074fc:	8019      	strh	r1, [r3, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	4615      	mov	r5, r2
 8007504:	e7ba      	b.n	800747c <_printf_i+0x150>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	602a      	str	r2, [r5, #0]
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	2100      	movs	r1, #0
 8007512:	4628      	mov	r0, r5
 8007514:	f7f8 fe6c 	bl	80001f0 <memchr>
 8007518:	b108      	cbz	r0, 800751e <_printf_i+0x1f2>
 800751a:	1b40      	subs	r0, r0, r5
 800751c:	6060      	str	r0, [r4, #4]
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	2300      	movs	r3, #0
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	e7a8      	b.n	800747c <_printf_i+0x150>
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	462a      	mov	r2, r5
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	47d0      	blx	sl
 8007534:	3001      	adds	r0, #1
 8007536:	d0ab      	beq.n	8007490 <_printf_i+0x164>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	079b      	lsls	r3, r3, #30
 800753c:	d413      	bmi.n	8007566 <_printf_i+0x23a>
 800753e:	68e0      	ldr	r0, [r4, #12]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	4298      	cmp	r0, r3
 8007544:	bfb8      	it	lt
 8007546:	4618      	movlt	r0, r3
 8007548:	e7a4      	b.n	8007494 <_printf_i+0x168>
 800754a:	2301      	movs	r3, #1
 800754c:	4632      	mov	r2, r6
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d09b      	beq.n	8007490 <_printf_i+0x164>
 8007558:	3501      	adds	r5, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	42ab      	cmp	r3, r5
 8007562:	dcf2      	bgt.n	800754a <_printf_i+0x21e>
 8007564:	e7eb      	b.n	800753e <_printf_i+0x212>
 8007566:	2500      	movs	r5, #0
 8007568:	f104 0619 	add.w	r6, r4, #25
 800756c:	e7f5      	b.n	800755a <_printf_i+0x22e>
 800756e:	bf00      	nop
 8007570:	0800c34a 	.word	0x0800c34a
 8007574:	0800c35b 	.word	0x0800c35b

08007578 <_scanf_float>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b087      	sub	sp, #28
 800757e:	4617      	mov	r7, r2
 8007580:	9303      	str	r3, [sp, #12]
 8007582:	688b      	ldr	r3, [r1, #8]
 8007584:	1e5a      	subs	r2, r3, #1
 8007586:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800758a:	bf83      	ittte	hi
 800758c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007590:	195b      	addhi	r3, r3, r5
 8007592:	9302      	strhi	r3, [sp, #8]
 8007594:	2300      	movls	r3, #0
 8007596:	bf86      	itte	hi
 8007598:	f240 135d 	movwhi	r3, #349	; 0x15d
 800759c:	608b      	strhi	r3, [r1, #8]
 800759e:	9302      	strls	r3, [sp, #8]
 80075a0:	680b      	ldr	r3, [r1, #0]
 80075a2:	468b      	mov	fp, r1
 80075a4:	2500      	movs	r5, #0
 80075a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80075ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075b2:	4680      	mov	r8, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	465e      	mov	r6, fp
 80075b8:	46aa      	mov	sl, r5
 80075ba:	46a9      	mov	r9, r5
 80075bc:	9501      	str	r5, [sp, #4]
 80075be:	68a2      	ldr	r2, [r4, #8]
 80075c0:	b152      	cbz	r2, 80075d8 <_scanf_float+0x60>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b4e      	cmp	r3, #78	; 0x4e
 80075c8:	d864      	bhi.n	8007694 <_scanf_float+0x11c>
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d83c      	bhi.n	8007648 <_scanf_float+0xd0>
 80075ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80075d2:	b2c8      	uxtb	r0, r1
 80075d4:	280e      	cmp	r0, #14
 80075d6:	d93a      	bls.n	800764e <_scanf_float+0xd6>
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	d003      	beq.n	80075e6 <_scanf_float+0x6e>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ea:	f1ba 0f01 	cmp.w	sl, #1
 80075ee:	f200 8113 	bhi.w	8007818 <_scanf_float+0x2a0>
 80075f2:	455e      	cmp	r6, fp
 80075f4:	f200 8105 	bhi.w	8007802 <_scanf_float+0x28a>
 80075f8:	2501      	movs	r5, #1
 80075fa:	4628      	mov	r0, r5
 80075fc:	b007      	add	sp, #28
 80075fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007602:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007606:	2a0d      	cmp	r2, #13
 8007608:	d8e6      	bhi.n	80075d8 <_scanf_float+0x60>
 800760a:	a101      	add	r1, pc, #4	; (adr r1, 8007610 <_scanf_float+0x98>)
 800760c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007610:	0800774f 	.word	0x0800774f
 8007614:	080075d9 	.word	0x080075d9
 8007618:	080075d9 	.word	0x080075d9
 800761c:	080075d9 	.word	0x080075d9
 8007620:	080077af 	.word	0x080077af
 8007624:	08007787 	.word	0x08007787
 8007628:	080075d9 	.word	0x080075d9
 800762c:	080075d9 	.word	0x080075d9
 8007630:	0800775d 	.word	0x0800775d
 8007634:	080075d9 	.word	0x080075d9
 8007638:	080075d9 	.word	0x080075d9
 800763c:	080075d9 	.word	0x080075d9
 8007640:	080075d9 	.word	0x080075d9
 8007644:	08007715 	.word	0x08007715
 8007648:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800764c:	e7db      	b.n	8007606 <_scanf_float+0x8e>
 800764e:	290e      	cmp	r1, #14
 8007650:	d8c2      	bhi.n	80075d8 <_scanf_float+0x60>
 8007652:	a001      	add	r0, pc, #4	; (adr r0, 8007658 <_scanf_float+0xe0>)
 8007654:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007658:	08007707 	.word	0x08007707
 800765c:	080075d9 	.word	0x080075d9
 8007660:	08007707 	.word	0x08007707
 8007664:	0800779b 	.word	0x0800779b
 8007668:	080075d9 	.word	0x080075d9
 800766c:	080076b5 	.word	0x080076b5
 8007670:	080076f1 	.word	0x080076f1
 8007674:	080076f1 	.word	0x080076f1
 8007678:	080076f1 	.word	0x080076f1
 800767c:	080076f1 	.word	0x080076f1
 8007680:	080076f1 	.word	0x080076f1
 8007684:	080076f1 	.word	0x080076f1
 8007688:	080076f1 	.word	0x080076f1
 800768c:	080076f1 	.word	0x080076f1
 8007690:	080076f1 	.word	0x080076f1
 8007694:	2b6e      	cmp	r3, #110	; 0x6e
 8007696:	d809      	bhi.n	80076ac <_scanf_float+0x134>
 8007698:	2b60      	cmp	r3, #96	; 0x60
 800769a:	d8b2      	bhi.n	8007602 <_scanf_float+0x8a>
 800769c:	2b54      	cmp	r3, #84	; 0x54
 800769e:	d077      	beq.n	8007790 <_scanf_float+0x218>
 80076a0:	2b59      	cmp	r3, #89	; 0x59
 80076a2:	d199      	bne.n	80075d8 <_scanf_float+0x60>
 80076a4:	2d07      	cmp	r5, #7
 80076a6:	d197      	bne.n	80075d8 <_scanf_float+0x60>
 80076a8:	2508      	movs	r5, #8
 80076aa:	e029      	b.n	8007700 <_scanf_float+0x188>
 80076ac:	2b74      	cmp	r3, #116	; 0x74
 80076ae:	d06f      	beq.n	8007790 <_scanf_float+0x218>
 80076b0:	2b79      	cmp	r3, #121	; 0x79
 80076b2:	e7f6      	b.n	80076a2 <_scanf_float+0x12a>
 80076b4:	6821      	ldr	r1, [r4, #0]
 80076b6:	05c8      	lsls	r0, r1, #23
 80076b8:	d51a      	bpl.n	80076f0 <_scanf_float+0x178>
 80076ba:	9b02      	ldr	r3, [sp, #8]
 80076bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076c0:	6021      	str	r1, [r4, #0]
 80076c2:	f109 0901 	add.w	r9, r9, #1
 80076c6:	b11b      	cbz	r3, 80076d0 <_scanf_float+0x158>
 80076c8:	3b01      	subs	r3, #1
 80076ca:	3201      	adds	r2, #1
 80076cc:	9302      	str	r3, [sp, #8]
 80076ce:	60a2      	str	r2, [r4, #8]
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	3301      	adds	r3, #1
 80076da:	6123      	str	r3, [r4, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3b01      	subs	r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	607b      	str	r3, [r7, #4]
 80076e4:	f340 8084 	ble.w	80077f0 <_scanf_float+0x278>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	3301      	adds	r3, #1
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	e766      	b.n	80075be <_scanf_float+0x46>
 80076f0:	eb1a 0f05 	cmn.w	sl, r5
 80076f4:	f47f af70 	bne.w	80075d8 <_scanf_float+0x60>
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80076fe:	6022      	str	r2, [r4, #0]
 8007700:	f806 3b01 	strb.w	r3, [r6], #1
 8007704:	e7e4      	b.n	80076d0 <_scanf_float+0x158>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	0610      	lsls	r0, r2, #24
 800770a:	f57f af65 	bpl.w	80075d8 <_scanf_float+0x60>
 800770e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007712:	e7f4      	b.n	80076fe <_scanf_float+0x186>
 8007714:	f1ba 0f00 	cmp.w	sl, #0
 8007718:	d10e      	bne.n	8007738 <_scanf_float+0x1c0>
 800771a:	f1b9 0f00 	cmp.w	r9, #0
 800771e:	d10e      	bne.n	800773e <_scanf_float+0x1c6>
 8007720:	6822      	ldr	r2, [r4, #0]
 8007722:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007726:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800772a:	d108      	bne.n	800773e <_scanf_float+0x1c6>
 800772c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007730:	6022      	str	r2, [r4, #0]
 8007732:	f04f 0a01 	mov.w	sl, #1
 8007736:	e7e3      	b.n	8007700 <_scanf_float+0x188>
 8007738:	f1ba 0f02 	cmp.w	sl, #2
 800773c:	d055      	beq.n	80077ea <_scanf_float+0x272>
 800773e:	2d01      	cmp	r5, #1
 8007740:	d002      	beq.n	8007748 <_scanf_float+0x1d0>
 8007742:	2d04      	cmp	r5, #4
 8007744:	f47f af48 	bne.w	80075d8 <_scanf_float+0x60>
 8007748:	3501      	adds	r5, #1
 800774a:	b2ed      	uxtb	r5, r5
 800774c:	e7d8      	b.n	8007700 <_scanf_float+0x188>
 800774e:	f1ba 0f01 	cmp.w	sl, #1
 8007752:	f47f af41 	bne.w	80075d8 <_scanf_float+0x60>
 8007756:	f04f 0a02 	mov.w	sl, #2
 800775a:	e7d1      	b.n	8007700 <_scanf_float+0x188>
 800775c:	b97d      	cbnz	r5, 800777e <_scanf_float+0x206>
 800775e:	f1b9 0f00 	cmp.w	r9, #0
 8007762:	f47f af3c 	bne.w	80075de <_scanf_float+0x66>
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800776c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007770:	f47f af39 	bne.w	80075e6 <_scanf_float+0x6e>
 8007774:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007778:	6022      	str	r2, [r4, #0]
 800777a:	2501      	movs	r5, #1
 800777c:	e7c0      	b.n	8007700 <_scanf_float+0x188>
 800777e:	2d03      	cmp	r5, #3
 8007780:	d0e2      	beq.n	8007748 <_scanf_float+0x1d0>
 8007782:	2d05      	cmp	r5, #5
 8007784:	e7de      	b.n	8007744 <_scanf_float+0x1cc>
 8007786:	2d02      	cmp	r5, #2
 8007788:	f47f af26 	bne.w	80075d8 <_scanf_float+0x60>
 800778c:	2503      	movs	r5, #3
 800778e:	e7b7      	b.n	8007700 <_scanf_float+0x188>
 8007790:	2d06      	cmp	r5, #6
 8007792:	f47f af21 	bne.w	80075d8 <_scanf_float+0x60>
 8007796:	2507      	movs	r5, #7
 8007798:	e7b2      	b.n	8007700 <_scanf_float+0x188>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	0591      	lsls	r1, r2, #22
 800779e:	f57f af1b 	bpl.w	80075d8 <_scanf_float+0x60>
 80077a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077a6:	6022      	str	r2, [r4, #0]
 80077a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80077ac:	e7a8      	b.n	8007700 <_scanf_float+0x188>
 80077ae:	6822      	ldr	r2, [r4, #0]
 80077b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077b8:	d006      	beq.n	80077c8 <_scanf_float+0x250>
 80077ba:	0550      	lsls	r0, r2, #21
 80077bc:	f57f af0c 	bpl.w	80075d8 <_scanf_float+0x60>
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	f43f af0f 	beq.w	80075e6 <_scanf_float+0x6e>
 80077c8:	0591      	lsls	r1, r2, #22
 80077ca:	bf58      	it	pl
 80077cc:	9901      	ldrpl	r1, [sp, #4]
 80077ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077d2:	bf58      	it	pl
 80077d4:	eba9 0101 	subpl.w	r1, r9, r1
 80077d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80077dc:	bf58      	it	pl
 80077de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80077e2:	6022      	str	r2, [r4, #0]
 80077e4:	f04f 0900 	mov.w	r9, #0
 80077e8:	e78a      	b.n	8007700 <_scanf_float+0x188>
 80077ea:	f04f 0a03 	mov.w	sl, #3
 80077ee:	e787      	b.n	8007700 <_scanf_float+0x188>
 80077f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077f4:	4639      	mov	r1, r7
 80077f6:	4640      	mov	r0, r8
 80077f8:	4798      	blx	r3
 80077fa:	2800      	cmp	r0, #0
 80077fc:	f43f aedf 	beq.w	80075be <_scanf_float+0x46>
 8007800:	e6ea      	b.n	80075d8 <_scanf_float+0x60>
 8007802:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007806:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800780a:	463a      	mov	r2, r7
 800780c:	4640      	mov	r0, r8
 800780e:	4798      	blx	r3
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	3b01      	subs	r3, #1
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	e6ec      	b.n	80075f2 <_scanf_float+0x7a>
 8007818:	1e6b      	subs	r3, r5, #1
 800781a:	2b06      	cmp	r3, #6
 800781c:	d825      	bhi.n	800786a <_scanf_float+0x2f2>
 800781e:	2d02      	cmp	r5, #2
 8007820:	d836      	bhi.n	8007890 <_scanf_float+0x318>
 8007822:	455e      	cmp	r6, fp
 8007824:	f67f aee8 	bls.w	80075f8 <_scanf_float+0x80>
 8007828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800782c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007830:	463a      	mov	r2, r7
 8007832:	4640      	mov	r0, r8
 8007834:	4798      	blx	r3
 8007836:	6923      	ldr	r3, [r4, #16]
 8007838:	3b01      	subs	r3, #1
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	e7f1      	b.n	8007822 <_scanf_float+0x2aa>
 800783e:	9802      	ldr	r0, [sp, #8]
 8007840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007844:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007848:	9002      	str	r0, [sp, #8]
 800784a:	463a      	mov	r2, r7
 800784c:	4640      	mov	r0, r8
 800784e:	4798      	blx	r3
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	3b01      	subs	r3, #1
 8007854:	6123      	str	r3, [r4, #16]
 8007856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800785a:	fa5f fa8a 	uxtb.w	sl, sl
 800785e:	f1ba 0f02 	cmp.w	sl, #2
 8007862:	d1ec      	bne.n	800783e <_scanf_float+0x2c6>
 8007864:	3d03      	subs	r5, #3
 8007866:	b2ed      	uxtb	r5, r5
 8007868:	1b76      	subs	r6, r6, r5
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	05da      	lsls	r2, r3, #23
 800786e:	d52f      	bpl.n	80078d0 <_scanf_float+0x358>
 8007870:	055b      	lsls	r3, r3, #21
 8007872:	d510      	bpl.n	8007896 <_scanf_float+0x31e>
 8007874:	455e      	cmp	r6, fp
 8007876:	f67f aebf 	bls.w	80075f8 <_scanf_float+0x80>
 800787a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800787e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007882:	463a      	mov	r2, r7
 8007884:	4640      	mov	r0, r8
 8007886:	4798      	blx	r3
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	3b01      	subs	r3, #1
 800788c:	6123      	str	r3, [r4, #16]
 800788e:	e7f1      	b.n	8007874 <_scanf_float+0x2fc>
 8007890:	46aa      	mov	sl, r5
 8007892:	9602      	str	r6, [sp, #8]
 8007894:	e7df      	b.n	8007856 <_scanf_float+0x2de>
 8007896:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800789a:	6923      	ldr	r3, [r4, #16]
 800789c:	2965      	cmp	r1, #101	; 0x65
 800789e:	f103 33ff 	add.w	r3, r3, #4294967295
 80078a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	d00c      	beq.n	80078c4 <_scanf_float+0x34c>
 80078aa:	2945      	cmp	r1, #69	; 0x45
 80078ac:	d00a      	beq.n	80078c4 <_scanf_float+0x34c>
 80078ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078b2:	463a      	mov	r2, r7
 80078b4:	4640      	mov	r0, r8
 80078b6:	4798      	blx	r3
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078be:	3b01      	subs	r3, #1
 80078c0:	1eb5      	subs	r5, r6, #2
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078c8:	463a      	mov	r2, r7
 80078ca:	4640      	mov	r0, r8
 80078cc:	4798      	blx	r3
 80078ce:	462e      	mov	r6, r5
 80078d0:	6825      	ldr	r5, [r4, #0]
 80078d2:	f015 0510 	ands.w	r5, r5, #16
 80078d6:	d159      	bne.n	800798c <_scanf_float+0x414>
 80078d8:	7035      	strb	r5, [r6, #0]
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d11b      	bne.n	800791e <_scanf_float+0x3a6>
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	454b      	cmp	r3, r9
 80078ea:	eba3 0209 	sub.w	r2, r3, r9
 80078ee:	d123      	bne.n	8007938 <_scanf_float+0x3c0>
 80078f0:	2200      	movs	r2, #0
 80078f2:	4659      	mov	r1, fp
 80078f4:	4640      	mov	r0, r8
 80078f6:	f000 fe99 	bl	800862c <_strtod_r>
 80078fa:	6822      	ldr	r2, [r4, #0]
 80078fc:	9b03      	ldr	r3, [sp, #12]
 80078fe:	f012 0f02 	tst.w	r2, #2
 8007902:	ec57 6b10 	vmov	r6, r7, d0
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	d021      	beq.n	800794e <_scanf_float+0x3d6>
 800790a:	9903      	ldr	r1, [sp, #12]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	600a      	str	r2, [r1, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	e9c3 6700 	strd	r6, r7, [r3]
 8007916:	68e3      	ldr	r3, [r4, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60e3      	str	r3, [r4, #12]
 800791c:	e66d      	b.n	80075fa <_scanf_float+0x82>
 800791e:	9b04      	ldr	r3, [sp, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0e5      	beq.n	80078f0 <_scanf_float+0x378>
 8007924:	9905      	ldr	r1, [sp, #20]
 8007926:	230a      	movs	r3, #10
 8007928:	462a      	mov	r2, r5
 800792a:	3101      	adds	r1, #1
 800792c:	4640      	mov	r0, r8
 800792e:	f000 ff05 	bl	800873c <_strtol_r>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	9e05      	ldr	r6, [sp, #20]
 8007936:	1ac2      	subs	r2, r0, r3
 8007938:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800793c:	429e      	cmp	r6, r3
 800793e:	bf28      	it	cs
 8007940:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007944:	4912      	ldr	r1, [pc, #72]	; (8007990 <_scanf_float+0x418>)
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f82c 	bl	80079a4 <siprintf>
 800794c:	e7d0      	b.n	80078f0 <_scanf_float+0x378>
 800794e:	9903      	ldr	r1, [sp, #12]
 8007950:	f012 0f04 	tst.w	r2, #4
 8007954:	f103 0204 	add.w	r2, r3, #4
 8007958:	600a      	str	r2, [r1, #0]
 800795a:	d1d9      	bne.n	8007910 <_scanf_float+0x398>
 800795c:	f8d3 8000 	ldr.w	r8, [r3]
 8007960:	ee10 2a10 	vmov	r2, s0
 8007964:	ee10 0a10 	vmov	r0, s0
 8007968:	463b      	mov	r3, r7
 800796a:	4639      	mov	r1, r7
 800796c:	f7f9 f8e6 	bl	8000b3c <__aeabi_dcmpun>
 8007970:	b128      	cbz	r0, 800797e <_scanf_float+0x406>
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <_scanf_float+0x41c>)
 8007974:	f000 f810 	bl	8007998 <nanf>
 8007978:	ed88 0a00 	vstr	s0, [r8]
 800797c:	e7cb      	b.n	8007916 <_scanf_float+0x39e>
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	f7f9 f939 	bl	8000bf8 <__aeabi_d2f>
 8007986:	f8c8 0000 	str.w	r0, [r8]
 800798a:	e7c4      	b.n	8007916 <_scanf_float+0x39e>
 800798c:	2500      	movs	r5, #0
 800798e:	e634      	b.n	80075fa <_scanf_float+0x82>
 8007990:	0800c36c 	.word	0x0800c36c
 8007994:	0800c778 	.word	0x0800c778

08007998 <nanf>:
 8007998:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079a0 <nanf+0x8>
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	7fc00000 	.word	0x7fc00000

080079a4 <siprintf>:
 80079a4:	b40e      	push	{r1, r2, r3}
 80079a6:	b500      	push	{lr}
 80079a8:	b09c      	sub	sp, #112	; 0x70
 80079aa:	ab1d      	add	r3, sp, #116	; 0x74
 80079ac:	9002      	str	r0, [sp, #8]
 80079ae:	9006      	str	r0, [sp, #24]
 80079b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079b4:	4809      	ldr	r0, [pc, #36]	; (80079dc <siprintf+0x38>)
 80079b6:	9107      	str	r1, [sp, #28]
 80079b8:	9104      	str	r1, [sp, #16]
 80079ba:	4909      	ldr	r1, [pc, #36]	; (80079e0 <siprintf+0x3c>)
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	a902      	add	r1, sp, #8
 80079c8:	f002 fee4 	bl	800a794 <_svfiprintf_r>
 80079cc:	9b02      	ldr	r3, [sp, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	b01c      	add	sp, #112	; 0x70
 80079d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	2000002c 	.word	0x2000002c
 80079e0:	ffff0208 	.word	0xffff0208

080079e4 <sulp>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	4604      	mov	r4, r0
 80079e8:	460d      	mov	r5, r1
 80079ea:	ec45 4b10 	vmov	d0, r4, r5
 80079ee:	4616      	mov	r6, r2
 80079f0:	f002 fc2e 	bl	800a250 <__ulp>
 80079f4:	ec51 0b10 	vmov	r0, r1, d0
 80079f8:	b17e      	cbz	r6, 8007a1a <sulp+0x36>
 80079fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80079fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd09      	ble.n	8007a1a <sulp+0x36>
 8007a06:	051b      	lsls	r3, r3, #20
 8007a08:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a0c:	2400      	movs	r4, #0
 8007a0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	0000      	movs	r0, r0
	...

08007a20 <_strtod_l>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	ed2d 8b02 	vpush	{d8}
 8007a28:	b09d      	sub	sp, #116	; 0x74
 8007a2a:	461f      	mov	r7, r3
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9318      	str	r3, [sp, #96]	; 0x60
 8007a30:	4ba2      	ldr	r3, [pc, #648]	; (8007cbc <_strtod_l+0x29c>)
 8007a32:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	9305      	str	r3, [sp, #20]
 8007a38:	4604      	mov	r4, r0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	4688      	mov	r8, r1
 8007a3e:	f7f8 fbcf 	bl	80001e0 <strlen>
 8007a42:	f04f 0a00 	mov.w	sl, #0
 8007a46:	4605      	mov	r5, r0
 8007a48:	f04f 0b00 	mov.w	fp, #0
 8007a4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a52:	781a      	ldrb	r2, [r3, #0]
 8007a54:	2a2b      	cmp	r2, #43	; 0x2b
 8007a56:	d04e      	beq.n	8007af6 <_strtod_l+0xd6>
 8007a58:	d83b      	bhi.n	8007ad2 <_strtod_l+0xb2>
 8007a5a:	2a0d      	cmp	r2, #13
 8007a5c:	d834      	bhi.n	8007ac8 <_strtod_l+0xa8>
 8007a5e:	2a08      	cmp	r2, #8
 8007a60:	d834      	bhi.n	8007acc <_strtod_l+0xac>
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d03e      	beq.n	8007ae4 <_strtod_l+0xc4>
 8007a66:	2300      	movs	r3, #0
 8007a68:	930a      	str	r3, [sp, #40]	; 0x28
 8007a6a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a6c:	7833      	ldrb	r3, [r6, #0]
 8007a6e:	2b30      	cmp	r3, #48	; 0x30
 8007a70:	f040 80b0 	bne.w	8007bd4 <_strtod_l+0x1b4>
 8007a74:	7873      	ldrb	r3, [r6, #1]
 8007a76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a7a:	2b58      	cmp	r3, #88	; 0x58
 8007a7c:	d168      	bne.n	8007b50 <_strtod_l+0x130>
 8007a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	ab18      	add	r3, sp, #96	; 0x60
 8007a84:	9702      	str	r7, [sp, #8]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	4a8d      	ldr	r2, [pc, #564]	; (8007cc0 <_strtod_l+0x2a0>)
 8007a8a:	ab19      	add	r3, sp, #100	; 0x64
 8007a8c:	a917      	add	r1, sp, #92	; 0x5c
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f001 fd38 	bl	8009504 <__gethex>
 8007a94:	f010 0707 	ands.w	r7, r0, #7
 8007a98:	4605      	mov	r5, r0
 8007a9a:	d005      	beq.n	8007aa8 <_strtod_l+0x88>
 8007a9c:	2f06      	cmp	r7, #6
 8007a9e:	d12c      	bne.n	8007afa <_strtod_l+0xda>
 8007aa0:	3601      	adds	r6, #1
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9617      	str	r6, [sp, #92]	; 0x5c
 8007aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 8590 	bne.w	80085d0 <_strtod_l+0xbb0>
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab2:	b1eb      	cbz	r3, 8007af0 <_strtod_l+0xd0>
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007aba:	ec43 2b10 	vmov	d0, r2, r3
 8007abe:	b01d      	add	sp, #116	; 0x74
 8007ac0:	ecbd 8b02 	vpop	{d8}
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	2a20      	cmp	r2, #32
 8007aca:	d1cc      	bne.n	8007a66 <_strtod_l+0x46>
 8007acc:	3301      	adds	r3, #1
 8007ace:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ad0:	e7be      	b.n	8007a50 <_strtod_l+0x30>
 8007ad2:	2a2d      	cmp	r2, #45	; 0x2d
 8007ad4:	d1c7      	bne.n	8007a66 <_strtod_l+0x46>
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1c2      	bne.n	8007a6a <_strtod_l+0x4a>
 8007ae4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ae6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 856e 	bne.w	80085cc <_strtod_l+0xbac>
 8007af0:	4652      	mov	r2, sl
 8007af2:	465b      	mov	r3, fp
 8007af4:	e7e1      	b.n	8007aba <_strtod_l+0x9a>
 8007af6:	2200      	movs	r2, #0
 8007af8:	e7ee      	b.n	8007ad8 <_strtod_l+0xb8>
 8007afa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007afc:	b13a      	cbz	r2, 8007b0e <_strtod_l+0xee>
 8007afe:	2135      	movs	r1, #53	; 0x35
 8007b00:	a81a      	add	r0, sp, #104	; 0x68
 8007b02:	f002 fcb0 	bl	800a466 <__copybits>
 8007b06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f002 f86f 	bl	8009bec <_Bfree>
 8007b0e:	3f01      	subs	r7, #1
 8007b10:	2f04      	cmp	r7, #4
 8007b12:	d806      	bhi.n	8007b22 <_strtod_l+0x102>
 8007b14:	e8df f007 	tbb	[pc, r7]
 8007b18:	1714030a 	.word	0x1714030a
 8007b1c:	0a          	.byte	0x0a
 8007b1d:	00          	.byte	0x00
 8007b1e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b22:	0728      	lsls	r0, r5, #28
 8007b24:	d5c0      	bpl.n	8007aa8 <_strtod_l+0x88>
 8007b26:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b2a:	e7bd      	b.n	8007aa8 <_strtod_l+0x88>
 8007b2c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b3a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b3e:	e7f0      	b.n	8007b22 <_strtod_l+0x102>
 8007b40:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007cc4 <_strtod_l+0x2a4>
 8007b44:	e7ed      	b.n	8007b22 <_strtod_l+0x102>
 8007b46:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b4a:	f04f 3aff 	mov.w	sl, #4294967295
 8007b4e:	e7e8      	b.n	8007b22 <_strtod_l+0x102>
 8007b50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b52:	1c5a      	adds	r2, r3, #1
 8007b54:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	2b30      	cmp	r3, #48	; 0x30
 8007b5a:	d0f9      	beq.n	8007b50 <_strtod_l+0x130>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0a3      	beq.n	8007aa8 <_strtod_l+0x88>
 8007b60:	2301      	movs	r3, #1
 8007b62:	f04f 0900 	mov.w	r9, #0
 8007b66:	9304      	str	r3, [sp, #16]
 8007b68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b6a:	9308      	str	r3, [sp, #32]
 8007b6c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b70:	464f      	mov	r7, r9
 8007b72:	220a      	movs	r2, #10
 8007b74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b76:	7806      	ldrb	r6, [r0, #0]
 8007b78:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b7c:	b2d9      	uxtb	r1, r3
 8007b7e:	2909      	cmp	r1, #9
 8007b80:	d92a      	bls.n	8007bd8 <_strtod_l+0x1b8>
 8007b82:	9905      	ldr	r1, [sp, #20]
 8007b84:	462a      	mov	r2, r5
 8007b86:	f002 ff1f 	bl	800a9c8 <strncmp>
 8007b8a:	b398      	cbz	r0, 8007bf4 <_strtod_l+0x1d4>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	4632      	mov	r2, r6
 8007b90:	463d      	mov	r5, r7
 8007b92:	9005      	str	r0, [sp, #20]
 8007b94:	4603      	mov	r3, r0
 8007b96:	2a65      	cmp	r2, #101	; 0x65
 8007b98:	d001      	beq.n	8007b9e <_strtod_l+0x17e>
 8007b9a:	2a45      	cmp	r2, #69	; 0x45
 8007b9c:	d118      	bne.n	8007bd0 <_strtod_l+0x1b0>
 8007b9e:	b91d      	cbnz	r5, 8007ba8 <_strtod_l+0x188>
 8007ba0:	9a04      	ldr	r2, [sp, #16]
 8007ba2:	4302      	orrs	r2, r0
 8007ba4:	d09e      	beq.n	8007ae4 <_strtod_l+0xc4>
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007bac:	f108 0201 	add.w	r2, r8, #1
 8007bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bb2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007bb6:	2a2b      	cmp	r2, #43	; 0x2b
 8007bb8:	d075      	beq.n	8007ca6 <_strtod_l+0x286>
 8007bba:	2a2d      	cmp	r2, #45	; 0x2d
 8007bbc:	d07b      	beq.n	8007cb6 <_strtod_l+0x296>
 8007bbe:	f04f 0c00 	mov.w	ip, #0
 8007bc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bc6:	2909      	cmp	r1, #9
 8007bc8:	f240 8082 	bls.w	8007cd0 <_strtod_l+0x2b0>
 8007bcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	e09d      	b.n	8007d10 <_strtod_l+0x2f0>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e7c4      	b.n	8007b62 <_strtod_l+0x142>
 8007bd8:	2f08      	cmp	r7, #8
 8007bda:	bfd8      	it	le
 8007bdc:	9907      	ldrle	r1, [sp, #28]
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	bfda      	itte	le
 8007be4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007be8:	9307      	strle	r3, [sp, #28]
 8007bea:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bee:	3701      	adds	r7, #1
 8007bf0:	9017      	str	r0, [sp, #92]	; 0x5c
 8007bf2:	e7bf      	b.n	8007b74 <_strtod_l+0x154>
 8007bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bf6:	195a      	adds	r2, r3, r5
 8007bf8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bfa:	5d5a      	ldrb	r2, [r3, r5]
 8007bfc:	2f00      	cmp	r7, #0
 8007bfe:	d037      	beq.n	8007c70 <_strtod_l+0x250>
 8007c00:	9005      	str	r0, [sp, #20]
 8007c02:	463d      	mov	r5, r7
 8007c04:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c08:	2b09      	cmp	r3, #9
 8007c0a:	d912      	bls.n	8007c32 <_strtod_l+0x212>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e7c2      	b.n	8007b96 <_strtod_l+0x176>
 8007c10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c16:	785a      	ldrb	r2, [r3, #1]
 8007c18:	3001      	adds	r0, #1
 8007c1a:	2a30      	cmp	r2, #48	; 0x30
 8007c1c:	d0f8      	beq.n	8007c10 <_strtod_l+0x1f0>
 8007c1e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	f200 84d9 	bhi.w	80085da <_strtod_l+0xbba>
 8007c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c2a:	9005      	str	r0, [sp, #20]
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	9308      	str	r3, [sp, #32]
 8007c30:	4605      	mov	r5, r0
 8007c32:	3a30      	subs	r2, #48	; 0x30
 8007c34:	f100 0301 	add.w	r3, r0, #1
 8007c38:	d014      	beq.n	8007c64 <_strtod_l+0x244>
 8007c3a:	9905      	ldr	r1, [sp, #20]
 8007c3c:	4419      	add	r1, r3
 8007c3e:	9105      	str	r1, [sp, #20]
 8007c40:	462b      	mov	r3, r5
 8007c42:	eb00 0e05 	add.w	lr, r0, r5
 8007c46:	210a      	movs	r1, #10
 8007c48:	4573      	cmp	r3, lr
 8007c4a:	d113      	bne.n	8007c74 <_strtod_l+0x254>
 8007c4c:	182b      	adds	r3, r5, r0
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	f105 0501 	add.w	r5, r5, #1
 8007c54:	4405      	add	r5, r0
 8007c56:	dc1c      	bgt.n	8007c92 <_strtod_l+0x272>
 8007c58:	9907      	ldr	r1, [sp, #28]
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	fb03 2301 	mla	r3, r3, r1, r2
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c66:	1c51      	adds	r1, r2, #1
 8007c68:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c6a:	7852      	ldrb	r2, [r2, #1]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	e7c9      	b.n	8007c04 <_strtod_l+0x1e4>
 8007c70:	4638      	mov	r0, r7
 8007c72:	e7d2      	b.n	8007c1a <_strtod_l+0x1fa>
 8007c74:	2b08      	cmp	r3, #8
 8007c76:	dc04      	bgt.n	8007c82 <_strtod_l+0x262>
 8007c78:	9e07      	ldr	r6, [sp, #28]
 8007c7a:	434e      	muls	r6, r1
 8007c7c:	9607      	str	r6, [sp, #28]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7e2      	b.n	8007c48 <_strtod_l+0x228>
 8007c82:	f103 0c01 	add.w	ip, r3, #1
 8007c86:	f1bc 0f10 	cmp.w	ip, #16
 8007c8a:	bfd8      	it	le
 8007c8c:	fb01 f909 	mulle.w	r9, r1, r9
 8007c90:	e7f5      	b.n	8007c7e <_strtod_l+0x25e>
 8007c92:	2d10      	cmp	r5, #16
 8007c94:	bfdc      	itt	le
 8007c96:	230a      	movle	r3, #10
 8007c98:	fb03 2909 	mlale	r9, r3, r9, r2
 8007c9c:	e7e1      	b.n	8007c62 <_strtod_l+0x242>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e77c      	b.n	8007ba0 <_strtod_l+0x180>
 8007ca6:	f04f 0c00 	mov.w	ip, #0
 8007caa:	f108 0202 	add.w	r2, r8, #2
 8007cae:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cb0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007cb4:	e785      	b.n	8007bc2 <_strtod_l+0x1a2>
 8007cb6:	f04f 0c01 	mov.w	ip, #1
 8007cba:	e7f6      	b.n	8007caa <_strtod_l+0x28a>
 8007cbc:	0800c5c0 	.word	0x0800c5c0
 8007cc0:	0800c374 	.word	0x0800c374
 8007cc4:	7ff00000 	.word	0x7ff00000
 8007cc8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cca:	1c51      	adds	r1, r2, #1
 8007ccc:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cce:	7852      	ldrb	r2, [r2, #1]
 8007cd0:	2a30      	cmp	r2, #48	; 0x30
 8007cd2:	d0f9      	beq.n	8007cc8 <_strtod_l+0x2a8>
 8007cd4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cd8:	2908      	cmp	r1, #8
 8007cda:	f63f af79 	bhi.w	8007bd0 <_strtod_l+0x1b0>
 8007cde:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007ce2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ce4:	9206      	str	r2, [sp, #24]
 8007ce6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ce8:	1c51      	adds	r1, r2, #1
 8007cea:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cec:	7852      	ldrb	r2, [r2, #1]
 8007cee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007cf2:	2e09      	cmp	r6, #9
 8007cf4:	d937      	bls.n	8007d66 <_strtod_l+0x346>
 8007cf6:	9e06      	ldr	r6, [sp, #24]
 8007cf8:	1b89      	subs	r1, r1, r6
 8007cfa:	2908      	cmp	r1, #8
 8007cfc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d00:	dc02      	bgt.n	8007d08 <_strtod_l+0x2e8>
 8007d02:	4576      	cmp	r6, lr
 8007d04:	bfa8      	it	ge
 8007d06:	4676      	movge	r6, lr
 8007d08:	f1bc 0f00 	cmp.w	ip, #0
 8007d0c:	d000      	beq.n	8007d10 <_strtod_l+0x2f0>
 8007d0e:	4276      	negs	r6, r6
 8007d10:	2d00      	cmp	r5, #0
 8007d12:	d14d      	bne.n	8007db0 <_strtod_l+0x390>
 8007d14:	9904      	ldr	r1, [sp, #16]
 8007d16:	4301      	orrs	r1, r0
 8007d18:	f47f aec6 	bne.w	8007aa8 <_strtod_l+0x88>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f aee1 	bne.w	8007ae4 <_strtod_l+0xc4>
 8007d22:	2a69      	cmp	r2, #105	; 0x69
 8007d24:	d027      	beq.n	8007d76 <_strtod_l+0x356>
 8007d26:	dc24      	bgt.n	8007d72 <_strtod_l+0x352>
 8007d28:	2a49      	cmp	r2, #73	; 0x49
 8007d2a:	d024      	beq.n	8007d76 <_strtod_l+0x356>
 8007d2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d2e:	f47f aed9 	bne.w	8007ae4 <_strtod_l+0xc4>
 8007d32:	499f      	ldr	r1, [pc, #636]	; (8007fb0 <_strtod_l+0x590>)
 8007d34:	a817      	add	r0, sp, #92	; 0x5c
 8007d36:	f001 fe3d 	bl	80099b4 <__match>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aed2 	beq.w	8007ae4 <_strtod_l+0xc4>
 8007d40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b28      	cmp	r3, #40	; 0x28
 8007d46:	d12d      	bne.n	8007da4 <_strtod_l+0x384>
 8007d48:	499a      	ldr	r1, [pc, #616]	; (8007fb4 <_strtod_l+0x594>)
 8007d4a:	aa1a      	add	r2, sp, #104	; 0x68
 8007d4c:	a817      	add	r0, sp, #92	; 0x5c
 8007d4e:	f001 fe45 	bl	80099dc <__hexnan>
 8007d52:	2805      	cmp	r0, #5
 8007d54:	d126      	bne.n	8007da4 <_strtod_l+0x384>
 8007d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d64:	e6a0      	b.n	8007aa8 <_strtod_l+0x88>
 8007d66:	210a      	movs	r1, #10
 8007d68:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d70:	e7b9      	b.n	8007ce6 <_strtod_l+0x2c6>
 8007d72:	2a6e      	cmp	r2, #110	; 0x6e
 8007d74:	e7db      	b.n	8007d2e <_strtod_l+0x30e>
 8007d76:	4990      	ldr	r1, [pc, #576]	; (8007fb8 <_strtod_l+0x598>)
 8007d78:	a817      	add	r0, sp, #92	; 0x5c
 8007d7a:	f001 fe1b 	bl	80099b4 <__match>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f aeb0 	beq.w	8007ae4 <_strtod_l+0xc4>
 8007d84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d86:	498d      	ldr	r1, [pc, #564]	; (8007fbc <_strtod_l+0x59c>)
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	a817      	add	r0, sp, #92	; 0x5c
 8007d8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d8e:	f001 fe11 	bl	80099b4 <__match>
 8007d92:	b910      	cbnz	r0, 8007d9a <_strtod_l+0x37a>
 8007d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d96:	3301      	adds	r3, #1
 8007d98:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fcc <_strtod_l+0x5ac>
 8007d9e:	f04f 0a00 	mov.w	sl, #0
 8007da2:	e681      	b.n	8007aa8 <_strtod_l+0x88>
 8007da4:	4886      	ldr	r0, [pc, #536]	; (8007fc0 <_strtod_l+0x5a0>)
 8007da6:	f002 fdf7 	bl	800a998 <nan>
 8007daa:	ec5b ab10 	vmov	sl, fp, d0
 8007dae:	e67b      	b.n	8007aa8 <_strtod_l+0x88>
 8007db0:	9b05      	ldr	r3, [sp, #20]
 8007db2:	9807      	ldr	r0, [sp, #28]
 8007db4:	1af3      	subs	r3, r6, r3
 8007db6:	2f00      	cmp	r7, #0
 8007db8:	bf08      	it	eq
 8007dba:	462f      	moveq	r7, r5
 8007dbc:	2d10      	cmp	r5, #16
 8007dbe:	9306      	str	r3, [sp, #24]
 8007dc0:	46a8      	mov	r8, r5
 8007dc2:	bfa8      	it	ge
 8007dc4:	f04f 0810 	movge.w	r8, #16
 8007dc8:	f7f8 fba4 	bl	8000514 <__aeabi_ui2d>
 8007dcc:	2d09      	cmp	r5, #9
 8007dce:	4682      	mov	sl, r0
 8007dd0:	468b      	mov	fp, r1
 8007dd2:	dd13      	ble.n	8007dfc <_strtod_l+0x3dc>
 8007dd4:	4b7b      	ldr	r3, [pc, #492]	; (8007fc4 <_strtod_l+0x5a4>)
 8007dd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dda:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	4682      	mov	sl, r0
 8007de4:	4648      	mov	r0, r9
 8007de6:	468b      	mov	fp, r1
 8007de8:	f7f8 fb94 	bl	8000514 <__aeabi_ui2d>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4650      	mov	r0, sl
 8007df2:	4659      	mov	r1, fp
 8007df4:	f7f8 fa52 	bl	800029c <__adddf3>
 8007df8:	4682      	mov	sl, r0
 8007dfa:	468b      	mov	fp, r1
 8007dfc:	2d0f      	cmp	r5, #15
 8007dfe:	dc38      	bgt.n	8007e72 <_strtod_l+0x452>
 8007e00:	9b06      	ldr	r3, [sp, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f43f ae50 	beq.w	8007aa8 <_strtod_l+0x88>
 8007e08:	dd24      	ble.n	8007e54 <_strtod_l+0x434>
 8007e0a:	2b16      	cmp	r3, #22
 8007e0c:	dc0b      	bgt.n	8007e26 <_strtod_l+0x406>
 8007e0e:	496d      	ldr	r1, [pc, #436]	; (8007fc4 <_strtod_l+0x5a4>)
 8007e10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e18:	4652      	mov	r2, sl
 8007e1a:	465b      	mov	r3, fp
 8007e1c:	f7f8 fbf4 	bl	8000608 <__aeabi_dmul>
 8007e20:	4682      	mov	sl, r0
 8007e22:	468b      	mov	fp, r1
 8007e24:	e640      	b.n	8007aa8 <_strtod_l+0x88>
 8007e26:	9a06      	ldr	r2, [sp, #24]
 8007e28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	db20      	blt.n	8007e72 <_strtod_l+0x452>
 8007e30:	4c64      	ldr	r4, [pc, #400]	; (8007fc4 <_strtod_l+0x5a4>)
 8007e32:	f1c5 050f 	rsb	r5, r5, #15
 8007e36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e3a:	4652      	mov	r2, sl
 8007e3c:	465b      	mov	r3, fp
 8007e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e42:	f7f8 fbe1 	bl	8000608 <__aeabi_dmul>
 8007e46:	9b06      	ldr	r3, [sp, #24]
 8007e48:	1b5d      	subs	r5, r3, r5
 8007e4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e52:	e7e3      	b.n	8007e1c <_strtod_l+0x3fc>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	3316      	adds	r3, #22
 8007e58:	db0b      	blt.n	8007e72 <_strtod_l+0x452>
 8007e5a:	9b05      	ldr	r3, [sp, #20]
 8007e5c:	1b9e      	subs	r6, r3, r6
 8007e5e:	4b59      	ldr	r3, [pc, #356]	; (8007fc4 <_strtod_l+0x5a4>)
 8007e60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e68:	4650      	mov	r0, sl
 8007e6a:	4659      	mov	r1, fp
 8007e6c:	f7f8 fcf6 	bl	800085c <__aeabi_ddiv>
 8007e70:	e7d6      	b.n	8007e20 <_strtod_l+0x400>
 8007e72:	9b06      	ldr	r3, [sp, #24]
 8007e74:	eba5 0808 	sub.w	r8, r5, r8
 8007e78:	4498      	add	r8, r3
 8007e7a:	f1b8 0f00 	cmp.w	r8, #0
 8007e7e:	dd74      	ble.n	8007f6a <_strtod_l+0x54a>
 8007e80:	f018 030f 	ands.w	r3, r8, #15
 8007e84:	d00a      	beq.n	8007e9c <_strtod_l+0x47c>
 8007e86:	494f      	ldr	r1, [pc, #316]	; (8007fc4 <_strtod_l+0x5a4>)
 8007e88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	465b      	mov	r3, fp
 8007e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	4682      	mov	sl, r0
 8007e9a:	468b      	mov	fp, r1
 8007e9c:	f038 080f 	bics.w	r8, r8, #15
 8007ea0:	d04f      	beq.n	8007f42 <_strtod_l+0x522>
 8007ea2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007ea6:	dd22      	ble.n	8007eee <_strtod_l+0x4ce>
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	462e      	mov	r6, r5
 8007eac:	9507      	str	r5, [sp, #28]
 8007eae:	9505      	str	r5, [sp, #20]
 8007eb0:	2322      	movs	r3, #34	; 0x22
 8007eb2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fcc <_strtod_l+0x5ac>
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	f04f 0a00 	mov.w	sl, #0
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f43f adf2 	beq.w	8007aa8 <_strtod_l+0x88>
 8007ec4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f001 fe90 	bl	8009bec <_Bfree>
 8007ecc:	9905      	ldr	r1, [sp, #20]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f001 fe8c 	bl	8009bec <_Bfree>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f001 fe88 	bl	8009bec <_Bfree>
 8007edc:	9907      	ldr	r1, [sp, #28]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f001 fe84 	bl	8009bec <_Bfree>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f001 fe80 	bl	8009bec <_Bfree>
 8007eec:	e5dc      	b.n	8007aa8 <_strtod_l+0x88>
 8007eee:	4b36      	ldr	r3, [pc, #216]	; (8007fc8 <_strtod_l+0x5a8>)
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007ef8:	4650      	mov	r0, sl
 8007efa:	4659      	mov	r1, fp
 8007efc:	4699      	mov	r9, r3
 8007efe:	f1b8 0f01 	cmp.w	r8, #1
 8007f02:	dc21      	bgt.n	8007f48 <_strtod_l+0x528>
 8007f04:	b10b      	cbz	r3, 8007f0a <_strtod_l+0x4ea>
 8007f06:	4682      	mov	sl, r0
 8007f08:	468b      	mov	fp, r1
 8007f0a:	4b2f      	ldr	r3, [pc, #188]	; (8007fc8 <_strtod_l+0x5a8>)
 8007f0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f14:	4652      	mov	r2, sl
 8007f16:	465b      	mov	r3, fp
 8007f18:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <_strtod_l+0x5ac>)
 8007f22:	460a      	mov	r2, r1
 8007f24:	400b      	ands	r3, r1
 8007f26:	492a      	ldr	r1, [pc, #168]	; (8007fd0 <_strtod_l+0x5b0>)
 8007f28:	428b      	cmp	r3, r1
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	d8bc      	bhi.n	8007ea8 <_strtod_l+0x488>
 8007f2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f32:	428b      	cmp	r3, r1
 8007f34:	bf86      	itte	hi
 8007f36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fd4 <_strtod_l+0x5b4>
 8007f3a:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f42:	2300      	movs	r3, #0
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	e084      	b.n	8008052 <_strtod_l+0x632>
 8007f48:	f018 0f01 	tst.w	r8, #1
 8007f4c:	d005      	beq.n	8007f5a <_strtod_l+0x53a>
 8007f4e:	9b04      	ldr	r3, [sp, #16]
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 fb58 	bl	8000608 <__aeabi_dmul>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	9a04      	ldr	r2, [sp, #16]
 8007f5c:	3208      	adds	r2, #8
 8007f5e:	f109 0901 	add.w	r9, r9, #1
 8007f62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f66:	9204      	str	r2, [sp, #16]
 8007f68:	e7c9      	b.n	8007efe <_strtod_l+0x4de>
 8007f6a:	d0ea      	beq.n	8007f42 <_strtod_l+0x522>
 8007f6c:	f1c8 0800 	rsb	r8, r8, #0
 8007f70:	f018 020f 	ands.w	r2, r8, #15
 8007f74:	d00a      	beq.n	8007f8c <_strtod_l+0x56c>
 8007f76:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <_strtod_l+0x5a4>)
 8007f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f7c:	4650      	mov	r0, sl
 8007f7e:	4659      	mov	r1, fp
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 fc6a 	bl	800085c <__aeabi_ddiv>
 8007f88:	4682      	mov	sl, r0
 8007f8a:	468b      	mov	fp, r1
 8007f8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f90:	d0d7      	beq.n	8007f42 <_strtod_l+0x522>
 8007f92:	f1b8 0f1f 	cmp.w	r8, #31
 8007f96:	dd1f      	ble.n	8007fd8 <_strtod_l+0x5b8>
 8007f98:	2500      	movs	r5, #0
 8007f9a:	462e      	mov	r6, r5
 8007f9c:	9507      	str	r5, [sp, #28]
 8007f9e:	9505      	str	r5, [sp, #20]
 8007fa0:	2322      	movs	r3, #34	; 0x22
 8007fa2:	f04f 0a00 	mov.w	sl, #0
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	e786      	b.n	8007ebc <_strtod_l+0x49c>
 8007fae:	bf00      	nop
 8007fb0:	0800c345 	.word	0x0800c345
 8007fb4:	0800c388 	.word	0x0800c388
 8007fb8:	0800c33d 	.word	0x0800c33d
 8007fbc:	0800c4cc 	.word	0x0800c4cc
 8007fc0:	0800c778 	.word	0x0800c778
 8007fc4:	0800c658 	.word	0x0800c658
 8007fc8:	0800c630 	.word	0x0800c630
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	7ca00000 	.word	0x7ca00000
 8007fd4:	7fefffff 	.word	0x7fefffff
 8007fd8:	f018 0310 	ands.w	r3, r8, #16
 8007fdc:	bf18      	it	ne
 8007fde:	236a      	movne	r3, #106	; 0x6a
 8007fe0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008390 <_strtod_l+0x970>
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	4659      	mov	r1, fp
 8007fea:	2300      	movs	r3, #0
 8007fec:	f018 0f01 	tst.w	r8, #1
 8007ff0:	d004      	beq.n	8007ffc <_strtod_l+0x5dc>
 8007ff2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ff6:	f7f8 fb07 	bl	8000608 <__aeabi_dmul>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008000:	f109 0908 	add.w	r9, r9, #8
 8008004:	d1f2      	bne.n	8007fec <_strtod_l+0x5cc>
 8008006:	b10b      	cbz	r3, 800800c <_strtod_l+0x5ec>
 8008008:	4682      	mov	sl, r0
 800800a:	468b      	mov	fp, r1
 800800c:	9b04      	ldr	r3, [sp, #16]
 800800e:	b1c3      	cbz	r3, 8008042 <_strtod_l+0x622>
 8008010:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008014:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008018:	2b00      	cmp	r3, #0
 800801a:	4659      	mov	r1, fp
 800801c:	dd11      	ble.n	8008042 <_strtod_l+0x622>
 800801e:	2b1f      	cmp	r3, #31
 8008020:	f340 8124 	ble.w	800826c <_strtod_l+0x84c>
 8008024:	2b34      	cmp	r3, #52	; 0x34
 8008026:	bfde      	ittt	le
 8008028:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800802c:	f04f 33ff 	movle.w	r3, #4294967295
 8008030:	fa03 f202 	lslle.w	r2, r3, r2
 8008034:	f04f 0a00 	mov.w	sl, #0
 8008038:	bfcc      	ite	gt
 800803a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800803e:	ea02 0b01 	andle.w	fp, r2, r1
 8008042:	2200      	movs	r2, #0
 8008044:	2300      	movs	r3, #0
 8008046:	4650      	mov	r0, sl
 8008048:	4659      	mov	r1, fp
 800804a:	f7f8 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800804e:	2800      	cmp	r0, #0
 8008050:	d1a2      	bne.n	8007f98 <_strtod_l+0x578>
 8008052:	9b07      	ldr	r3, [sp, #28]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	9908      	ldr	r1, [sp, #32]
 8008058:	462b      	mov	r3, r5
 800805a:	463a      	mov	r2, r7
 800805c:	4620      	mov	r0, r4
 800805e:	f001 fe2d 	bl	8009cbc <__s2b>
 8008062:	9007      	str	r0, [sp, #28]
 8008064:	2800      	cmp	r0, #0
 8008066:	f43f af1f 	beq.w	8007ea8 <_strtod_l+0x488>
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	1b9e      	subs	r6, r3, r6
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfb4      	ite	lt
 8008074:	4633      	movlt	r3, r6
 8008076:	2300      	movge	r3, #0
 8008078:	930c      	str	r3, [sp, #48]	; 0x30
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	2500      	movs	r5, #0
 800807e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008082:	9312      	str	r3, [sp, #72]	; 0x48
 8008084:	462e      	mov	r6, r5
 8008086:	9b07      	ldr	r3, [sp, #28]
 8008088:	4620      	mov	r0, r4
 800808a:	6859      	ldr	r1, [r3, #4]
 800808c:	f001 fd6e 	bl	8009b6c <_Balloc>
 8008090:	9005      	str	r0, [sp, #20]
 8008092:	2800      	cmp	r0, #0
 8008094:	f43f af0c 	beq.w	8007eb0 <_strtod_l+0x490>
 8008098:	9b07      	ldr	r3, [sp, #28]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	3202      	adds	r2, #2
 800809e:	f103 010c 	add.w	r1, r3, #12
 80080a2:	0092      	lsls	r2, r2, #2
 80080a4:	300c      	adds	r0, #12
 80080a6:	f001 fd53 	bl	8009b50 <memcpy>
 80080aa:	ec4b ab10 	vmov	d0, sl, fp
 80080ae:	aa1a      	add	r2, sp, #104	; 0x68
 80080b0:	a919      	add	r1, sp, #100	; 0x64
 80080b2:	4620      	mov	r0, r4
 80080b4:	f002 f948 	bl	800a348 <__d2b>
 80080b8:	ec4b ab18 	vmov	d8, sl, fp
 80080bc:	9018      	str	r0, [sp, #96]	; 0x60
 80080be:	2800      	cmp	r0, #0
 80080c0:	f43f aef6 	beq.w	8007eb0 <_strtod_l+0x490>
 80080c4:	2101      	movs	r1, #1
 80080c6:	4620      	mov	r0, r4
 80080c8:	f001 fe92 	bl	8009df0 <__i2b>
 80080cc:	4606      	mov	r6, r0
 80080ce:	2800      	cmp	r0, #0
 80080d0:	f43f aeee 	beq.w	8007eb0 <_strtod_l+0x490>
 80080d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080d6:	9904      	ldr	r1, [sp, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	bfab      	itete	ge
 80080dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080e6:	bfac      	ite	ge
 80080e8:	eb03 0902 	addge.w	r9, r3, r2
 80080ec:	1ad7      	sublt	r7, r2, r3
 80080ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080f0:	eba3 0801 	sub.w	r8, r3, r1
 80080f4:	4490      	add	r8, r2
 80080f6:	4ba1      	ldr	r3, [pc, #644]	; (800837c <_strtod_l+0x95c>)
 80080f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80080fc:	4598      	cmp	r8, r3
 80080fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008102:	f280 80c7 	bge.w	8008294 <_strtod_l+0x874>
 8008106:	eba3 0308 	sub.w	r3, r3, r8
 800810a:	2b1f      	cmp	r3, #31
 800810c:	eba2 0203 	sub.w	r2, r2, r3
 8008110:	f04f 0101 	mov.w	r1, #1
 8008114:	f300 80b1 	bgt.w	800827a <_strtod_l+0x85a>
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	930d      	str	r3, [sp, #52]	; 0x34
 800811e:	2300      	movs	r3, #0
 8008120:	9308      	str	r3, [sp, #32]
 8008122:	eb09 0802 	add.w	r8, r9, r2
 8008126:	9b04      	ldr	r3, [sp, #16]
 8008128:	45c1      	cmp	r9, r8
 800812a:	4417      	add	r7, r2
 800812c:	441f      	add	r7, r3
 800812e:	464b      	mov	r3, r9
 8008130:	bfa8      	it	ge
 8008132:	4643      	movge	r3, r8
 8008134:	42bb      	cmp	r3, r7
 8008136:	bfa8      	it	ge
 8008138:	463b      	movge	r3, r7
 800813a:	2b00      	cmp	r3, #0
 800813c:	bfc2      	ittt	gt
 800813e:	eba8 0803 	subgt.w	r8, r8, r3
 8008142:	1aff      	subgt	r7, r7, r3
 8008144:	eba9 0903 	subgt.w	r9, r9, r3
 8008148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800814a:	2b00      	cmp	r3, #0
 800814c:	dd17      	ble.n	800817e <_strtod_l+0x75e>
 800814e:	4631      	mov	r1, r6
 8008150:	461a      	mov	r2, r3
 8008152:	4620      	mov	r0, r4
 8008154:	f001 ff0c 	bl	8009f70 <__pow5mult>
 8008158:	4606      	mov	r6, r0
 800815a:	2800      	cmp	r0, #0
 800815c:	f43f aea8 	beq.w	8007eb0 <_strtod_l+0x490>
 8008160:	4601      	mov	r1, r0
 8008162:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008164:	4620      	mov	r0, r4
 8008166:	f001 fe59 	bl	8009e1c <__multiply>
 800816a:	900b      	str	r0, [sp, #44]	; 0x2c
 800816c:	2800      	cmp	r0, #0
 800816e:	f43f ae9f 	beq.w	8007eb0 <_strtod_l+0x490>
 8008172:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008174:	4620      	mov	r0, r4
 8008176:	f001 fd39 	bl	8009bec <_Bfree>
 800817a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800817c:	9318      	str	r3, [sp, #96]	; 0x60
 800817e:	f1b8 0f00 	cmp.w	r8, #0
 8008182:	f300 808c 	bgt.w	800829e <_strtod_l+0x87e>
 8008186:	9b06      	ldr	r3, [sp, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	dd08      	ble.n	800819e <_strtod_l+0x77e>
 800818c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800818e:	9905      	ldr	r1, [sp, #20]
 8008190:	4620      	mov	r0, r4
 8008192:	f001 feed 	bl	8009f70 <__pow5mult>
 8008196:	9005      	str	r0, [sp, #20]
 8008198:	2800      	cmp	r0, #0
 800819a:	f43f ae89 	beq.w	8007eb0 <_strtod_l+0x490>
 800819e:	2f00      	cmp	r7, #0
 80081a0:	dd08      	ble.n	80081b4 <_strtod_l+0x794>
 80081a2:	9905      	ldr	r1, [sp, #20]
 80081a4:	463a      	mov	r2, r7
 80081a6:	4620      	mov	r0, r4
 80081a8:	f001 ff3c 	bl	800a024 <__lshift>
 80081ac:	9005      	str	r0, [sp, #20]
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f43f ae7e 	beq.w	8007eb0 <_strtod_l+0x490>
 80081b4:	f1b9 0f00 	cmp.w	r9, #0
 80081b8:	dd08      	ble.n	80081cc <_strtod_l+0x7ac>
 80081ba:	4631      	mov	r1, r6
 80081bc:	464a      	mov	r2, r9
 80081be:	4620      	mov	r0, r4
 80081c0:	f001 ff30 	bl	800a024 <__lshift>
 80081c4:	4606      	mov	r6, r0
 80081c6:	2800      	cmp	r0, #0
 80081c8:	f43f ae72 	beq.w	8007eb0 <_strtod_l+0x490>
 80081cc:	9a05      	ldr	r2, [sp, #20]
 80081ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081d0:	4620      	mov	r0, r4
 80081d2:	f001 ffb3 	bl	800a13c <__mdiff>
 80081d6:	4605      	mov	r5, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	f43f ae69 	beq.w	8007eb0 <_strtod_l+0x490>
 80081de:	68c3      	ldr	r3, [r0, #12]
 80081e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081e2:	2300      	movs	r3, #0
 80081e4:	60c3      	str	r3, [r0, #12]
 80081e6:	4631      	mov	r1, r6
 80081e8:	f001 ff8c 	bl	800a104 <__mcmp>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	da60      	bge.n	80082b2 <_strtod_l+0x892>
 80081f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f2:	ea53 030a 	orrs.w	r3, r3, sl
 80081f6:	f040 8082 	bne.w	80082fe <_strtod_l+0x8de>
 80081fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d17d      	bne.n	80082fe <_strtod_l+0x8de>
 8008202:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008206:	0d1b      	lsrs	r3, r3, #20
 8008208:	051b      	lsls	r3, r3, #20
 800820a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800820e:	d976      	bls.n	80082fe <_strtod_l+0x8de>
 8008210:	696b      	ldr	r3, [r5, #20]
 8008212:	b913      	cbnz	r3, 800821a <_strtod_l+0x7fa>
 8008214:	692b      	ldr	r3, [r5, #16]
 8008216:	2b01      	cmp	r3, #1
 8008218:	dd71      	ble.n	80082fe <_strtod_l+0x8de>
 800821a:	4629      	mov	r1, r5
 800821c:	2201      	movs	r2, #1
 800821e:	4620      	mov	r0, r4
 8008220:	f001 ff00 	bl	800a024 <__lshift>
 8008224:	4631      	mov	r1, r6
 8008226:	4605      	mov	r5, r0
 8008228:	f001 ff6c 	bl	800a104 <__mcmp>
 800822c:	2800      	cmp	r0, #0
 800822e:	dd66      	ble.n	80082fe <_strtod_l+0x8de>
 8008230:	9904      	ldr	r1, [sp, #16]
 8008232:	4a53      	ldr	r2, [pc, #332]	; (8008380 <_strtod_l+0x960>)
 8008234:	465b      	mov	r3, fp
 8008236:	2900      	cmp	r1, #0
 8008238:	f000 8081 	beq.w	800833e <_strtod_l+0x91e>
 800823c:	ea02 010b 	and.w	r1, r2, fp
 8008240:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008244:	dc7b      	bgt.n	800833e <_strtod_l+0x91e>
 8008246:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800824a:	f77f aea9 	ble.w	8007fa0 <_strtod_l+0x580>
 800824e:	4b4d      	ldr	r3, [pc, #308]	; (8008384 <_strtod_l+0x964>)
 8008250:	4650      	mov	r0, sl
 8008252:	4659      	mov	r1, fp
 8008254:	2200      	movs	r2, #0
 8008256:	f7f8 f9d7 	bl	8000608 <__aeabi_dmul>
 800825a:	460b      	mov	r3, r1
 800825c:	4303      	orrs	r3, r0
 800825e:	bf08      	it	eq
 8008260:	2322      	moveq	r3, #34	; 0x22
 8008262:	4682      	mov	sl, r0
 8008264:	468b      	mov	fp, r1
 8008266:	bf08      	it	eq
 8008268:	6023      	streq	r3, [r4, #0]
 800826a:	e62b      	b.n	8007ec4 <_strtod_l+0x4a4>
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	fa02 f303 	lsl.w	r3, r2, r3
 8008274:	ea03 0a0a 	and.w	sl, r3, sl
 8008278:	e6e3      	b.n	8008042 <_strtod_l+0x622>
 800827a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800827e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008282:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008286:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800828a:	fa01 f308 	lsl.w	r3, r1, r8
 800828e:	9308      	str	r3, [sp, #32]
 8008290:	910d      	str	r1, [sp, #52]	; 0x34
 8008292:	e746      	b.n	8008122 <_strtod_l+0x702>
 8008294:	2300      	movs	r3, #0
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	2301      	movs	r3, #1
 800829a:	930d      	str	r3, [sp, #52]	; 0x34
 800829c:	e741      	b.n	8008122 <_strtod_l+0x702>
 800829e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082a0:	4642      	mov	r2, r8
 80082a2:	4620      	mov	r0, r4
 80082a4:	f001 febe 	bl	800a024 <__lshift>
 80082a8:	9018      	str	r0, [sp, #96]	; 0x60
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f47f af6b 	bne.w	8008186 <_strtod_l+0x766>
 80082b0:	e5fe      	b.n	8007eb0 <_strtod_l+0x490>
 80082b2:	465f      	mov	r7, fp
 80082b4:	d16e      	bne.n	8008394 <_strtod_l+0x974>
 80082b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082bc:	b342      	cbz	r2, 8008310 <_strtod_l+0x8f0>
 80082be:	4a32      	ldr	r2, [pc, #200]	; (8008388 <_strtod_l+0x968>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d128      	bne.n	8008316 <_strtod_l+0x8f6>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	4651      	mov	r1, sl
 80082c8:	b1eb      	cbz	r3, 8008306 <_strtod_l+0x8e6>
 80082ca:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <_strtod_l+0x960>)
 80082cc:	403b      	ands	r3, r7
 80082ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082d2:	f04f 32ff 	mov.w	r2, #4294967295
 80082d6:	d819      	bhi.n	800830c <_strtod_l+0x8ec>
 80082d8:	0d1b      	lsrs	r3, r3, #20
 80082da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	4299      	cmp	r1, r3
 80082e4:	d117      	bne.n	8008316 <_strtod_l+0x8f6>
 80082e6:	4b29      	ldr	r3, [pc, #164]	; (800838c <_strtod_l+0x96c>)
 80082e8:	429f      	cmp	r7, r3
 80082ea:	d102      	bne.n	80082f2 <_strtod_l+0x8d2>
 80082ec:	3101      	adds	r1, #1
 80082ee:	f43f addf 	beq.w	8007eb0 <_strtod_l+0x490>
 80082f2:	4b23      	ldr	r3, [pc, #140]	; (8008380 <_strtod_l+0x960>)
 80082f4:	403b      	ands	r3, r7
 80082f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80082fa:	f04f 0a00 	mov.w	sl, #0
 80082fe:	9b04      	ldr	r3, [sp, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1a4      	bne.n	800824e <_strtod_l+0x82e>
 8008304:	e5de      	b.n	8007ec4 <_strtod_l+0x4a4>
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	e7ea      	b.n	80082e2 <_strtod_l+0x8c2>
 800830c:	4613      	mov	r3, r2
 800830e:	e7e8      	b.n	80082e2 <_strtod_l+0x8c2>
 8008310:	ea53 030a 	orrs.w	r3, r3, sl
 8008314:	d08c      	beq.n	8008230 <_strtod_l+0x810>
 8008316:	9b08      	ldr	r3, [sp, #32]
 8008318:	b1db      	cbz	r3, 8008352 <_strtod_l+0x932>
 800831a:	423b      	tst	r3, r7
 800831c:	d0ef      	beq.n	80082fe <_strtod_l+0x8de>
 800831e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008320:	9a04      	ldr	r2, [sp, #16]
 8008322:	4650      	mov	r0, sl
 8008324:	4659      	mov	r1, fp
 8008326:	b1c3      	cbz	r3, 800835a <_strtod_l+0x93a>
 8008328:	f7ff fb5c 	bl	80079e4 <sulp>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
 8008330:	ec51 0b18 	vmov	r0, r1, d8
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	4682      	mov	sl, r0
 800833a:	468b      	mov	fp, r1
 800833c:	e7df      	b.n	80082fe <_strtod_l+0x8de>
 800833e:	4013      	ands	r3, r2
 8008340:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008344:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008348:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800834c:	f04f 3aff 	mov.w	sl, #4294967295
 8008350:	e7d5      	b.n	80082fe <_strtod_l+0x8de>
 8008352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008354:	ea13 0f0a 	tst.w	r3, sl
 8008358:	e7e0      	b.n	800831c <_strtod_l+0x8fc>
 800835a:	f7ff fb43 	bl	80079e4 <sulp>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	ec51 0b18 	vmov	r0, r1, d8
 8008366:	f7f7 ff97 	bl	8000298 <__aeabi_dsub>
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	4682      	mov	sl, r0
 8008370:	468b      	mov	fp, r1
 8008372:	f7f8 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008376:	2800      	cmp	r0, #0
 8008378:	d0c1      	beq.n	80082fe <_strtod_l+0x8de>
 800837a:	e611      	b.n	8007fa0 <_strtod_l+0x580>
 800837c:	fffffc02 	.word	0xfffffc02
 8008380:	7ff00000 	.word	0x7ff00000
 8008384:	39500000 	.word	0x39500000
 8008388:	000fffff 	.word	0x000fffff
 800838c:	7fefffff 	.word	0x7fefffff
 8008390:	0800c3a0 	.word	0x0800c3a0
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	f002 f832 	bl	800a400 <__ratio>
 800839c:	ec59 8b10 	vmov	r8, r9, d0
 80083a0:	ee10 0a10 	vmov	r0, s0
 80083a4:	2200      	movs	r2, #0
 80083a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083aa:	4649      	mov	r1, r9
 80083ac:	f7f8 fba8 	bl	8000b00 <__aeabi_dcmple>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d07a      	beq.n	80084aa <_strtod_l+0xa8a>
 80083b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d04a      	beq.n	8008450 <_strtod_l+0xa30>
 80083ba:	4b95      	ldr	r3, [pc, #596]	; (8008610 <_strtod_l+0xbf0>)
 80083bc:	2200      	movs	r2, #0
 80083be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008610 <_strtod_l+0xbf0>
 80083c6:	f04f 0800 	mov.w	r8, #0
 80083ca:	4b92      	ldr	r3, [pc, #584]	; (8008614 <_strtod_l+0xbf4>)
 80083cc:	403b      	ands	r3, r7
 80083ce:	930d      	str	r3, [sp, #52]	; 0x34
 80083d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083d2:	4b91      	ldr	r3, [pc, #580]	; (8008618 <_strtod_l+0xbf8>)
 80083d4:	429a      	cmp	r2, r3
 80083d6:	f040 80b0 	bne.w	800853a <_strtod_l+0xb1a>
 80083da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083e2:	ec4b ab10 	vmov	d0, sl, fp
 80083e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083ea:	f001 ff31 	bl	800a250 <__ulp>
 80083ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083f2:	ec53 2b10 	vmov	r2, r3, d0
 80083f6:	f7f8 f907 	bl	8000608 <__aeabi_dmul>
 80083fa:	4652      	mov	r2, sl
 80083fc:	465b      	mov	r3, fp
 80083fe:	f7f7 ff4d 	bl	800029c <__adddf3>
 8008402:	460b      	mov	r3, r1
 8008404:	4983      	ldr	r1, [pc, #524]	; (8008614 <_strtod_l+0xbf4>)
 8008406:	4a85      	ldr	r2, [pc, #532]	; (800861c <_strtod_l+0xbfc>)
 8008408:	4019      	ands	r1, r3
 800840a:	4291      	cmp	r1, r2
 800840c:	4682      	mov	sl, r0
 800840e:	d960      	bls.n	80084d2 <_strtod_l+0xab2>
 8008410:	ee18 3a90 	vmov	r3, s17
 8008414:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008418:	4293      	cmp	r3, r2
 800841a:	d104      	bne.n	8008426 <_strtod_l+0xa06>
 800841c:	ee18 3a10 	vmov	r3, s16
 8008420:	3301      	adds	r3, #1
 8008422:	f43f ad45 	beq.w	8007eb0 <_strtod_l+0x490>
 8008426:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008628 <_strtod_l+0xc08>
 800842a:	f04f 3aff 	mov.w	sl, #4294967295
 800842e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008430:	4620      	mov	r0, r4
 8008432:	f001 fbdb 	bl	8009bec <_Bfree>
 8008436:	9905      	ldr	r1, [sp, #20]
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fbd7 	bl	8009bec <_Bfree>
 800843e:	4631      	mov	r1, r6
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fbd3 	bl	8009bec <_Bfree>
 8008446:	4629      	mov	r1, r5
 8008448:	4620      	mov	r0, r4
 800844a:	f001 fbcf 	bl	8009bec <_Bfree>
 800844e:	e61a      	b.n	8008086 <_strtod_l+0x666>
 8008450:	f1ba 0f00 	cmp.w	sl, #0
 8008454:	d11b      	bne.n	800848e <_strtod_l+0xa6e>
 8008456:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800845a:	b9f3      	cbnz	r3, 800849a <_strtod_l+0xa7a>
 800845c:	4b6c      	ldr	r3, [pc, #432]	; (8008610 <_strtod_l+0xbf0>)
 800845e:	2200      	movs	r2, #0
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	f7f8 fb42 	bl	8000aec <__aeabi_dcmplt>
 8008468:	b9d0      	cbnz	r0, 80084a0 <_strtod_l+0xa80>
 800846a:	4640      	mov	r0, r8
 800846c:	4649      	mov	r1, r9
 800846e:	4b6c      	ldr	r3, [pc, #432]	; (8008620 <_strtod_l+0xc00>)
 8008470:	2200      	movs	r2, #0
 8008472:	f7f8 f8c9 	bl	8000608 <__aeabi_dmul>
 8008476:	4680      	mov	r8, r0
 8008478:	4689      	mov	r9, r1
 800847a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800847e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008482:	9315      	str	r3, [sp, #84]	; 0x54
 8008484:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800848c:	e79d      	b.n	80083ca <_strtod_l+0x9aa>
 800848e:	f1ba 0f01 	cmp.w	sl, #1
 8008492:	d102      	bne.n	800849a <_strtod_l+0xa7a>
 8008494:	2f00      	cmp	r7, #0
 8008496:	f43f ad83 	beq.w	8007fa0 <_strtod_l+0x580>
 800849a:	4b62      	ldr	r3, [pc, #392]	; (8008624 <_strtod_l+0xc04>)
 800849c:	2200      	movs	r2, #0
 800849e:	e78e      	b.n	80083be <_strtod_l+0x99e>
 80084a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008620 <_strtod_l+0xc00>
 80084a4:	f04f 0800 	mov.w	r8, #0
 80084a8:	e7e7      	b.n	800847a <_strtod_l+0xa5a>
 80084aa:	4b5d      	ldr	r3, [pc, #372]	; (8008620 <_strtod_l+0xc00>)
 80084ac:	4640      	mov	r0, r8
 80084ae:	4649      	mov	r1, r9
 80084b0:	2200      	movs	r2, #0
 80084b2:	f7f8 f8a9 	bl	8000608 <__aeabi_dmul>
 80084b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b8:	4680      	mov	r8, r0
 80084ba:	4689      	mov	r9, r1
 80084bc:	b933      	cbnz	r3, 80084cc <_strtod_l+0xaac>
 80084be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084c2:	900e      	str	r0, [sp, #56]	; 0x38
 80084c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80084c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084ca:	e7dd      	b.n	8008488 <_strtod_l+0xa68>
 80084cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084d0:	e7f9      	b.n	80084c6 <_strtod_l+0xaa6>
 80084d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1a8      	bne.n	800842e <_strtod_l+0xa0e>
 80084dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e2:	0d1b      	lsrs	r3, r3, #20
 80084e4:	051b      	lsls	r3, r3, #20
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d1a1      	bne.n	800842e <_strtod_l+0xa0e>
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	f7f8 fbeb 	bl	8000cc8 <__aeabi_d2lz>
 80084f2:	f7f8 f85b 	bl	80005ac <__aeabi_l2d>
 80084f6:	4602      	mov	r2, r0
 80084f8:	460b      	mov	r3, r1
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f7 fecb 	bl	8000298 <__aeabi_dsub>
 8008502:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008508:	ea43 030a 	orr.w	r3, r3, sl
 800850c:	4313      	orrs	r3, r2
 800850e:	4680      	mov	r8, r0
 8008510:	4689      	mov	r9, r1
 8008512:	d055      	beq.n	80085c0 <_strtod_l+0xba0>
 8008514:	a336      	add	r3, pc, #216	; (adr r3, 80085f0 <_strtod_l+0xbd0>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f7f8 fae7 	bl	8000aec <__aeabi_dcmplt>
 800851e:	2800      	cmp	r0, #0
 8008520:	f47f acd0 	bne.w	8007ec4 <_strtod_l+0x4a4>
 8008524:	a334      	add	r3, pc, #208	; (adr r3, 80085f8 <_strtod_l+0xbd8>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	f7f8 fafb 	bl	8000b28 <__aeabi_dcmpgt>
 8008532:	2800      	cmp	r0, #0
 8008534:	f43f af7b 	beq.w	800842e <_strtod_l+0xa0e>
 8008538:	e4c4      	b.n	8007ec4 <_strtod_l+0x4a4>
 800853a:	9b04      	ldr	r3, [sp, #16]
 800853c:	b333      	cbz	r3, 800858c <_strtod_l+0xb6c>
 800853e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008540:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008544:	d822      	bhi.n	800858c <_strtod_l+0xb6c>
 8008546:	a32e      	add	r3, pc, #184	; (adr r3, 8008600 <_strtod_l+0xbe0>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 fad6 	bl	8000b00 <__aeabi_dcmple>
 8008554:	b1a0      	cbz	r0, 8008580 <_strtod_l+0xb60>
 8008556:	4649      	mov	r1, r9
 8008558:	4640      	mov	r0, r8
 800855a:	f7f8 fb2d 	bl	8000bb8 <__aeabi_d2uiz>
 800855e:	2801      	cmp	r0, #1
 8008560:	bf38      	it	cc
 8008562:	2001      	movcc	r0, #1
 8008564:	f7f7 ffd6 	bl	8000514 <__aeabi_ui2d>
 8008568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856a:	4680      	mov	r8, r0
 800856c:	4689      	mov	r9, r1
 800856e:	bb23      	cbnz	r3, 80085ba <_strtod_l+0xb9a>
 8008570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008574:	9010      	str	r0, [sp, #64]	; 0x40
 8008576:	9311      	str	r3, [sp, #68]	; 0x44
 8008578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800857c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008584:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008588:	1a9b      	subs	r3, r3, r2
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008590:	eeb0 0a48 	vmov.f32	s0, s16
 8008594:	eef0 0a68 	vmov.f32	s1, s17
 8008598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800859c:	f001 fe58 	bl	800a250 <__ulp>
 80085a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085a4:	ec53 2b10 	vmov	r2, r3, d0
 80085a8:	f7f8 f82e 	bl	8000608 <__aeabi_dmul>
 80085ac:	ec53 2b18 	vmov	r2, r3, d8
 80085b0:	f7f7 fe74 	bl	800029c <__adddf3>
 80085b4:	4682      	mov	sl, r0
 80085b6:	468b      	mov	fp, r1
 80085b8:	e78d      	b.n	80084d6 <_strtod_l+0xab6>
 80085ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80085be:	e7db      	b.n	8008578 <_strtod_l+0xb58>
 80085c0:	a311      	add	r3, pc, #68	; (adr r3, 8008608 <_strtod_l+0xbe8>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f8 fa91 	bl	8000aec <__aeabi_dcmplt>
 80085ca:	e7b2      	b.n	8008532 <_strtod_l+0xb12>
 80085cc:	2300      	movs	r3, #0
 80085ce:	930a      	str	r3, [sp, #40]	; 0x28
 80085d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	f7ff ba6b 	b.w	8007ab0 <_strtod_l+0x90>
 80085da:	2a65      	cmp	r2, #101	; 0x65
 80085dc:	f43f ab5f 	beq.w	8007c9e <_strtod_l+0x27e>
 80085e0:	2a45      	cmp	r2, #69	; 0x45
 80085e2:	f43f ab5c 	beq.w	8007c9e <_strtod_l+0x27e>
 80085e6:	2301      	movs	r3, #1
 80085e8:	f7ff bb94 	b.w	8007d14 <_strtod_l+0x2f4>
 80085ec:	f3af 8000 	nop.w
 80085f0:	94a03595 	.word	0x94a03595
 80085f4:	3fdfffff 	.word	0x3fdfffff
 80085f8:	35afe535 	.word	0x35afe535
 80085fc:	3fe00000 	.word	0x3fe00000
 8008600:	ffc00000 	.word	0xffc00000
 8008604:	41dfffff 	.word	0x41dfffff
 8008608:	94a03595 	.word	0x94a03595
 800860c:	3fcfffff 	.word	0x3fcfffff
 8008610:	3ff00000 	.word	0x3ff00000
 8008614:	7ff00000 	.word	0x7ff00000
 8008618:	7fe00000 	.word	0x7fe00000
 800861c:	7c9fffff 	.word	0x7c9fffff
 8008620:	3fe00000 	.word	0x3fe00000
 8008624:	bff00000 	.word	0xbff00000
 8008628:	7fefffff 	.word	0x7fefffff

0800862c <_strtod_r>:
 800862c:	4b01      	ldr	r3, [pc, #4]	; (8008634 <_strtod_r+0x8>)
 800862e:	f7ff b9f7 	b.w	8007a20 <_strtod_l>
 8008632:	bf00      	nop
 8008634:	20000094 	.word	0x20000094

08008638 <_strtol_l.constprop.0>:
 8008638:	2b01      	cmp	r3, #1
 800863a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863e:	d001      	beq.n	8008644 <_strtol_l.constprop.0+0xc>
 8008640:	2b24      	cmp	r3, #36	; 0x24
 8008642:	d906      	bls.n	8008652 <_strtol_l.constprop.0+0x1a>
 8008644:	f7fe fafc 	bl	8006c40 <__errno>
 8008648:	2316      	movs	r3, #22
 800864a:	6003      	str	r3, [r0, #0]
 800864c:	2000      	movs	r0, #0
 800864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008652:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008738 <_strtol_l.constprop.0+0x100>
 8008656:	460d      	mov	r5, r1
 8008658:	462e      	mov	r6, r5
 800865a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800865e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008662:	f017 0708 	ands.w	r7, r7, #8
 8008666:	d1f7      	bne.n	8008658 <_strtol_l.constprop.0+0x20>
 8008668:	2c2d      	cmp	r4, #45	; 0x2d
 800866a:	d132      	bne.n	80086d2 <_strtol_l.constprop.0+0x9a>
 800866c:	782c      	ldrb	r4, [r5, #0]
 800866e:	2701      	movs	r7, #1
 8008670:	1cb5      	adds	r5, r6, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d05b      	beq.n	800872e <_strtol_l.constprop.0+0xf6>
 8008676:	2b10      	cmp	r3, #16
 8008678:	d109      	bne.n	800868e <_strtol_l.constprop.0+0x56>
 800867a:	2c30      	cmp	r4, #48	; 0x30
 800867c:	d107      	bne.n	800868e <_strtol_l.constprop.0+0x56>
 800867e:	782c      	ldrb	r4, [r5, #0]
 8008680:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008684:	2c58      	cmp	r4, #88	; 0x58
 8008686:	d14d      	bne.n	8008724 <_strtol_l.constprop.0+0xec>
 8008688:	786c      	ldrb	r4, [r5, #1]
 800868a:	2310      	movs	r3, #16
 800868c:	3502      	adds	r5, #2
 800868e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008692:	f108 38ff 	add.w	r8, r8, #4294967295
 8008696:	f04f 0c00 	mov.w	ip, #0
 800869a:	fbb8 f9f3 	udiv	r9, r8, r3
 800869e:	4666      	mov	r6, ip
 80086a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80086a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086a8:	f1be 0f09 	cmp.w	lr, #9
 80086ac:	d816      	bhi.n	80086dc <_strtol_l.constprop.0+0xa4>
 80086ae:	4674      	mov	r4, lr
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	dd24      	ble.n	80086fe <_strtol_l.constprop.0+0xc6>
 80086b4:	f1bc 0f00 	cmp.w	ip, #0
 80086b8:	db1e      	blt.n	80086f8 <_strtol_l.constprop.0+0xc0>
 80086ba:	45b1      	cmp	r9, r6
 80086bc:	d31c      	bcc.n	80086f8 <_strtol_l.constprop.0+0xc0>
 80086be:	d101      	bne.n	80086c4 <_strtol_l.constprop.0+0x8c>
 80086c0:	45a2      	cmp	sl, r4
 80086c2:	db19      	blt.n	80086f8 <_strtol_l.constprop.0+0xc0>
 80086c4:	fb06 4603 	mla	r6, r6, r3, r4
 80086c8:	f04f 0c01 	mov.w	ip, #1
 80086cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086d0:	e7e8      	b.n	80086a4 <_strtol_l.constprop.0+0x6c>
 80086d2:	2c2b      	cmp	r4, #43	; 0x2b
 80086d4:	bf04      	itt	eq
 80086d6:	782c      	ldrbeq	r4, [r5, #0]
 80086d8:	1cb5      	addeq	r5, r6, #2
 80086da:	e7ca      	b.n	8008672 <_strtol_l.constprop.0+0x3a>
 80086dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086e0:	f1be 0f19 	cmp.w	lr, #25
 80086e4:	d801      	bhi.n	80086ea <_strtol_l.constprop.0+0xb2>
 80086e6:	3c37      	subs	r4, #55	; 0x37
 80086e8:	e7e2      	b.n	80086b0 <_strtol_l.constprop.0+0x78>
 80086ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086ee:	f1be 0f19 	cmp.w	lr, #25
 80086f2:	d804      	bhi.n	80086fe <_strtol_l.constprop.0+0xc6>
 80086f4:	3c57      	subs	r4, #87	; 0x57
 80086f6:	e7db      	b.n	80086b0 <_strtol_l.constprop.0+0x78>
 80086f8:	f04f 3cff 	mov.w	ip, #4294967295
 80086fc:	e7e6      	b.n	80086cc <_strtol_l.constprop.0+0x94>
 80086fe:	f1bc 0f00 	cmp.w	ip, #0
 8008702:	da05      	bge.n	8008710 <_strtol_l.constprop.0+0xd8>
 8008704:	2322      	movs	r3, #34	; 0x22
 8008706:	6003      	str	r3, [r0, #0]
 8008708:	4646      	mov	r6, r8
 800870a:	b942      	cbnz	r2, 800871e <_strtol_l.constprop.0+0xe6>
 800870c:	4630      	mov	r0, r6
 800870e:	e79e      	b.n	800864e <_strtol_l.constprop.0+0x16>
 8008710:	b107      	cbz	r7, 8008714 <_strtol_l.constprop.0+0xdc>
 8008712:	4276      	negs	r6, r6
 8008714:	2a00      	cmp	r2, #0
 8008716:	d0f9      	beq.n	800870c <_strtol_l.constprop.0+0xd4>
 8008718:	f1bc 0f00 	cmp.w	ip, #0
 800871c:	d000      	beq.n	8008720 <_strtol_l.constprop.0+0xe8>
 800871e:	1e69      	subs	r1, r5, #1
 8008720:	6011      	str	r1, [r2, #0]
 8008722:	e7f3      	b.n	800870c <_strtol_l.constprop.0+0xd4>
 8008724:	2430      	movs	r4, #48	; 0x30
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1b1      	bne.n	800868e <_strtol_l.constprop.0+0x56>
 800872a:	2308      	movs	r3, #8
 800872c:	e7af      	b.n	800868e <_strtol_l.constprop.0+0x56>
 800872e:	2c30      	cmp	r4, #48	; 0x30
 8008730:	d0a5      	beq.n	800867e <_strtol_l.constprop.0+0x46>
 8008732:	230a      	movs	r3, #10
 8008734:	e7ab      	b.n	800868e <_strtol_l.constprop.0+0x56>
 8008736:	bf00      	nop
 8008738:	0800c3c9 	.word	0x0800c3c9

0800873c <_strtol_r>:
 800873c:	f7ff bf7c 	b.w	8008638 <_strtol_l.constprop.0>

08008740 <quorem>:
 8008740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	6903      	ldr	r3, [r0, #16]
 8008746:	690c      	ldr	r4, [r1, #16]
 8008748:	42a3      	cmp	r3, r4
 800874a:	4607      	mov	r7, r0
 800874c:	f2c0 8081 	blt.w	8008852 <quorem+0x112>
 8008750:	3c01      	subs	r4, #1
 8008752:	f101 0814 	add.w	r8, r1, #20
 8008756:	f100 0514 	add.w	r5, r0, #20
 800875a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008768:	3301      	adds	r3, #1
 800876a:	429a      	cmp	r2, r3
 800876c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008770:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008774:	fbb2 f6f3 	udiv	r6, r2, r3
 8008778:	d331      	bcc.n	80087de <quorem+0x9e>
 800877a:	f04f 0e00 	mov.w	lr, #0
 800877e:	4640      	mov	r0, r8
 8008780:	46ac      	mov	ip, r5
 8008782:	46f2      	mov	sl, lr
 8008784:	f850 2b04 	ldr.w	r2, [r0], #4
 8008788:	b293      	uxth	r3, r2
 800878a:	fb06 e303 	mla	r3, r6, r3, lr
 800878e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008792:	b29b      	uxth	r3, r3
 8008794:	ebaa 0303 	sub.w	r3, sl, r3
 8008798:	f8dc a000 	ldr.w	sl, [ip]
 800879c:	0c12      	lsrs	r2, r2, #16
 800879e:	fa13 f38a 	uxtah	r3, r3, sl
 80087a2:	fb06 e202 	mla	r2, r6, r2, lr
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	9b00      	ldr	r3, [sp, #0]
 80087aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087ae:	b292      	uxth	r2, r2
 80087b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80087b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087b8:	f8bd 3000 	ldrh.w	r3, [sp]
 80087bc:	4581      	cmp	r9, r0
 80087be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087c2:	f84c 3b04 	str.w	r3, [ip], #4
 80087c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80087ca:	d2db      	bcs.n	8008784 <quorem+0x44>
 80087cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80087d0:	b92b      	cbnz	r3, 80087de <quorem+0x9e>
 80087d2:	9b01      	ldr	r3, [sp, #4]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	429d      	cmp	r5, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	d32e      	bcc.n	800883a <quorem+0xfa>
 80087dc:	613c      	str	r4, [r7, #16]
 80087de:	4638      	mov	r0, r7
 80087e0:	f001 fc90 	bl	800a104 <__mcmp>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	db24      	blt.n	8008832 <quorem+0xf2>
 80087e8:	3601      	adds	r6, #1
 80087ea:	4628      	mov	r0, r5
 80087ec:	f04f 0c00 	mov.w	ip, #0
 80087f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80087f4:	f8d0 e000 	ldr.w	lr, [r0]
 80087f8:	b293      	uxth	r3, r2
 80087fa:	ebac 0303 	sub.w	r3, ip, r3
 80087fe:	0c12      	lsrs	r2, r2, #16
 8008800:	fa13 f38e 	uxtah	r3, r3, lr
 8008804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800880c:	b29b      	uxth	r3, r3
 800880e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008812:	45c1      	cmp	r9, r8
 8008814:	f840 3b04 	str.w	r3, [r0], #4
 8008818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800881c:	d2e8      	bcs.n	80087f0 <quorem+0xb0>
 800881e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008826:	b922      	cbnz	r2, 8008832 <quorem+0xf2>
 8008828:	3b04      	subs	r3, #4
 800882a:	429d      	cmp	r5, r3
 800882c:	461a      	mov	r2, r3
 800882e:	d30a      	bcc.n	8008846 <quorem+0x106>
 8008830:	613c      	str	r4, [r7, #16]
 8008832:	4630      	mov	r0, r6
 8008834:	b003      	add	sp, #12
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	6812      	ldr	r2, [r2, #0]
 800883c:	3b04      	subs	r3, #4
 800883e:	2a00      	cmp	r2, #0
 8008840:	d1cc      	bne.n	80087dc <quorem+0x9c>
 8008842:	3c01      	subs	r4, #1
 8008844:	e7c7      	b.n	80087d6 <quorem+0x96>
 8008846:	6812      	ldr	r2, [r2, #0]
 8008848:	3b04      	subs	r3, #4
 800884a:	2a00      	cmp	r2, #0
 800884c:	d1f0      	bne.n	8008830 <quorem+0xf0>
 800884e:	3c01      	subs	r4, #1
 8008850:	e7eb      	b.n	800882a <quorem+0xea>
 8008852:	2000      	movs	r0, #0
 8008854:	e7ee      	b.n	8008834 <quorem+0xf4>
	...

08008858 <_dtoa_r>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	ed2d 8b04 	vpush	{d8-d9}
 8008860:	ec57 6b10 	vmov	r6, r7, d0
 8008864:	b093      	sub	sp, #76	; 0x4c
 8008866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800886c:	9106      	str	r1, [sp, #24]
 800886e:	ee10 aa10 	vmov	sl, s0
 8008872:	4604      	mov	r4, r0
 8008874:	9209      	str	r2, [sp, #36]	; 0x24
 8008876:	930c      	str	r3, [sp, #48]	; 0x30
 8008878:	46bb      	mov	fp, r7
 800887a:	b975      	cbnz	r5, 800889a <_dtoa_r+0x42>
 800887c:	2010      	movs	r0, #16
 800887e:	f001 f94d 	bl	8009b1c <malloc>
 8008882:	4602      	mov	r2, r0
 8008884:	6260      	str	r0, [r4, #36]	; 0x24
 8008886:	b920      	cbnz	r0, 8008892 <_dtoa_r+0x3a>
 8008888:	4ba7      	ldr	r3, [pc, #668]	; (8008b28 <_dtoa_r+0x2d0>)
 800888a:	21ea      	movs	r1, #234	; 0xea
 800888c:	48a7      	ldr	r0, [pc, #668]	; (8008b2c <_dtoa_r+0x2d4>)
 800888e:	f002 f8bd 	bl	800aa0c <__assert_func>
 8008892:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008896:	6005      	str	r5, [r0, #0]
 8008898:	60c5      	str	r5, [r0, #12]
 800889a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	b151      	cbz	r1, 80088b6 <_dtoa_r+0x5e>
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	604a      	str	r2, [r1, #4]
 80088a4:	2301      	movs	r3, #1
 80088a6:	4093      	lsls	r3, r2
 80088a8:	608b      	str	r3, [r1, #8]
 80088aa:	4620      	mov	r0, r4
 80088ac:	f001 f99e 	bl	8009bec <_Bfree>
 80088b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	1e3b      	subs	r3, r7, #0
 80088b8:	bfaa      	itet	ge
 80088ba:	2300      	movge	r3, #0
 80088bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80088c0:	f8c8 3000 	strge.w	r3, [r8]
 80088c4:	4b9a      	ldr	r3, [pc, #616]	; (8008b30 <_dtoa_r+0x2d8>)
 80088c6:	bfbc      	itt	lt
 80088c8:	2201      	movlt	r2, #1
 80088ca:	f8c8 2000 	strlt.w	r2, [r8]
 80088ce:	ea33 030b 	bics.w	r3, r3, fp
 80088d2:	d11b      	bne.n	800890c <_dtoa_r+0xb4>
 80088d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088d6:	f242 730f 	movw	r3, #9999	; 0x270f
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088e0:	4333      	orrs	r3, r6
 80088e2:	f000 8592 	beq.w	800940a <_dtoa_r+0xbb2>
 80088e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088e8:	b963      	cbnz	r3, 8008904 <_dtoa_r+0xac>
 80088ea:	4b92      	ldr	r3, [pc, #584]	; (8008b34 <_dtoa_r+0x2dc>)
 80088ec:	e022      	b.n	8008934 <_dtoa_r+0xdc>
 80088ee:	4b92      	ldr	r3, [pc, #584]	; (8008b38 <_dtoa_r+0x2e0>)
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	3308      	adds	r3, #8
 80088f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	9801      	ldr	r0, [sp, #4]
 80088fa:	b013      	add	sp, #76	; 0x4c
 80088fc:	ecbd 8b04 	vpop	{d8-d9}
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	4b8b      	ldr	r3, [pc, #556]	; (8008b34 <_dtoa_r+0x2dc>)
 8008906:	9301      	str	r3, [sp, #4]
 8008908:	3303      	adds	r3, #3
 800890a:	e7f3      	b.n	80088f4 <_dtoa_r+0x9c>
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f8 f8e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008918:	ec4b ab19 	vmov	d9, sl, fp
 800891c:	4680      	mov	r8, r0
 800891e:	b158      	cbz	r0, 8008938 <_dtoa_r+0xe0>
 8008920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008922:	2301      	movs	r3, #1
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 856b 	beq.w	8009404 <_dtoa_r+0xbac>
 800892e:	4883      	ldr	r0, [pc, #524]	; (8008b3c <_dtoa_r+0x2e4>)
 8008930:	6018      	str	r0, [r3, #0]
 8008932:	1e43      	subs	r3, r0, #1
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	e7df      	b.n	80088f8 <_dtoa_r+0xa0>
 8008938:	ec4b ab10 	vmov	d0, sl, fp
 800893c:	aa10      	add	r2, sp, #64	; 0x40
 800893e:	a911      	add	r1, sp, #68	; 0x44
 8008940:	4620      	mov	r0, r4
 8008942:	f001 fd01 	bl	800a348 <__d2b>
 8008946:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800894a:	ee08 0a10 	vmov	s16, r0
 800894e:	2d00      	cmp	r5, #0
 8008950:	f000 8084 	beq.w	8008a5c <_dtoa_r+0x204>
 8008954:	ee19 3a90 	vmov	r3, s19
 8008958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800895c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008960:	4656      	mov	r6, sl
 8008962:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008966:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800896a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800896e:	4b74      	ldr	r3, [pc, #464]	; (8008b40 <_dtoa_r+0x2e8>)
 8008970:	2200      	movs	r2, #0
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f7 fc8f 	bl	8000298 <__aeabi_dsub>
 800897a:	a365      	add	r3, pc, #404	; (adr r3, 8008b10 <_dtoa_r+0x2b8>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f7f7 fe42 	bl	8000608 <__aeabi_dmul>
 8008984:	a364      	add	r3, pc, #400	; (adr r3, 8008b18 <_dtoa_r+0x2c0>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc87 	bl	800029c <__adddf3>
 800898e:	4606      	mov	r6, r0
 8008990:	4628      	mov	r0, r5
 8008992:	460f      	mov	r7, r1
 8008994:	f7f7 fdce 	bl	8000534 <__aeabi_i2d>
 8008998:	a361      	add	r3, pc, #388	; (adr r3, 8008b20 <_dtoa_r+0x2c8>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fe33 	bl	8000608 <__aeabi_dmul>
 80089a2:	4602      	mov	r2, r0
 80089a4:	460b      	mov	r3, r1
 80089a6:	4630      	mov	r0, r6
 80089a8:	4639      	mov	r1, r7
 80089aa:	f7f7 fc77 	bl	800029c <__adddf3>
 80089ae:	4606      	mov	r6, r0
 80089b0:	460f      	mov	r7, r1
 80089b2:	f7f8 f8d9 	bl	8000b68 <__aeabi_d2iz>
 80089b6:	2200      	movs	r2, #0
 80089b8:	9000      	str	r0, [sp, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f8 f894 	bl	8000aec <__aeabi_dcmplt>
 80089c4:	b150      	cbz	r0, 80089dc <_dtoa_r+0x184>
 80089c6:	9800      	ldr	r0, [sp, #0]
 80089c8:	f7f7 fdb4 	bl	8000534 <__aeabi_i2d>
 80089cc:	4632      	mov	r2, r6
 80089ce:	463b      	mov	r3, r7
 80089d0:	f7f8 f882 	bl	8000ad8 <__aeabi_dcmpeq>
 80089d4:	b910      	cbnz	r0, 80089dc <_dtoa_r+0x184>
 80089d6:	9b00      	ldr	r3, [sp, #0]
 80089d8:	3b01      	subs	r3, #1
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	9b00      	ldr	r3, [sp, #0]
 80089de:	2b16      	cmp	r3, #22
 80089e0:	d85a      	bhi.n	8008a98 <_dtoa_r+0x240>
 80089e2:	9a00      	ldr	r2, [sp, #0]
 80089e4:	4b57      	ldr	r3, [pc, #348]	; (8008b44 <_dtoa_r+0x2ec>)
 80089e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	ec51 0b19 	vmov	r0, r1, d9
 80089f2:	f7f8 f87b 	bl	8000aec <__aeabi_dcmplt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d050      	beq.n	8008a9c <_dtoa_r+0x244>
 80089fa:	9b00      	ldr	r3, [sp, #0]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2300      	movs	r3, #0
 8008a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a06:	1b5d      	subs	r5, r3, r5
 8008a08:	1e6b      	subs	r3, r5, #1
 8008a0a:	9305      	str	r3, [sp, #20]
 8008a0c:	bf45      	ittet	mi
 8008a0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a12:	9304      	strmi	r3, [sp, #16]
 8008a14:	2300      	movpl	r3, #0
 8008a16:	2300      	movmi	r3, #0
 8008a18:	bf4c      	ite	mi
 8008a1a:	9305      	strmi	r3, [sp, #20]
 8008a1c:	9304      	strpl	r3, [sp, #16]
 8008a1e:	9b00      	ldr	r3, [sp, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	db3d      	blt.n	8008aa0 <_dtoa_r+0x248>
 8008a24:	9b05      	ldr	r3, [sp, #20]
 8008a26:	9a00      	ldr	r2, [sp, #0]
 8008a28:	920a      	str	r2, [sp, #40]	; 0x28
 8008a2a:	4413      	add	r3, r2
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9307      	str	r3, [sp, #28]
 8008a32:	9b06      	ldr	r3, [sp, #24]
 8008a34:	2b09      	cmp	r3, #9
 8008a36:	f200 8089 	bhi.w	8008b4c <_dtoa_r+0x2f4>
 8008a3a:	2b05      	cmp	r3, #5
 8008a3c:	bfc4      	itt	gt
 8008a3e:	3b04      	subgt	r3, #4
 8008a40:	9306      	strgt	r3, [sp, #24]
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	f1a3 0302 	sub.w	r3, r3, #2
 8008a48:	bfcc      	ite	gt
 8008a4a:	2500      	movgt	r5, #0
 8008a4c:	2501      	movle	r5, #1
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	f200 8087 	bhi.w	8008b62 <_dtoa_r+0x30a>
 8008a54:	e8df f003 	tbb	[pc, r3]
 8008a58:	59383a2d 	.word	0x59383a2d
 8008a5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008a60:	441d      	add	r5, r3
 8008a62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008a66:	2b20      	cmp	r3, #32
 8008a68:	bfc1      	itttt	gt
 8008a6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008a6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008a72:	fa0b f303 	lslgt.w	r3, fp, r3
 8008a76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008a7a:	bfda      	itte	le
 8008a7c:	f1c3 0320 	rsble	r3, r3, #32
 8008a80:	fa06 f003 	lslle.w	r0, r6, r3
 8008a84:	4318      	orrgt	r0, r3
 8008a86:	f7f7 fd45 	bl	8000514 <__aeabi_ui2d>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	4606      	mov	r6, r0
 8008a8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008a92:	3d01      	subs	r5, #1
 8008a94:	930e      	str	r3, [sp, #56]	; 0x38
 8008a96:	e76a      	b.n	800896e <_dtoa_r+0x116>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e7b2      	b.n	8008a02 <_dtoa_r+0x1aa>
 8008a9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a9e:	e7b1      	b.n	8008a04 <_dtoa_r+0x1ac>
 8008aa0:	9b04      	ldr	r3, [sp, #16]
 8008aa2:	9a00      	ldr	r2, [sp, #0]
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	9304      	str	r3, [sp, #16]
 8008aa8:	4253      	negs	r3, r2
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	2300      	movs	r3, #0
 8008aae:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab0:	e7bf      	b.n	8008a32 <_dtoa_r+0x1da>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9308      	str	r3, [sp, #32]
 8008ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	dc55      	bgt.n	8008b68 <_dtoa_r+0x310>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ac6:	e00c      	b.n	8008ae2 <_dtoa_r+0x28a>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e7f3      	b.n	8008ab4 <_dtoa_r+0x25c>
 8008acc:	2300      	movs	r3, #0
 8008ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	9b00      	ldr	r3, [sp, #0]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	9302      	str	r3, [sp, #8]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	bfb8      	it	lt
 8008ae0:	2301      	movlt	r3, #1
 8008ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	6042      	str	r2, [r0, #4]
 8008ae8:	2204      	movs	r2, #4
 8008aea:	f102 0614 	add.w	r6, r2, #20
 8008aee:	429e      	cmp	r6, r3
 8008af0:	6841      	ldr	r1, [r0, #4]
 8008af2:	d93d      	bls.n	8008b70 <_dtoa_r+0x318>
 8008af4:	4620      	mov	r0, r4
 8008af6:	f001 f839 	bl	8009b6c <_Balloc>
 8008afa:	9001      	str	r0, [sp, #4]
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d13b      	bne.n	8008b78 <_dtoa_r+0x320>
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <_dtoa_r+0x2f0>)
 8008b02:	4602      	mov	r2, r0
 8008b04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b08:	e6c0      	b.n	800888c <_dtoa_r+0x34>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e7df      	b.n	8008ace <_dtoa_r+0x276>
 8008b0e:	bf00      	nop
 8008b10:	636f4361 	.word	0x636f4361
 8008b14:	3fd287a7 	.word	0x3fd287a7
 8008b18:	8b60c8b3 	.word	0x8b60c8b3
 8008b1c:	3fc68a28 	.word	0x3fc68a28
 8008b20:	509f79fb 	.word	0x509f79fb
 8008b24:	3fd34413 	.word	0x3fd34413
 8008b28:	0800c4d6 	.word	0x0800c4d6
 8008b2c:	0800c4ed 	.word	0x0800c4ed
 8008b30:	7ff00000 	.word	0x7ff00000
 8008b34:	0800c4d2 	.word	0x0800c4d2
 8008b38:	0800c4c9 	.word	0x0800c4c9
 8008b3c:	0800c349 	.word	0x0800c349
 8008b40:	3ff80000 	.word	0x3ff80000
 8008b44:	0800c658 	.word	0x0800c658
 8008b48:	0800c548 	.word	0x0800c548
 8008b4c:	2501      	movs	r5, #1
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9306      	str	r3, [sp, #24]
 8008b52:	9508      	str	r5, [sp, #32]
 8008b54:	f04f 33ff 	mov.w	r3, #4294967295
 8008b58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	2312      	movs	r3, #18
 8008b60:	e7b0      	b.n	8008ac4 <_dtoa_r+0x26c>
 8008b62:	2301      	movs	r3, #1
 8008b64:	9308      	str	r3, [sp, #32]
 8008b66:	e7f5      	b.n	8008b54 <_dtoa_r+0x2fc>
 8008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b6e:	e7b8      	b.n	8008ae2 <_dtoa_r+0x28a>
 8008b70:	3101      	adds	r1, #1
 8008b72:	6041      	str	r1, [r0, #4]
 8008b74:	0052      	lsls	r2, r2, #1
 8008b76:	e7b8      	b.n	8008aea <_dtoa_r+0x292>
 8008b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b7a:	9a01      	ldr	r2, [sp, #4]
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	2b0e      	cmp	r3, #14
 8008b82:	f200 809d 	bhi.w	8008cc0 <_dtoa_r+0x468>
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	f000 809a 	beq.w	8008cc0 <_dtoa_r+0x468>
 8008b8c:	9b00      	ldr	r3, [sp, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	dd32      	ble.n	8008bf8 <_dtoa_r+0x3a0>
 8008b92:	4ab7      	ldr	r2, [pc, #732]	; (8008e70 <_dtoa_r+0x618>)
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ba0:	9b00      	ldr	r3, [sp, #0]
 8008ba2:	05d8      	lsls	r0, r3, #23
 8008ba4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008ba8:	d516      	bpl.n	8008bd8 <_dtoa_r+0x380>
 8008baa:	4bb2      	ldr	r3, [pc, #712]	; (8008e74 <_dtoa_r+0x61c>)
 8008bac:	ec51 0b19 	vmov	r0, r1, d9
 8008bb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008bb4:	f7f7 fe52 	bl	800085c <__aeabi_ddiv>
 8008bb8:	f007 070f 	and.w	r7, r7, #15
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	468b      	mov	fp, r1
 8008bc0:	2503      	movs	r5, #3
 8008bc2:	4eac      	ldr	r6, [pc, #688]	; (8008e74 <_dtoa_r+0x61c>)
 8008bc4:	b957      	cbnz	r7, 8008bdc <_dtoa_r+0x384>
 8008bc6:	4642      	mov	r2, r8
 8008bc8:	464b      	mov	r3, r9
 8008bca:	4650      	mov	r0, sl
 8008bcc:	4659      	mov	r1, fp
 8008bce:	f7f7 fe45 	bl	800085c <__aeabi_ddiv>
 8008bd2:	4682      	mov	sl, r0
 8008bd4:	468b      	mov	fp, r1
 8008bd6:	e028      	b.n	8008c2a <_dtoa_r+0x3d2>
 8008bd8:	2502      	movs	r5, #2
 8008bda:	e7f2      	b.n	8008bc2 <_dtoa_r+0x36a>
 8008bdc:	07f9      	lsls	r1, r7, #31
 8008bde:	d508      	bpl.n	8008bf2 <_dtoa_r+0x39a>
 8008be0:	4640      	mov	r0, r8
 8008be2:	4649      	mov	r1, r9
 8008be4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008be8:	f7f7 fd0e 	bl	8000608 <__aeabi_dmul>
 8008bec:	3501      	adds	r5, #1
 8008bee:	4680      	mov	r8, r0
 8008bf0:	4689      	mov	r9, r1
 8008bf2:	107f      	asrs	r7, r7, #1
 8008bf4:	3608      	adds	r6, #8
 8008bf6:	e7e5      	b.n	8008bc4 <_dtoa_r+0x36c>
 8008bf8:	f000 809b 	beq.w	8008d32 <_dtoa_r+0x4da>
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	4f9d      	ldr	r7, [pc, #628]	; (8008e74 <_dtoa_r+0x61c>)
 8008c00:	425e      	negs	r6, r3
 8008c02:	4b9b      	ldr	r3, [pc, #620]	; (8008e70 <_dtoa_r+0x618>)
 8008c04:	f006 020f 	and.w	r2, r6, #15
 8008c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	ec51 0b19 	vmov	r0, r1, d9
 8008c14:	f7f7 fcf8 	bl	8000608 <__aeabi_dmul>
 8008c18:	1136      	asrs	r6, r6, #4
 8008c1a:	4682      	mov	sl, r0
 8008c1c:	468b      	mov	fp, r1
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2502      	movs	r5, #2
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d17a      	bne.n	8008d1c <_dtoa_r+0x4c4>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1d3      	bne.n	8008bd2 <_dtoa_r+0x37a>
 8008c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 8082 	beq.w	8008d36 <_dtoa_r+0x4de>
 8008c32:	4b91      	ldr	r3, [pc, #580]	; (8008e78 <_dtoa_r+0x620>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	4650      	mov	r0, sl
 8008c38:	4659      	mov	r1, fp
 8008c3a:	f7f7 ff57 	bl	8000aec <__aeabi_dcmplt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d079      	beq.n	8008d36 <_dtoa_r+0x4de>
 8008c42:	9b03      	ldr	r3, [sp, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d076      	beq.n	8008d36 <_dtoa_r+0x4de>
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	dd36      	ble.n	8008cbc <_dtoa_r+0x464>
 8008c4e:	9b00      	ldr	r3, [sp, #0]
 8008c50:	4650      	mov	r0, sl
 8008c52:	4659      	mov	r1, fp
 8008c54:	1e5f      	subs	r7, r3, #1
 8008c56:	2200      	movs	r2, #0
 8008c58:	4b88      	ldr	r3, [pc, #544]	; (8008e7c <_dtoa_r+0x624>)
 8008c5a:	f7f7 fcd5 	bl	8000608 <__aeabi_dmul>
 8008c5e:	9e02      	ldr	r6, [sp, #8]
 8008c60:	4682      	mov	sl, r0
 8008c62:	468b      	mov	fp, r1
 8008c64:	3501      	adds	r5, #1
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7f7 fc64 	bl	8000534 <__aeabi_i2d>
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	465b      	mov	r3, fp
 8008c70:	f7f7 fcca 	bl	8000608 <__aeabi_dmul>
 8008c74:	4b82      	ldr	r3, [pc, #520]	; (8008e80 <_dtoa_r+0x628>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	f7f7 fb10 	bl	800029c <__adddf3>
 8008c7c:	46d0      	mov	r8, sl
 8008c7e:	46d9      	mov	r9, fp
 8008c80:	4682      	mov	sl, r0
 8008c82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	d158      	bne.n	8008d3c <_dtoa_r+0x4e4>
 8008c8a:	4b7e      	ldr	r3, [pc, #504]	; (8008e84 <_dtoa_r+0x62c>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 fb01 	bl	8000298 <__aeabi_dsub>
 8008c96:	4652      	mov	r2, sl
 8008c98:	465b      	mov	r3, fp
 8008c9a:	4680      	mov	r8, r0
 8008c9c:	4689      	mov	r9, r1
 8008c9e:	f7f7 ff43 	bl	8000b28 <__aeabi_dcmpgt>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f040 8295 	bne.w	80091d2 <_dtoa_r+0x97a>
 8008ca8:	4652      	mov	r2, sl
 8008caa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008cae:	4640      	mov	r0, r8
 8008cb0:	4649      	mov	r1, r9
 8008cb2:	f7f7 ff1b 	bl	8000aec <__aeabi_dcmplt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f040 8289 	bne.w	80091ce <_dtoa_r+0x976>
 8008cbc:	ec5b ab19 	vmov	sl, fp, d9
 8008cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f2c0 8148 	blt.w	8008f58 <_dtoa_r+0x700>
 8008cc8:	9a00      	ldr	r2, [sp, #0]
 8008cca:	2a0e      	cmp	r2, #14
 8008ccc:	f300 8144 	bgt.w	8008f58 <_dtoa_r+0x700>
 8008cd0:	4b67      	ldr	r3, [pc, #412]	; (8008e70 <_dtoa_r+0x618>)
 8008cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f280 80d5 	bge.w	8008e8c <_dtoa_r+0x634>
 8008ce2:	9b03      	ldr	r3, [sp, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f300 80d1 	bgt.w	8008e8c <_dtoa_r+0x634>
 8008cea:	f040 826f 	bne.w	80091cc <_dtoa_r+0x974>
 8008cee:	4b65      	ldr	r3, [pc, #404]	; (8008e84 <_dtoa_r+0x62c>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4640      	mov	r0, r8
 8008cf4:	4649      	mov	r1, r9
 8008cf6:	f7f7 fc87 	bl	8000608 <__aeabi_dmul>
 8008cfa:	4652      	mov	r2, sl
 8008cfc:	465b      	mov	r3, fp
 8008cfe:	f7f7 ff09 	bl	8000b14 <__aeabi_dcmpge>
 8008d02:	9e03      	ldr	r6, [sp, #12]
 8008d04:	4637      	mov	r7, r6
 8008d06:	2800      	cmp	r0, #0
 8008d08:	f040 8245 	bne.w	8009196 <_dtoa_r+0x93e>
 8008d0c:	9d01      	ldr	r5, [sp, #4]
 8008d0e:	2331      	movs	r3, #49	; 0x31
 8008d10:	f805 3b01 	strb.w	r3, [r5], #1
 8008d14:	9b00      	ldr	r3, [sp, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	9300      	str	r3, [sp, #0]
 8008d1a:	e240      	b.n	800919e <_dtoa_r+0x946>
 8008d1c:	07f2      	lsls	r2, r6, #31
 8008d1e:	d505      	bpl.n	8008d2c <_dtoa_r+0x4d4>
 8008d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d24:	f7f7 fc70 	bl	8000608 <__aeabi_dmul>
 8008d28:	3501      	adds	r5, #1
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	1076      	asrs	r6, r6, #1
 8008d2e:	3708      	adds	r7, #8
 8008d30:	e777      	b.n	8008c22 <_dtoa_r+0x3ca>
 8008d32:	2502      	movs	r5, #2
 8008d34:	e779      	b.n	8008c2a <_dtoa_r+0x3d2>
 8008d36:	9f00      	ldr	r7, [sp, #0]
 8008d38:	9e03      	ldr	r6, [sp, #12]
 8008d3a:	e794      	b.n	8008c66 <_dtoa_r+0x40e>
 8008d3c:	9901      	ldr	r1, [sp, #4]
 8008d3e:	4b4c      	ldr	r3, [pc, #304]	; (8008e70 <_dtoa_r+0x618>)
 8008d40:	4431      	add	r1, r6
 8008d42:	910d      	str	r1, [sp, #52]	; 0x34
 8008d44:	9908      	ldr	r1, [sp, #32]
 8008d46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008d4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	d043      	beq.n	8008dda <_dtoa_r+0x582>
 8008d52:	494d      	ldr	r1, [pc, #308]	; (8008e88 <_dtoa_r+0x630>)
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7f7 fd81 	bl	800085c <__aeabi_ddiv>
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	f7f7 fa9b 	bl	8000298 <__aeabi_dsub>
 8008d62:	9d01      	ldr	r5, [sp, #4]
 8008d64:	4682      	mov	sl, r0
 8008d66:	468b      	mov	fp, r1
 8008d68:	4649      	mov	r1, r9
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	f7f7 fefc 	bl	8000b68 <__aeabi_d2iz>
 8008d70:	4606      	mov	r6, r0
 8008d72:	f7f7 fbdf 	bl	8000534 <__aeabi_i2d>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	f7f7 fa8b 	bl	8000298 <__aeabi_dsub>
 8008d82:	3630      	adds	r6, #48	; 0x30
 8008d84:	f805 6b01 	strb.w	r6, [r5], #1
 8008d88:	4652      	mov	r2, sl
 8008d8a:	465b      	mov	r3, fp
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	f7f7 feac 	bl	8000aec <__aeabi_dcmplt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	d163      	bne.n	8008e60 <_dtoa_r+0x608>
 8008d98:	4642      	mov	r2, r8
 8008d9a:	464b      	mov	r3, r9
 8008d9c:	4936      	ldr	r1, [pc, #216]	; (8008e78 <_dtoa_r+0x620>)
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f7f7 fa7a 	bl	8000298 <__aeabi_dsub>
 8008da4:	4652      	mov	r2, sl
 8008da6:	465b      	mov	r3, fp
 8008da8:	f7f7 fea0 	bl	8000aec <__aeabi_dcmplt>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f040 80b5 	bne.w	8008f1c <_dtoa_r+0x6c4>
 8008db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d081      	beq.n	8008cbc <_dtoa_r+0x464>
 8008db8:	4b30      	ldr	r3, [pc, #192]	; (8008e7c <_dtoa_r+0x624>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	4659      	mov	r1, fp
 8008dc0:	f7f7 fc22 	bl	8000608 <__aeabi_dmul>
 8008dc4:	4b2d      	ldr	r3, [pc, #180]	; (8008e7c <_dtoa_r+0x624>)
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	468b      	mov	fp, r1
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f7f7 fc1a 	bl	8000608 <__aeabi_dmul>
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4689      	mov	r9, r1
 8008dd8:	e7c6      	b.n	8008d68 <_dtoa_r+0x510>
 8008dda:	4650      	mov	r0, sl
 8008ddc:	4659      	mov	r1, fp
 8008dde:	f7f7 fc13 	bl	8000608 <__aeabi_dmul>
 8008de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008de4:	9d01      	ldr	r5, [sp, #4]
 8008de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	4649      	mov	r1, r9
 8008dee:	4640      	mov	r0, r8
 8008df0:	f7f7 feba 	bl	8000b68 <__aeabi_d2iz>
 8008df4:	4606      	mov	r6, r0
 8008df6:	f7f7 fb9d 	bl	8000534 <__aeabi_i2d>
 8008dfa:	3630      	adds	r6, #48	; 0x30
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4640      	mov	r0, r8
 8008e02:	4649      	mov	r1, r9
 8008e04:	f7f7 fa48 	bl	8000298 <__aeabi_dsub>
 8008e08:	f805 6b01 	strb.w	r6, [r5], #1
 8008e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e0e:	429d      	cmp	r5, r3
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	f04f 0200 	mov.w	r2, #0
 8008e18:	d124      	bne.n	8008e64 <_dtoa_r+0x60c>
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	; (8008e88 <_dtoa_r+0x630>)
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	4659      	mov	r1, fp
 8008e20:	f7f7 fa3c 	bl	800029c <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	f7f7 fe7c 	bl	8000b28 <__aeabi_dcmpgt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d173      	bne.n	8008f1c <_dtoa_r+0x6c4>
 8008e34:	4652      	mov	r2, sl
 8008e36:	465b      	mov	r3, fp
 8008e38:	4913      	ldr	r1, [pc, #76]	; (8008e88 <_dtoa_r+0x630>)
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	f7f7 fa2c 	bl	8000298 <__aeabi_dsub>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4640      	mov	r0, r8
 8008e46:	4649      	mov	r1, r9
 8008e48:	f7f7 fe50 	bl	8000aec <__aeabi_dcmplt>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f af35 	beq.w	8008cbc <_dtoa_r+0x464>
 8008e52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008e54:	1e6b      	subs	r3, r5, #1
 8008e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e5c:	2b30      	cmp	r3, #48	; 0x30
 8008e5e:	d0f8      	beq.n	8008e52 <_dtoa_r+0x5fa>
 8008e60:	9700      	str	r7, [sp, #0]
 8008e62:	e049      	b.n	8008ef8 <_dtoa_r+0x6a0>
 8008e64:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <_dtoa_r+0x624>)
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	4689      	mov	r9, r1
 8008e6e:	e7bd      	b.n	8008dec <_dtoa_r+0x594>
 8008e70:	0800c658 	.word	0x0800c658
 8008e74:	0800c630 	.word	0x0800c630
 8008e78:	3ff00000 	.word	0x3ff00000
 8008e7c:	40240000 	.word	0x40240000
 8008e80:	401c0000 	.word	0x401c0000
 8008e84:	40140000 	.word	0x40140000
 8008e88:	3fe00000 	.word	0x3fe00000
 8008e8c:	9d01      	ldr	r5, [sp, #4]
 8008e8e:	4656      	mov	r6, sl
 8008e90:	465f      	mov	r7, fp
 8008e92:	4642      	mov	r2, r8
 8008e94:	464b      	mov	r3, r9
 8008e96:	4630      	mov	r0, r6
 8008e98:	4639      	mov	r1, r7
 8008e9a:	f7f7 fcdf 	bl	800085c <__aeabi_ddiv>
 8008e9e:	f7f7 fe63 	bl	8000b68 <__aeabi_d2iz>
 8008ea2:	4682      	mov	sl, r0
 8008ea4:	f7f7 fb46 	bl	8000534 <__aeabi_i2d>
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	f7f7 fbac 	bl	8000608 <__aeabi_dmul>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008ebc:	f7f7 f9ec 	bl	8000298 <__aeabi_dsub>
 8008ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ec4:	9e01      	ldr	r6, [sp, #4]
 8008ec6:	9f03      	ldr	r7, [sp, #12]
 8008ec8:	1bae      	subs	r6, r5, r6
 8008eca:	42b7      	cmp	r7, r6
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	d135      	bne.n	8008f3e <_dtoa_r+0x6e6>
 8008ed2:	f7f7 f9e3 	bl	800029c <__adddf3>
 8008ed6:	4642      	mov	r2, r8
 8008ed8:	464b      	mov	r3, r9
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	f7f7 fe23 	bl	8000b28 <__aeabi_dcmpgt>
 8008ee2:	b9d0      	cbnz	r0, 8008f1a <_dtoa_r+0x6c2>
 8008ee4:	4642      	mov	r2, r8
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	f7f7 fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ef0:	b110      	cbz	r0, 8008ef8 <_dtoa_r+0x6a0>
 8008ef2:	f01a 0f01 	tst.w	sl, #1
 8008ef6:	d110      	bne.n	8008f1a <_dtoa_r+0x6c2>
 8008ef8:	4620      	mov	r0, r4
 8008efa:	ee18 1a10 	vmov	r1, s16
 8008efe:	f000 fe75 	bl	8009bec <_Bfree>
 8008f02:	2300      	movs	r3, #0
 8008f04:	9800      	ldr	r0, [sp, #0]
 8008f06:	702b      	strb	r3, [r5, #0]
 8008f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	6018      	str	r0, [r3, #0]
 8008f0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f43f acf1 	beq.w	80088f8 <_dtoa_r+0xa0>
 8008f16:	601d      	str	r5, [r3, #0]
 8008f18:	e4ee      	b.n	80088f8 <_dtoa_r+0xa0>
 8008f1a:	9f00      	ldr	r7, [sp, #0]
 8008f1c:	462b      	mov	r3, r5
 8008f1e:	461d      	mov	r5, r3
 8008f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f24:	2a39      	cmp	r2, #57	; 0x39
 8008f26:	d106      	bne.n	8008f36 <_dtoa_r+0x6de>
 8008f28:	9a01      	ldr	r2, [sp, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d1f7      	bne.n	8008f1e <_dtoa_r+0x6c6>
 8008f2e:	9901      	ldr	r1, [sp, #4]
 8008f30:	2230      	movs	r2, #48	; 0x30
 8008f32:	3701      	adds	r7, #1
 8008f34:	700a      	strb	r2, [r1, #0]
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	3201      	adds	r2, #1
 8008f3a:	701a      	strb	r2, [r3, #0]
 8008f3c:	e790      	b.n	8008e60 <_dtoa_r+0x608>
 8008f3e:	4ba6      	ldr	r3, [pc, #664]	; (80091d8 <_dtoa_r+0x980>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	f7f7 fb61 	bl	8000608 <__aeabi_dmul>
 8008f46:	2200      	movs	r2, #0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	f7f7 fdc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d09d      	beq.n	8008e92 <_dtoa_r+0x63a>
 8008f56:	e7cf      	b.n	8008ef8 <_dtoa_r+0x6a0>
 8008f58:	9a08      	ldr	r2, [sp, #32]
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	f000 80d7 	beq.w	800910e <_dtoa_r+0x8b6>
 8008f60:	9a06      	ldr	r2, [sp, #24]
 8008f62:	2a01      	cmp	r2, #1
 8008f64:	f300 80ba 	bgt.w	80090dc <_dtoa_r+0x884>
 8008f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	f000 80b2 	beq.w	80090d4 <_dtoa_r+0x87c>
 8008f70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f74:	9e07      	ldr	r6, [sp, #28]
 8008f76:	9d04      	ldr	r5, [sp, #16]
 8008f78:	9a04      	ldr	r2, [sp, #16]
 8008f7a:	441a      	add	r2, r3
 8008f7c:	9204      	str	r2, [sp, #16]
 8008f7e:	9a05      	ldr	r2, [sp, #20]
 8008f80:	2101      	movs	r1, #1
 8008f82:	441a      	add	r2, r3
 8008f84:	4620      	mov	r0, r4
 8008f86:	9205      	str	r2, [sp, #20]
 8008f88:	f000 ff32 	bl	8009df0 <__i2b>
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	2d00      	cmp	r5, #0
 8008f90:	dd0c      	ble.n	8008fac <_dtoa_r+0x754>
 8008f92:	9b05      	ldr	r3, [sp, #20]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dd09      	ble.n	8008fac <_dtoa_r+0x754>
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	9a04      	ldr	r2, [sp, #16]
 8008f9c:	bfa8      	it	ge
 8008f9e:	462b      	movge	r3, r5
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	9204      	str	r2, [sp, #16]
 8008fa4:	9a05      	ldr	r2, [sp, #20]
 8008fa6:	1aed      	subs	r5, r5, r3
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	9b07      	ldr	r3, [sp, #28]
 8008fae:	b31b      	cbz	r3, 8008ff8 <_dtoa_r+0x7a0>
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 80af 	beq.w	8009116 <_dtoa_r+0x8be>
 8008fb8:	2e00      	cmp	r6, #0
 8008fba:	dd13      	ble.n	8008fe4 <_dtoa_r+0x78c>
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	4632      	mov	r2, r6
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 ffd5 	bl	8009f70 <__pow5mult>
 8008fc6:	ee18 2a10 	vmov	r2, s16
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4607      	mov	r7, r0
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 ff24 	bl	8009e1c <__multiply>
 8008fd4:	ee18 1a10 	vmov	r1, s16
 8008fd8:	4680      	mov	r8, r0
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fe06 	bl	8009bec <_Bfree>
 8008fe0:	ee08 8a10 	vmov	s16, r8
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	1b9a      	subs	r2, r3, r6
 8008fe8:	d006      	beq.n	8008ff8 <_dtoa_r+0x7a0>
 8008fea:	ee18 1a10 	vmov	r1, s16
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f000 ffbe 	bl	8009f70 <__pow5mult>
 8008ff4:	ee08 0a10 	vmov	s16, r0
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f000 fef8 	bl	8009df0 <__i2b>
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	2b00      	cmp	r3, #0
 8009004:	4606      	mov	r6, r0
 8009006:	f340 8088 	ble.w	800911a <_dtoa_r+0x8c2>
 800900a:	461a      	mov	r2, r3
 800900c:	4601      	mov	r1, r0
 800900e:	4620      	mov	r0, r4
 8009010:	f000 ffae 	bl	8009f70 <__pow5mult>
 8009014:	9b06      	ldr	r3, [sp, #24]
 8009016:	2b01      	cmp	r3, #1
 8009018:	4606      	mov	r6, r0
 800901a:	f340 8081 	ble.w	8009120 <_dtoa_r+0x8c8>
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	6933      	ldr	r3, [r6, #16]
 8009024:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009028:	6918      	ldr	r0, [r3, #16]
 800902a:	f000 fe91 	bl	8009d50 <__hi0bits>
 800902e:	f1c0 0020 	rsb	r0, r0, #32
 8009032:	9b05      	ldr	r3, [sp, #20]
 8009034:	4418      	add	r0, r3
 8009036:	f010 001f 	ands.w	r0, r0, #31
 800903a:	f000 8092 	beq.w	8009162 <_dtoa_r+0x90a>
 800903e:	f1c0 0320 	rsb	r3, r0, #32
 8009042:	2b04      	cmp	r3, #4
 8009044:	f340 808a 	ble.w	800915c <_dtoa_r+0x904>
 8009048:	f1c0 001c 	rsb	r0, r0, #28
 800904c:	9b04      	ldr	r3, [sp, #16]
 800904e:	4403      	add	r3, r0
 8009050:	9304      	str	r3, [sp, #16]
 8009052:	9b05      	ldr	r3, [sp, #20]
 8009054:	4403      	add	r3, r0
 8009056:	4405      	add	r5, r0
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd07      	ble.n	8009070 <_dtoa_r+0x818>
 8009060:	ee18 1a10 	vmov	r1, s16
 8009064:	461a      	mov	r2, r3
 8009066:	4620      	mov	r0, r4
 8009068:	f000 ffdc 	bl	800a024 <__lshift>
 800906c:	ee08 0a10 	vmov	s16, r0
 8009070:	9b05      	ldr	r3, [sp, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dd05      	ble.n	8009082 <_dtoa_r+0x82a>
 8009076:	4631      	mov	r1, r6
 8009078:	461a      	mov	r2, r3
 800907a:	4620      	mov	r0, r4
 800907c:	f000 ffd2 	bl	800a024 <__lshift>
 8009080:	4606      	mov	r6, r0
 8009082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009084:	2b00      	cmp	r3, #0
 8009086:	d06e      	beq.n	8009166 <_dtoa_r+0x90e>
 8009088:	ee18 0a10 	vmov	r0, s16
 800908c:	4631      	mov	r1, r6
 800908e:	f001 f839 	bl	800a104 <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	da67      	bge.n	8009166 <_dtoa_r+0x90e>
 8009096:	9b00      	ldr	r3, [sp, #0]
 8009098:	3b01      	subs	r3, #1
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	220a      	movs	r2, #10
 80090a2:	2300      	movs	r3, #0
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fdc3 	bl	8009c30 <__multadd>
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	ee08 0a10 	vmov	s16, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 81b1 	beq.w	8009418 <_dtoa_r+0xbc0>
 80090b6:	2300      	movs	r3, #0
 80090b8:	4639      	mov	r1, r7
 80090ba:	220a      	movs	r2, #10
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fdb7 	bl	8009c30 <__multadd>
 80090c2:	9b02      	ldr	r3, [sp, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	4607      	mov	r7, r0
 80090c8:	f300 808e 	bgt.w	80091e8 <_dtoa_r+0x990>
 80090cc:	9b06      	ldr	r3, [sp, #24]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	dc51      	bgt.n	8009176 <_dtoa_r+0x91e>
 80090d2:	e089      	b.n	80091e8 <_dtoa_r+0x990>
 80090d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80090da:	e74b      	b.n	8008f74 <_dtoa_r+0x71c>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	1e5e      	subs	r6, r3, #1
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	42b3      	cmp	r3, r6
 80090e4:	bfbf      	itttt	lt
 80090e6:	9b07      	ldrlt	r3, [sp, #28]
 80090e8:	9607      	strlt	r6, [sp, #28]
 80090ea:	1af2      	sublt	r2, r6, r3
 80090ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80090ee:	bfb6      	itet	lt
 80090f0:	189b      	addlt	r3, r3, r2
 80090f2:	1b9e      	subge	r6, r3, r6
 80090f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80090f6:	9b03      	ldr	r3, [sp, #12]
 80090f8:	bfb8      	it	lt
 80090fa:	2600      	movlt	r6, #0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfb7      	itett	lt
 8009100:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009104:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009108:	1a9d      	sublt	r5, r3, r2
 800910a:	2300      	movlt	r3, #0
 800910c:	e734      	b.n	8008f78 <_dtoa_r+0x720>
 800910e:	9e07      	ldr	r6, [sp, #28]
 8009110:	9d04      	ldr	r5, [sp, #16]
 8009112:	9f08      	ldr	r7, [sp, #32]
 8009114:	e73b      	b.n	8008f8e <_dtoa_r+0x736>
 8009116:	9a07      	ldr	r2, [sp, #28]
 8009118:	e767      	b.n	8008fea <_dtoa_r+0x792>
 800911a:	9b06      	ldr	r3, [sp, #24]
 800911c:	2b01      	cmp	r3, #1
 800911e:	dc18      	bgt.n	8009152 <_dtoa_r+0x8fa>
 8009120:	f1ba 0f00 	cmp.w	sl, #0
 8009124:	d115      	bne.n	8009152 <_dtoa_r+0x8fa>
 8009126:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800912a:	b993      	cbnz	r3, 8009152 <_dtoa_r+0x8fa>
 800912c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009130:	0d1b      	lsrs	r3, r3, #20
 8009132:	051b      	lsls	r3, r3, #20
 8009134:	b183      	cbz	r3, 8009158 <_dtoa_r+0x900>
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	3301      	adds	r3, #1
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	3301      	adds	r3, #1
 8009140:	9305      	str	r3, [sp, #20]
 8009142:	f04f 0801 	mov.w	r8, #1
 8009146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f af6a 	bne.w	8009022 <_dtoa_r+0x7ca>
 800914e:	2001      	movs	r0, #1
 8009150:	e76f      	b.n	8009032 <_dtoa_r+0x7da>
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	e7f6      	b.n	8009146 <_dtoa_r+0x8ee>
 8009158:	4698      	mov	r8, r3
 800915a:	e7f4      	b.n	8009146 <_dtoa_r+0x8ee>
 800915c:	f43f af7d 	beq.w	800905a <_dtoa_r+0x802>
 8009160:	4618      	mov	r0, r3
 8009162:	301c      	adds	r0, #28
 8009164:	e772      	b.n	800904c <_dtoa_r+0x7f4>
 8009166:	9b03      	ldr	r3, [sp, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	dc37      	bgt.n	80091dc <_dtoa_r+0x984>
 800916c:	9b06      	ldr	r3, [sp, #24]
 800916e:	2b02      	cmp	r3, #2
 8009170:	dd34      	ble.n	80091dc <_dtoa_r+0x984>
 8009172:	9b03      	ldr	r3, [sp, #12]
 8009174:	9302      	str	r3, [sp, #8]
 8009176:	9b02      	ldr	r3, [sp, #8]
 8009178:	b96b      	cbnz	r3, 8009196 <_dtoa_r+0x93e>
 800917a:	4631      	mov	r1, r6
 800917c:	2205      	movs	r2, #5
 800917e:	4620      	mov	r0, r4
 8009180:	f000 fd56 	bl	8009c30 <__multadd>
 8009184:	4601      	mov	r1, r0
 8009186:	4606      	mov	r6, r0
 8009188:	ee18 0a10 	vmov	r0, s16
 800918c:	f000 ffba 	bl	800a104 <__mcmp>
 8009190:	2800      	cmp	r0, #0
 8009192:	f73f adbb 	bgt.w	8008d0c <_dtoa_r+0x4b4>
 8009196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009198:	9d01      	ldr	r5, [sp, #4]
 800919a:	43db      	mvns	r3, r3
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	f04f 0800 	mov.w	r8, #0
 80091a2:	4631      	mov	r1, r6
 80091a4:	4620      	mov	r0, r4
 80091a6:	f000 fd21 	bl	8009bec <_Bfree>
 80091aa:	2f00      	cmp	r7, #0
 80091ac:	f43f aea4 	beq.w	8008ef8 <_dtoa_r+0x6a0>
 80091b0:	f1b8 0f00 	cmp.w	r8, #0
 80091b4:	d005      	beq.n	80091c2 <_dtoa_r+0x96a>
 80091b6:	45b8      	cmp	r8, r7
 80091b8:	d003      	beq.n	80091c2 <_dtoa_r+0x96a>
 80091ba:	4641      	mov	r1, r8
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fd15 	bl	8009bec <_Bfree>
 80091c2:	4639      	mov	r1, r7
 80091c4:	4620      	mov	r0, r4
 80091c6:	f000 fd11 	bl	8009bec <_Bfree>
 80091ca:	e695      	b.n	8008ef8 <_dtoa_r+0x6a0>
 80091cc:	2600      	movs	r6, #0
 80091ce:	4637      	mov	r7, r6
 80091d0:	e7e1      	b.n	8009196 <_dtoa_r+0x93e>
 80091d2:	9700      	str	r7, [sp, #0]
 80091d4:	4637      	mov	r7, r6
 80091d6:	e599      	b.n	8008d0c <_dtoa_r+0x4b4>
 80091d8:	40240000 	.word	0x40240000
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80ca 	beq.w	8009378 <_dtoa_r+0xb20>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	9302      	str	r3, [sp, #8]
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	dd05      	ble.n	80091f8 <_dtoa_r+0x9a0>
 80091ec:	4639      	mov	r1, r7
 80091ee:	462a      	mov	r2, r5
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 ff17 	bl	800a024 <__lshift>
 80091f6:	4607      	mov	r7, r0
 80091f8:	f1b8 0f00 	cmp.w	r8, #0
 80091fc:	d05b      	beq.n	80092b6 <_dtoa_r+0xa5e>
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4620      	mov	r0, r4
 8009202:	f000 fcb3 	bl	8009b6c <_Balloc>
 8009206:	4605      	mov	r5, r0
 8009208:	b928      	cbnz	r0, 8009216 <_dtoa_r+0x9be>
 800920a:	4b87      	ldr	r3, [pc, #540]	; (8009428 <_dtoa_r+0xbd0>)
 800920c:	4602      	mov	r2, r0
 800920e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009212:	f7ff bb3b 	b.w	800888c <_dtoa_r+0x34>
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	3202      	adds	r2, #2
 800921a:	0092      	lsls	r2, r2, #2
 800921c:	f107 010c 	add.w	r1, r7, #12
 8009220:	300c      	adds	r0, #12
 8009222:	f000 fc95 	bl	8009b50 <memcpy>
 8009226:	2201      	movs	r2, #1
 8009228:	4629      	mov	r1, r5
 800922a:	4620      	mov	r0, r4
 800922c:	f000 fefa 	bl	800a024 <__lshift>
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	f103 0901 	add.w	r9, r3, #1
 8009236:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800923a:	4413      	add	r3, r2
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	f00a 0301 	and.w	r3, sl, #1
 8009242:	46b8      	mov	r8, r7
 8009244:	9304      	str	r3, [sp, #16]
 8009246:	4607      	mov	r7, r0
 8009248:	4631      	mov	r1, r6
 800924a:	ee18 0a10 	vmov	r0, s16
 800924e:	f7ff fa77 	bl	8008740 <quorem>
 8009252:	4641      	mov	r1, r8
 8009254:	9002      	str	r0, [sp, #8]
 8009256:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800925a:	ee18 0a10 	vmov	r0, s16
 800925e:	f000 ff51 	bl	800a104 <__mcmp>
 8009262:	463a      	mov	r2, r7
 8009264:	9003      	str	r0, [sp, #12]
 8009266:	4631      	mov	r1, r6
 8009268:	4620      	mov	r0, r4
 800926a:	f000 ff67 	bl	800a13c <__mdiff>
 800926e:	68c2      	ldr	r2, [r0, #12]
 8009270:	f109 3bff 	add.w	fp, r9, #4294967295
 8009274:	4605      	mov	r5, r0
 8009276:	bb02      	cbnz	r2, 80092ba <_dtoa_r+0xa62>
 8009278:	4601      	mov	r1, r0
 800927a:	ee18 0a10 	vmov	r0, s16
 800927e:	f000 ff41 	bl	800a104 <__mcmp>
 8009282:	4602      	mov	r2, r0
 8009284:	4629      	mov	r1, r5
 8009286:	4620      	mov	r0, r4
 8009288:	9207      	str	r2, [sp, #28]
 800928a:	f000 fcaf 	bl	8009bec <_Bfree>
 800928e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009292:	ea43 0102 	orr.w	r1, r3, r2
 8009296:	9b04      	ldr	r3, [sp, #16]
 8009298:	430b      	orrs	r3, r1
 800929a:	464d      	mov	r5, r9
 800929c:	d10f      	bne.n	80092be <_dtoa_r+0xa66>
 800929e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092a2:	d02a      	beq.n	80092fa <_dtoa_r+0xaa2>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	dd02      	ble.n	80092b0 <_dtoa_r+0xa58>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80092b0:	f88b a000 	strb.w	sl, [fp]
 80092b4:	e775      	b.n	80091a2 <_dtoa_r+0x94a>
 80092b6:	4638      	mov	r0, r7
 80092b8:	e7ba      	b.n	8009230 <_dtoa_r+0x9d8>
 80092ba:	2201      	movs	r2, #1
 80092bc:	e7e2      	b.n	8009284 <_dtoa_r+0xa2c>
 80092be:	9b03      	ldr	r3, [sp, #12]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	db04      	blt.n	80092ce <_dtoa_r+0xa76>
 80092c4:	9906      	ldr	r1, [sp, #24]
 80092c6:	430b      	orrs	r3, r1
 80092c8:	9904      	ldr	r1, [sp, #16]
 80092ca:	430b      	orrs	r3, r1
 80092cc:	d122      	bne.n	8009314 <_dtoa_r+0xabc>
 80092ce:	2a00      	cmp	r2, #0
 80092d0:	ddee      	ble.n	80092b0 <_dtoa_r+0xa58>
 80092d2:	ee18 1a10 	vmov	r1, s16
 80092d6:	2201      	movs	r2, #1
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fea3 	bl	800a024 <__lshift>
 80092de:	4631      	mov	r1, r6
 80092e0:	ee08 0a10 	vmov	s16, r0
 80092e4:	f000 ff0e 	bl	800a104 <__mcmp>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dc03      	bgt.n	80092f4 <_dtoa_r+0xa9c>
 80092ec:	d1e0      	bne.n	80092b0 <_dtoa_r+0xa58>
 80092ee:	f01a 0f01 	tst.w	sl, #1
 80092f2:	d0dd      	beq.n	80092b0 <_dtoa_r+0xa58>
 80092f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80092f8:	d1d7      	bne.n	80092aa <_dtoa_r+0xa52>
 80092fa:	2339      	movs	r3, #57	; 0x39
 80092fc:	f88b 3000 	strb.w	r3, [fp]
 8009300:	462b      	mov	r3, r5
 8009302:	461d      	mov	r5, r3
 8009304:	3b01      	subs	r3, #1
 8009306:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800930a:	2a39      	cmp	r2, #57	; 0x39
 800930c:	d071      	beq.n	80093f2 <_dtoa_r+0xb9a>
 800930e:	3201      	adds	r2, #1
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e746      	b.n	80091a2 <_dtoa_r+0x94a>
 8009314:	2a00      	cmp	r2, #0
 8009316:	dd07      	ble.n	8009328 <_dtoa_r+0xad0>
 8009318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800931c:	d0ed      	beq.n	80092fa <_dtoa_r+0xaa2>
 800931e:	f10a 0301 	add.w	r3, sl, #1
 8009322:	f88b 3000 	strb.w	r3, [fp]
 8009326:	e73c      	b.n	80091a2 <_dtoa_r+0x94a>
 8009328:	9b05      	ldr	r3, [sp, #20]
 800932a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800932e:	4599      	cmp	r9, r3
 8009330:	d047      	beq.n	80093c2 <_dtoa_r+0xb6a>
 8009332:	ee18 1a10 	vmov	r1, s16
 8009336:	2300      	movs	r3, #0
 8009338:	220a      	movs	r2, #10
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fc78 	bl	8009c30 <__multadd>
 8009340:	45b8      	cmp	r8, r7
 8009342:	ee08 0a10 	vmov	s16, r0
 8009346:	f04f 0300 	mov.w	r3, #0
 800934a:	f04f 020a 	mov.w	r2, #10
 800934e:	4641      	mov	r1, r8
 8009350:	4620      	mov	r0, r4
 8009352:	d106      	bne.n	8009362 <_dtoa_r+0xb0a>
 8009354:	f000 fc6c 	bl	8009c30 <__multadd>
 8009358:	4680      	mov	r8, r0
 800935a:	4607      	mov	r7, r0
 800935c:	f109 0901 	add.w	r9, r9, #1
 8009360:	e772      	b.n	8009248 <_dtoa_r+0x9f0>
 8009362:	f000 fc65 	bl	8009c30 <__multadd>
 8009366:	4639      	mov	r1, r7
 8009368:	4680      	mov	r8, r0
 800936a:	2300      	movs	r3, #0
 800936c:	220a      	movs	r2, #10
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fc5e 	bl	8009c30 <__multadd>
 8009374:	4607      	mov	r7, r0
 8009376:	e7f1      	b.n	800935c <_dtoa_r+0xb04>
 8009378:	9b03      	ldr	r3, [sp, #12]
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	9d01      	ldr	r5, [sp, #4]
 800937e:	ee18 0a10 	vmov	r0, s16
 8009382:	4631      	mov	r1, r6
 8009384:	f7ff f9dc 	bl	8008740 <quorem>
 8009388:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	f805 ab01 	strb.w	sl, [r5], #1
 8009392:	1aea      	subs	r2, r5, r3
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	4293      	cmp	r3, r2
 8009398:	dd09      	ble.n	80093ae <_dtoa_r+0xb56>
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	2300      	movs	r3, #0
 80093a0:	220a      	movs	r2, #10
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fc44 	bl	8009c30 <__multadd>
 80093a8:	ee08 0a10 	vmov	s16, r0
 80093ac:	e7e7      	b.n	800937e <_dtoa_r+0xb26>
 80093ae:	9b02      	ldr	r3, [sp, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bfc8      	it	gt
 80093b4:	461d      	movgt	r5, r3
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	bfd8      	it	le
 80093ba:	2501      	movle	r5, #1
 80093bc:	441d      	add	r5, r3
 80093be:	f04f 0800 	mov.w	r8, #0
 80093c2:	ee18 1a10 	vmov	r1, s16
 80093c6:	2201      	movs	r2, #1
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 fe2b 	bl	800a024 <__lshift>
 80093ce:	4631      	mov	r1, r6
 80093d0:	ee08 0a10 	vmov	s16, r0
 80093d4:	f000 fe96 	bl	800a104 <__mcmp>
 80093d8:	2800      	cmp	r0, #0
 80093da:	dc91      	bgt.n	8009300 <_dtoa_r+0xaa8>
 80093dc:	d102      	bne.n	80093e4 <_dtoa_r+0xb8c>
 80093de:	f01a 0f01 	tst.w	sl, #1
 80093e2:	d18d      	bne.n	8009300 <_dtoa_r+0xaa8>
 80093e4:	462b      	mov	r3, r5
 80093e6:	461d      	mov	r5, r3
 80093e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ec:	2a30      	cmp	r2, #48	; 0x30
 80093ee:	d0fa      	beq.n	80093e6 <_dtoa_r+0xb8e>
 80093f0:	e6d7      	b.n	80091a2 <_dtoa_r+0x94a>
 80093f2:	9a01      	ldr	r2, [sp, #4]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d184      	bne.n	8009302 <_dtoa_r+0xaaa>
 80093f8:	9b00      	ldr	r3, [sp, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	2331      	movs	r3, #49	; 0x31
 8009400:	7013      	strb	r3, [r2, #0]
 8009402:	e6ce      	b.n	80091a2 <_dtoa_r+0x94a>
 8009404:	4b09      	ldr	r3, [pc, #36]	; (800942c <_dtoa_r+0xbd4>)
 8009406:	f7ff ba95 	b.w	8008934 <_dtoa_r+0xdc>
 800940a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800940c:	2b00      	cmp	r3, #0
 800940e:	f47f aa6e 	bne.w	80088ee <_dtoa_r+0x96>
 8009412:	4b07      	ldr	r3, [pc, #28]	; (8009430 <_dtoa_r+0xbd8>)
 8009414:	f7ff ba8e 	b.w	8008934 <_dtoa_r+0xdc>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dcae      	bgt.n	800937c <_dtoa_r+0xb24>
 800941e:	9b06      	ldr	r3, [sp, #24]
 8009420:	2b02      	cmp	r3, #2
 8009422:	f73f aea8 	bgt.w	8009176 <_dtoa_r+0x91e>
 8009426:	e7a9      	b.n	800937c <_dtoa_r+0xb24>
 8009428:	0800c548 	.word	0x0800c548
 800942c:	0800c348 	.word	0x0800c348
 8009430:	0800c4c9 	.word	0x0800c4c9

08009434 <rshift>:
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800943a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800943e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009442:	f100 0414 	add.w	r4, r0, #20
 8009446:	dd45      	ble.n	80094d4 <rshift+0xa0>
 8009448:	f011 011f 	ands.w	r1, r1, #31
 800944c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009450:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009454:	d10c      	bne.n	8009470 <rshift+0x3c>
 8009456:	f100 0710 	add.w	r7, r0, #16
 800945a:	4629      	mov	r1, r5
 800945c:	42b1      	cmp	r1, r6
 800945e:	d334      	bcc.n	80094ca <rshift+0x96>
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	1eea      	subs	r2, r5, #3
 8009466:	4296      	cmp	r6, r2
 8009468:	bf38      	it	cc
 800946a:	2300      	movcc	r3, #0
 800946c:	4423      	add	r3, r4
 800946e:	e015      	b.n	800949c <rshift+0x68>
 8009470:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009474:	f1c1 0820 	rsb	r8, r1, #32
 8009478:	40cf      	lsrs	r7, r1
 800947a:	f105 0e04 	add.w	lr, r5, #4
 800947e:	46a1      	mov	r9, r4
 8009480:	4576      	cmp	r6, lr
 8009482:	46f4      	mov	ip, lr
 8009484:	d815      	bhi.n	80094b2 <rshift+0x7e>
 8009486:	1a9a      	subs	r2, r3, r2
 8009488:	0092      	lsls	r2, r2, #2
 800948a:	3a04      	subs	r2, #4
 800948c:	3501      	adds	r5, #1
 800948e:	42ae      	cmp	r6, r5
 8009490:	bf38      	it	cc
 8009492:	2200      	movcc	r2, #0
 8009494:	18a3      	adds	r3, r4, r2
 8009496:	50a7      	str	r7, [r4, r2]
 8009498:	b107      	cbz	r7, 800949c <rshift+0x68>
 800949a:	3304      	adds	r3, #4
 800949c:	1b1a      	subs	r2, r3, r4
 800949e:	42a3      	cmp	r3, r4
 80094a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094a4:	bf08      	it	eq
 80094a6:	2300      	moveq	r3, #0
 80094a8:	6102      	str	r2, [r0, #16]
 80094aa:	bf08      	it	eq
 80094ac:	6143      	streq	r3, [r0, #20]
 80094ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094b2:	f8dc c000 	ldr.w	ip, [ip]
 80094b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80094ba:	ea4c 0707 	orr.w	r7, ip, r7
 80094be:	f849 7b04 	str.w	r7, [r9], #4
 80094c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094c6:	40cf      	lsrs	r7, r1
 80094c8:	e7da      	b.n	8009480 <rshift+0x4c>
 80094ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80094d2:	e7c3      	b.n	800945c <rshift+0x28>
 80094d4:	4623      	mov	r3, r4
 80094d6:	e7e1      	b.n	800949c <rshift+0x68>

080094d8 <__hexdig_fun>:
 80094d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094dc:	2b09      	cmp	r3, #9
 80094de:	d802      	bhi.n	80094e6 <__hexdig_fun+0xe>
 80094e0:	3820      	subs	r0, #32
 80094e2:	b2c0      	uxtb	r0, r0
 80094e4:	4770      	bx	lr
 80094e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d801      	bhi.n	80094f2 <__hexdig_fun+0x1a>
 80094ee:	3847      	subs	r0, #71	; 0x47
 80094f0:	e7f7      	b.n	80094e2 <__hexdig_fun+0xa>
 80094f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094f6:	2b05      	cmp	r3, #5
 80094f8:	d801      	bhi.n	80094fe <__hexdig_fun+0x26>
 80094fa:	3827      	subs	r0, #39	; 0x27
 80094fc:	e7f1      	b.n	80094e2 <__hexdig_fun+0xa>
 80094fe:	2000      	movs	r0, #0
 8009500:	4770      	bx	lr
	...

08009504 <__gethex>:
 8009504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	ed2d 8b02 	vpush	{d8}
 800950c:	b089      	sub	sp, #36	; 0x24
 800950e:	ee08 0a10 	vmov	s16, r0
 8009512:	9304      	str	r3, [sp, #16]
 8009514:	4bb4      	ldr	r3, [pc, #720]	; (80097e8 <__gethex+0x2e4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	4618      	mov	r0, r3
 800951c:	468b      	mov	fp, r1
 800951e:	4690      	mov	r8, r2
 8009520:	f7f6 fe5e 	bl	80001e0 <strlen>
 8009524:	9b01      	ldr	r3, [sp, #4]
 8009526:	f8db 2000 	ldr.w	r2, [fp]
 800952a:	4403      	add	r3, r0
 800952c:	4682      	mov	sl, r0
 800952e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009532:	9305      	str	r3, [sp, #20]
 8009534:	1c93      	adds	r3, r2, #2
 8009536:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800953a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800953e:	32fe      	adds	r2, #254	; 0xfe
 8009540:	18d1      	adds	r1, r2, r3
 8009542:	461f      	mov	r7, r3
 8009544:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009548:	9100      	str	r1, [sp, #0]
 800954a:	2830      	cmp	r0, #48	; 0x30
 800954c:	d0f8      	beq.n	8009540 <__gethex+0x3c>
 800954e:	f7ff ffc3 	bl	80094d8 <__hexdig_fun>
 8009552:	4604      	mov	r4, r0
 8009554:	2800      	cmp	r0, #0
 8009556:	d13a      	bne.n	80095ce <__gethex+0xca>
 8009558:	9901      	ldr	r1, [sp, #4]
 800955a:	4652      	mov	r2, sl
 800955c:	4638      	mov	r0, r7
 800955e:	f001 fa33 	bl	800a9c8 <strncmp>
 8009562:	4605      	mov	r5, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d168      	bne.n	800963a <__gethex+0x136>
 8009568:	f817 000a 	ldrb.w	r0, [r7, sl]
 800956c:	eb07 060a 	add.w	r6, r7, sl
 8009570:	f7ff ffb2 	bl	80094d8 <__hexdig_fun>
 8009574:	2800      	cmp	r0, #0
 8009576:	d062      	beq.n	800963e <__gethex+0x13a>
 8009578:	4633      	mov	r3, r6
 800957a:	7818      	ldrb	r0, [r3, #0]
 800957c:	2830      	cmp	r0, #48	; 0x30
 800957e:	461f      	mov	r7, r3
 8009580:	f103 0301 	add.w	r3, r3, #1
 8009584:	d0f9      	beq.n	800957a <__gethex+0x76>
 8009586:	f7ff ffa7 	bl	80094d8 <__hexdig_fun>
 800958a:	2301      	movs	r3, #1
 800958c:	fab0 f480 	clz	r4, r0
 8009590:	0964      	lsrs	r4, r4, #5
 8009592:	4635      	mov	r5, r6
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	463a      	mov	r2, r7
 8009598:	4616      	mov	r6, r2
 800959a:	3201      	adds	r2, #1
 800959c:	7830      	ldrb	r0, [r6, #0]
 800959e:	f7ff ff9b 	bl	80094d8 <__hexdig_fun>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	d1f8      	bne.n	8009598 <__gethex+0x94>
 80095a6:	9901      	ldr	r1, [sp, #4]
 80095a8:	4652      	mov	r2, sl
 80095aa:	4630      	mov	r0, r6
 80095ac:	f001 fa0c 	bl	800a9c8 <strncmp>
 80095b0:	b980      	cbnz	r0, 80095d4 <__gethex+0xd0>
 80095b2:	b94d      	cbnz	r5, 80095c8 <__gethex+0xc4>
 80095b4:	eb06 050a 	add.w	r5, r6, sl
 80095b8:	462a      	mov	r2, r5
 80095ba:	4616      	mov	r6, r2
 80095bc:	3201      	adds	r2, #1
 80095be:	7830      	ldrb	r0, [r6, #0]
 80095c0:	f7ff ff8a 	bl	80094d8 <__hexdig_fun>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1f8      	bne.n	80095ba <__gethex+0xb6>
 80095c8:	1bad      	subs	r5, r5, r6
 80095ca:	00ad      	lsls	r5, r5, #2
 80095cc:	e004      	b.n	80095d8 <__gethex+0xd4>
 80095ce:	2400      	movs	r4, #0
 80095d0:	4625      	mov	r5, r4
 80095d2:	e7e0      	b.n	8009596 <__gethex+0x92>
 80095d4:	2d00      	cmp	r5, #0
 80095d6:	d1f7      	bne.n	80095c8 <__gethex+0xc4>
 80095d8:	7833      	ldrb	r3, [r6, #0]
 80095da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095de:	2b50      	cmp	r3, #80	; 0x50
 80095e0:	d13b      	bne.n	800965a <__gethex+0x156>
 80095e2:	7873      	ldrb	r3, [r6, #1]
 80095e4:	2b2b      	cmp	r3, #43	; 0x2b
 80095e6:	d02c      	beq.n	8009642 <__gethex+0x13e>
 80095e8:	2b2d      	cmp	r3, #45	; 0x2d
 80095ea:	d02e      	beq.n	800964a <__gethex+0x146>
 80095ec:	1c71      	adds	r1, r6, #1
 80095ee:	f04f 0900 	mov.w	r9, #0
 80095f2:	7808      	ldrb	r0, [r1, #0]
 80095f4:	f7ff ff70 	bl	80094d8 <__hexdig_fun>
 80095f8:	1e43      	subs	r3, r0, #1
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b18      	cmp	r3, #24
 80095fe:	d82c      	bhi.n	800965a <__gethex+0x156>
 8009600:	f1a0 0210 	sub.w	r2, r0, #16
 8009604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009608:	f7ff ff66 	bl	80094d8 <__hexdig_fun>
 800960c:	1e43      	subs	r3, r0, #1
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b18      	cmp	r3, #24
 8009612:	d91d      	bls.n	8009650 <__gethex+0x14c>
 8009614:	f1b9 0f00 	cmp.w	r9, #0
 8009618:	d000      	beq.n	800961c <__gethex+0x118>
 800961a:	4252      	negs	r2, r2
 800961c:	4415      	add	r5, r2
 800961e:	f8cb 1000 	str.w	r1, [fp]
 8009622:	b1e4      	cbz	r4, 800965e <__gethex+0x15a>
 8009624:	9b00      	ldr	r3, [sp, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	bf14      	ite	ne
 800962a:	2700      	movne	r7, #0
 800962c:	2706      	moveq	r7, #6
 800962e:	4638      	mov	r0, r7
 8009630:	b009      	add	sp, #36	; 0x24
 8009632:	ecbd 8b02 	vpop	{d8}
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	463e      	mov	r6, r7
 800963c:	4625      	mov	r5, r4
 800963e:	2401      	movs	r4, #1
 8009640:	e7ca      	b.n	80095d8 <__gethex+0xd4>
 8009642:	f04f 0900 	mov.w	r9, #0
 8009646:	1cb1      	adds	r1, r6, #2
 8009648:	e7d3      	b.n	80095f2 <__gethex+0xee>
 800964a:	f04f 0901 	mov.w	r9, #1
 800964e:	e7fa      	b.n	8009646 <__gethex+0x142>
 8009650:	230a      	movs	r3, #10
 8009652:	fb03 0202 	mla	r2, r3, r2, r0
 8009656:	3a10      	subs	r2, #16
 8009658:	e7d4      	b.n	8009604 <__gethex+0x100>
 800965a:	4631      	mov	r1, r6
 800965c:	e7df      	b.n	800961e <__gethex+0x11a>
 800965e:	1bf3      	subs	r3, r6, r7
 8009660:	3b01      	subs	r3, #1
 8009662:	4621      	mov	r1, r4
 8009664:	2b07      	cmp	r3, #7
 8009666:	dc0b      	bgt.n	8009680 <__gethex+0x17c>
 8009668:	ee18 0a10 	vmov	r0, s16
 800966c:	f000 fa7e 	bl	8009b6c <_Balloc>
 8009670:	4604      	mov	r4, r0
 8009672:	b940      	cbnz	r0, 8009686 <__gethex+0x182>
 8009674:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <__gethex+0x2e8>)
 8009676:	4602      	mov	r2, r0
 8009678:	21de      	movs	r1, #222	; 0xde
 800967a:	485d      	ldr	r0, [pc, #372]	; (80097f0 <__gethex+0x2ec>)
 800967c:	f001 f9c6 	bl	800aa0c <__assert_func>
 8009680:	3101      	adds	r1, #1
 8009682:	105b      	asrs	r3, r3, #1
 8009684:	e7ee      	b.n	8009664 <__gethex+0x160>
 8009686:	f100 0914 	add.w	r9, r0, #20
 800968a:	f04f 0b00 	mov.w	fp, #0
 800968e:	f1ca 0301 	rsb	r3, sl, #1
 8009692:	f8cd 9008 	str.w	r9, [sp, #8]
 8009696:	f8cd b000 	str.w	fp, [sp]
 800969a:	9306      	str	r3, [sp, #24]
 800969c:	42b7      	cmp	r7, r6
 800969e:	d340      	bcc.n	8009722 <__gethex+0x21e>
 80096a0:	9802      	ldr	r0, [sp, #8]
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	f840 3b04 	str.w	r3, [r0], #4
 80096a8:	eba0 0009 	sub.w	r0, r0, r9
 80096ac:	1080      	asrs	r0, r0, #2
 80096ae:	0146      	lsls	r6, r0, #5
 80096b0:	6120      	str	r0, [r4, #16]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fb4c 	bl	8009d50 <__hi0bits>
 80096b8:	1a30      	subs	r0, r6, r0
 80096ba:	f8d8 6000 	ldr.w	r6, [r8]
 80096be:	42b0      	cmp	r0, r6
 80096c0:	dd63      	ble.n	800978a <__gethex+0x286>
 80096c2:	1b87      	subs	r7, r0, r6
 80096c4:	4639      	mov	r1, r7
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 fef0 	bl	800a4ac <__any_on>
 80096cc:	4682      	mov	sl, r0
 80096ce:	b1a8      	cbz	r0, 80096fc <__gethex+0x1f8>
 80096d0:	1e7b      	subs	r3, r7, #1
 80096d2:	1159      	asrs	r1, r3, #5
 80096d4:	f003 021f 	and.w	r2, r3, #31
 80096d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80096dc:	f04f 0a01 	mov.w	sl, #1
 80096e0:	fa0a f202 	lsl.w	r2, sl, r2
 80096e4:	420a      	tst	r2, r1
 80096e6:	d009      	beq.n	80096fc <__gethex+0x1f8>
 80096e8:	4553      	cmp	r3, sl
 80096ea:	dd05      	ble.n	80096f8 <__gethex+0x1f4>
 80096ec:	1eb9      	subs	r1, r7, #2
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 fedc 	bl	800a4ac <__any_on>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d145      	bne.n	8009784 <__gethex+0x280>
 80096f8:	f04f 0a02 	mov.w	sl, #2
 80096fc:	4639      	mov	r1, r7
 80096fe:	4620      	mov	r0, r4
 8009700:	f7ff fe98 	bl	8009434 <rshift>
 8009704:	443d      	add	r5, r7
 8009706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800970a:	42ab      	cmp	r3, r5
 800970c:	da4c      	bge.n	80097a8 <__gethex+0x2a4>
 800970e:	ee18 0a10 	vmov	r0, s16
 8009712:	4621      	mov	r1, r4
 8009714:	f000 fa6a 	bl	8009bec <_Bfree>
 8009718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800971a:	2300      	movs	r3, #0
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	27a3      	movs	r7, #163	; 0xa3
 8009720:	e785      	b.n	800962e <__gethex+0x12a>
 8009722:	1e73      	subs	r3, r6, #1
 8009724:	9a05      	ldr	r2, [sp, #20]
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800972c:	4293      	cmp	r3, r2
 800972e:	d019      	beq.n	8009764 <__gethex+0x260>
 8009730:	f1bb 0f20 	cmp.w	fp, #32
 8009734:	d107      	bne.n	8009746 <__gethex+0x242>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	9a00      	ldr	r2, [sp, #0]
 800973a:	f843 2b04 	str.w	r2, [r3], #4
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	2300      	movs	r3, #0
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	469b      	mov	fp, r3
 8009746:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800974a:	f7ff fec5 	bl	80094d8 <__hexdig_fun>
 800974e:	9b00      	ldr	r3, [sp, #0]
 8009750:	f000 000f 	and.w	r0, r0, #15
 8009754:	fa00 f00b 	lsl.w	r0, r0, fp
 8009758:	4303      	orrs	r3, r0
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	f10b 0b04 	add.w	fp, fp, #4
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	e00d      	b.n	8009780 <__gethex+0x27c>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	9a06      	ldr	r2, [sp, #24]
 8009768:	4413      	add	r3, r2
 800976a:	42bb      	cmp	r3, r7
 800976c:	d3e0      	bcc.n	8009730 <__gethex+0x22c>
 800976e:	4618      	mov	r0, r3
 8009770:	9901      	ldr	r1, [sp, #4]
 8009772:	9307      	str	r3, [sp, #28]
 8009774:	4652      	mov	r2, sl
 8009776:	f001 f927 	bl	800a9c8 <strncmp>
 800977a:	9b07      	ldr	r3, [sp, #28]
 800977c:	2800      	cmp	r0, #0
 800977e:	d1d7      	bne.n	8009730 <__gethex+0x22c>
 8009780:	461e      	mov	r6, r3
 8009782:	e78b      	b.n	800969c <__gethex+0x198>
 8009784:	f04f 0a03 	mov.w	sl, #3
 8009788:	e7b8      	b.n	80096fc <__gethex+0x1f8>
 800978a:	da0a      	bge.n	80097a2 <__gethex+0x29e>
 800978c:	1a37      	subs	r7, r6, r0
 800978e:	4621      	mov	r1, r4
 8009790:	ee18 0a10 	vmov	r0, s16
 8009794:	463a      	mov	r2, r7
 8009796:	f000 fc45 	bl	800a024 <__lshift>
 800979a:	1bed      	subs	r5, r5, r7
 800979c:	4604      	mov	r4, r0
 800979e:	f100 0914 	add.w	r9, r0, #20
 80097a2:	f04f 0a00 	mov.w	sl, #0
 80097a6:	e7ae      	b.n	8009706 <__gethex+0x202>
 80097a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80097ac:	42a8      	cmp	r0, r5
 80097ae:	dd72      	ble.n	8009896 <__gethex+0x392>
 80097b0:	1b45      	subs	r5, r0, r5
 80097b2:	42ae      	cmp	r6, r5
 80097b4:	dc36      	bgt.n	8009824 <__gethex+0x320>
 80097b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d02a      	beq.n	8009814 <__gethex+0x310>
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d02c      	beq.n	800981c <__gethex+0x318>
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d11c      	bne.n	8009800 <__gethex+0x2fc>
 80097c6:	42ae      	cmp	r6, r5
 80097c8:	d11a      	bne.n	8009800 <__gethex+0x2fc>
 80097ca:	2e01      	cmp	r6, #1
 80097cc:	d112      	bne.n	80097f4 <__gethex+0x2f0>
 80097ce:	9a04      	ldr	r2, [sp, #16]
 80097d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	2301      	movs	r3, #1
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	f8c9 3000 	str.w	r3, [r9]
 80097de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097e0:	2762      	movs	r7, #98	; 0x62
 80097e2:	601c      	str	r4, [r3, #0]
 80097e4:	e723      	b.n	800962e <__gethex+0x12a>
 80097e6:	bf00      	nop
 80097e8:	0800c5c0 	.word	0x0800c5c0
 80097ec:	0800c548 	.word	0x0800c548
 80097f0:	0800c559 	.word	0x0800c559
 80097f4:	1e71      	subs	r1, r6, #1
 80097f6:	4620      	mov	r0, r4
 80097f8:	f000 fe58 	bl	800a4ac <__any_on>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d1e6      	bne.n	80097ce <__gethex+0x2ca>
 8009800:	ee18 0a10 	vmov	r0, s16
 8009804:	4621      	mov	r1, r4
 8009806:	f000 f9f1 	bl	8009bec <_Bfree>
 800980a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800980c:	2300      	movs	r3, #0
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	2750      	movs	r7, #80	; 0x50
 8009812:	e70c      	b.n	800962e <__gethex+0x12a>
 8009814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1f2      	bne.n	8009800 <__gethex+0x2fc>
 800981a:	e7d8      	b.n	80097ce <__gethex+0x2ca>
 800981c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1d5      	bne.n	80097ce <__gethex+0x2ca>
 8009822:	e7ed      	b.n	8009800 <__gethex+0x2fc>
 8009824:	1e6f      	subs	r7, r5, #1
 8009826:	f1ba 0f00 	cmp.w	sl, #0
 800982a:	d131      	bne.n	8009890 <__gethex+0x38c>
 800982c:	b127      	cbz	r7, 8009838 <__gethex+0x334>
 800982e:	4639      	mov	r1, r7
 8009830:	4620      	mov	r0, r4
 8009832:	f000 fe3b 	bl	800a4ac <__any_on>
 8009836:	4682      	mov	sl, r0
 8009838:	117b      	asrs	r3, r7, #5
 800983a:	2101      	movs	r1, #1
 800983c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009840:	f007 071f 	and.w	r7, r7, #31
 8009844:	fa01 f707 	lsl.w	r7, r1, r7
 8009848:	421f      	tst	r7, r3
 800984a:	4629      	mov	r1, r5
 800984c:	4620      	mov	r0, r4
 800984e:	bf18      	it	ne
 8009850:	f04a 0a02 	orrne.w	sl, sl, #2
 8009854:	1b76      	subs	r6, r6, r5
 8009856:	f7ff fded 	bl	8009434 <rshift>
 800985a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800985e:	2702      	movs	r7, #2
 8009860:	f1ba 0f00 	cmp.w	sl, #0
 8009864:	d048      	beq.n	80098f8 <__gethex+0x3f4>
 8009866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d015      	beq.n	800989a <__gethex+0x396>
 800986e:	2b03      	cmp	r3, #3
 8009870:	d017      	beq.n	80098a2 <__gethex+0x39e>
 8009872:	2b01      	cmp	r3, #1
 8009874:	d109      	bne.n	800988a <__gethex+0x386>
 8009876:	f01a 0f02 	tst.w	sl, #2
 800987a:	d006      	beq.n	800988a <__gethex+0x386>
 800987c:	f8d9 0000 	ldr.w	r0, [r9]
 8009880:	ea4a 0a00 	orr.w	sl, sl, r0
 8009884:	f01a 0f01 	tst.w	sl, #1
 8009888:	d10e      	bne.n	80098a8 <__gethex+0x3a4>
 800988a:	f047 0710 	orr.w	r7, r7, #16
 800988e:	e033      	b.n	80098f8 <__gethex+0x3f4>
 8009890:	f04f 0a01 	mov.w	sl, #1
 8009894:	e7d0      	b.n	8009838 <__gethex+0x334>
 8009896:	2701      	movs	r7, #1
 8009898:	e7e2      	b.n	8009860 <__gethex+0x35c>
 800989a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800989c:	f1c3 0301 	rsb	r3, r3, #1
 80098a0:	9315      	str	r3, [sp, #84]	; 0x54
 80098a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0f0      	beq.n	800988a <__gethex+0x386>
 80098a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098ac:	f104 0314 	add.w	r3, r4, #20
 80098b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098b8:	f04f 0c00 	mov.w	ip, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098c6:	d01c      	beq.n	8009902 <__gethex+0x3fe>
 80098c8:	3201      	adds	r2, #1
 80098ca:	6002      	str	r2, [r0, #0]
 80098cc:	2f02      	cmp	r7, #2
 80098ce:	f104 0314 	add.w	r3, r4, #20
 80098d2:	d13f      	bne.n	8009954 <__gethex+0x450>
 80098d4:	f8d8 2000 	ldr.w	r2, [r8]
 80098d8:	3a01      	subs	r2, #1
 80098da:	42b2      	cmp	r2, r6
 80098dc:	d10a      	bne.n	80098f4 <__gethex+0x3f0>
 80098de:	1171      	asrs	r1, r6, #5
 80098e0:	2201      	movs	r2, #1
 80098e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098e6:	f006 061f 	and.w	r6, r6, #31
 80098ea:	fa02 f606 	lsl.w	r6, r2, r6
 80098ee:	421e      	tst	r6, r3
 80098f0:	bf18      	it	ne
 80098f2:	4617      	movne	r7, r2
 80098f4:	f047 0720 	orr.w	r7, r7, #32
 80098f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80098fa:	601c      	str	r4, [r3, #0]
 80098fc:	9b04      	ldr	r3, [sp, #16]
 80098fe:	601d      	str	r5, [r3, #0]
 8009900:	e695      	b.n	800962e <__gethex+0x12a>
 8009902:	4299      	cmp	r1, r3
 8009904:	f843 cc04 	str.w	ip, [r3, #-4]
 8009908:	d8d8      	bhi.n	80098bc <__gethex+0x3b8>
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	459b      	cmp	fp, r3
 800990e:	db19      	blt.n	8009944 <__gethex+0x440>
 8009910:	6861      	ldr	r1, [r4, #4]
 8009912:	ee18 0a10 	vmov	r0, s16
 8009916:	3101      	adds	r1, #1
 8009918:	f000 f928 	bl	8009b6c <_Balloc>
 800991c:	4681      	mov	r9, r0
 800991e:	b918      	cbnz	r0, 8009928 <__gethex+0x424>
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <__gethex+0x488>)
 8009922:	4602      	mov	r2, r0
 8009924:	2184      	movs	r1, #132	; 0x84
 8009926:	e6a8      	b.n	800967a <__gethex+0x176>
 8009928:	6922      	ldr	r2, [r4, #16]
 800992a:	3202      	adds	r2, #2
 800992c:	f104 010c 	add.w	r1, r4, #12
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	300c      	adds	r0, #12
 8009934:	f000 f90c 	bl	8009b50 <memcpy>
 8009938:	4621      	mov	r1, r4
 800993a:	ee18 0a10 	vmov	r0, s16
 800993e:	f000 f955 	bl	8009bec <_Bfree>
 8009942:	464c      	mov	r4, r9
 8009944:	6923      	ldr	r3, [r4, #16]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800994c:	6122      	str	r2, [r4, #16]
 800994e:	2201      	movs	r2, #1
 8009950:	615a      	str	r2, [r3, #20]
 8009952:	e7bb      	b.n	80098cc <__gethex+0x3c8>
 8009954:	6922      	ldr	r2, [r4, #16]
 8009956:	455a      	cmp	r2, fp
 8009958:	dd0b      	ble.n	8009972 <__gethex+0x46e>
 800995a:	2101      	movs	r1, #1
 800995c:	4620      	mov	r0, r4
 800995e:	f7ff fd69 	bl	8009434 <rshift>
 8009962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009966:	3501      	adds	r5, #1
 8009968:	42ab      	cmp	r3, r5
 800996a:	f6ff aed0 	blt.w	800970e <__gethex+0x20a>
 800996e:	2701      	movs	r7, #1
 8009970:	e7c0      	b.n	80098f4 <__gethex+0x3f0>
 8009972:	f016 061f 	ands.w	r6, r6, #31
 8009976:	d0fa      	beq.n	800996e <__gethex+0x46a>
 8009978:	4453      	add	r3, sl
 800997a:	f1c6 0620 	rsb	r6, r6, #32
 800997e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009982:	f000 f9e5 	bl	8009d50 <__hi0bits>
 8009986:	42b0      	cmp	r0, r6
 8009988:	dbe7      	blt.n	800995a <__gethex+0x456>
 800998a:	e7f0      	b.n	800996e <__gethex+0x46a>
 800998c:	0800c548 	.word	0x0800c548

08009990 <L_shift>:
 8009990:	f1c2 0208 	rsb	r2, r2, #8
 8009994:	0092      	lsls	r2, r2, #2
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	f1c2 0620 	rsb	r6, r2, #32
 800999c:	6843      	ldr	r3, [r0, #4]
 800999e:	6804      	ldr	r4, [r0, #0]
 80099a0:	fa03 f506 	lsl.w	r5, r3, r6
 80099a4:	432c      	orrs	r4, r5
 80099a6:	40d3      	lsrs	r3, r2
 80099a8:	6004      	str	r4, [r0, #0]
 80099aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80099ae:	4288      	cmp	r0, r1
 80099b0:	d3f4      	bcc.n	800999c <L_shift+0xc>
 80099b2:	bd70      	pop	{r4, r5, r6, pc}

080099b4 <__match>:
 80099b4:	b530      	push	{r4, r5, lr}
 80099b6:	6803      	ldr	r3, [r0, #0]
 80099b8:	3301      	adds	r3, #1
 80099ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099be:	b914      	cbnz	r4, 80099c6 <__match+0x12>
 80099c0:	6003      	str	r3, [r0, #0]
 80099c2:	2001      	movs	r0, #1
 80099c4:	bd30      	pop	{r4, r5, pc}
 80099c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80099ce:	2d19      	cmp	r5, #25
 80099d0:	bf98      	it	ls
 80099d2:	3220      	addls	r2, #32
 80099d4:	42a2      	cmp	r2, r4
 80099d6:	d0f0      	beq.n	80099ba <__match+0x6>
 80099d8:	2000      	movs	r0, #0
 80099da:	e7f3      	b.n	80099c4 <__match+0x10>

080099dc <__hexnan>:
 80099dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	680b      	ldr	r3, [r1, #0]
 80099e2:	115e      	asrs	r6, r3, #5
 80099e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099e8:	f013 031f 	ands.w	r3, r3, #31
 80099ec:	b087      	sub	sp, #28
 80099ee:	bf18      	it	ne
 80099f0:	3604      	addne	r6, #4
 80099f2:	2500      	movs	r5, #0
 80099f4:	1f37      	subs	r7, r6, #4
 80099f6:	4690      	mov	r8, r2
 80099f8:	6802      	ldr	r2, [r0, #0]
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	4682      	mov	sl, r0
 80099fe:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a02:	46b9      	mov	r9, r7
 8009a04:	463c      	mov	r4, r7
 8009a06:	9502      	str	r5, [sp, #8]
 8009a08:	46ab      	mov	fp, r5
 8009a0a:	7851      	ldrb	r1, [r2, #1]
 8009a0c:	1c53      	adds	r3, r2, #1
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	b341      	cbz	r1, 8009a64 <__hexnan+0x88>
 8009a12:	4608      	mov	r0, r1
 8009a14:	9205      	str	r2, [sp, #20]
 8009a16:	9104      	str	r1, [sp, #16]
 8009a18:	f7ff fd5e 	bl	80094d8 <__hexdig_fun>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d14f      	bne.n	8009ac0 <__hexnan+0xe4>
 8009a20:	9904      	ldr	r1, [sp, #16]
 8009a22:	9a05      	ldr	r2, [sp, #20]
 8009a24:	2920      	cmp	r1, #32
 8009a26:	d818      	bhi.n	8009a5a <__hexnan+0x7e>
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	459b      	cmp	fp, r3
 8009a2c:	dd13      	ble.n	8009a56 <__hexnan+0x7a>
 8009a2e:	454c      	cmp	r4, r9
 8009a30:	d206      	bcs.n	8009a40 <__hexnan+0x64>
 8009a32:	2d07      	cmp	r5, #7
 8009a34:	dc04      	bgt.n	8009a40 <__hexnan+0x64>
 8009a36:	462a      	mov	r2, r5
 8009a38:	4649      	mov	r1, r9
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f7ff ffa8 	bl	8009990 <L_shift>
 8009a40:	4544      	cmp	r4, r8
 8009a42:	d950      	bls.n	8009ae6 <__hexnan+0x10a>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f1a4 0904 	sub.w	r9, r4, #4
 8009a4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a4e:	f8cd b008 	str.w	fp, [sp, #8]
 8009a52:	464c      	mov	r4, r9
 8009a54:	461d      	mov	r5, r3
 8009a56:	9a03      	ldr	r2, [sp, #12]
 8009a58:	e7d7      	b.n	8009a0a <__hexnan+0x2e>
 8009a5a:	2929      	cmp	r1, #41	; 0x29
 8009a5c:	d156      	bne.n	8009b0c <__hexnan+0x130>
 8009a5e:	3202      	adds	r2, #2
 8009a60:	f8ca 2000 	str.w	r2, [sl]
 8009a64:	f1bb 0f00 	cmp.w	fp, #0
 8009a68:	d050      	beq.n	8009b0c <__hexnan+0x130>
 8009a6a:	454c      	cmp	r4, r9
 8009a6c:	d206      	bcs.n	8009a7c <__hexnan+0xa0>
 8009a6e:	2d07      	cmp	r5, #7
 8009a70:	dc04      	bgt.n	8009a7c <__hexnan+0xa0>
 8009a72:	462a      	mov	r2, r5
 8009a74:	4649      	mov	r1, r9
 8009a76:	4620      	mov	r0, r4
 8009a78:	f7ff ff8a 	bl	8009990 <L_shift>
 8009a7c:	4544      	cmp	r4, r8
 8009a7e:	d934      	bls.n	8009aea <__hexnan+0x10e>
 8009a80:	f1a8 0204 	sub.w	r2, r8, #4
 8009a84:	4623      	mov	r3, r4
 8009a86:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a8e:	429f      	cmp	r7, r3
 8009a90:	d2f9      	bcs.n	8009a86 <__hexnan+0xaa>
 8009a92:	1b3b      	subs	r3, r7, r4
 8009a94:	f023 0303 	bic.w	r3, r3, #3
 8009a98:	3304      	adds	r3, #4
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	3e03      	subs	r6, #3
 8009a9e:	42b4      	cmp	r4, r6
 8009aa0:	bf88      	it	hi
 8009aa2:	2304      	movhi	r3, #4
 8009aa4:	4443      	add	r3, r8
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f843 2b04 	str.w	r2, [r3], #4
 8009aac:	429f      	cmp	r7, r3
 8009aae:	d2fb      	bcs.n	8009aa8 <__hexnan+0xcc>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	b91b      	cbnz	r3, 8009abc <__hexnan+0xe0>
 8009ab4:	4547      	cmp	r7, r8
 8009ab6:	d127      	bne.n	8009b08 <__hexnan+0x12c>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	2005      	movs	r0, #5
 8009abe:	e026      	b.n	8009b0e <__hexnan+0x132>
 8009ac0:	3501      	adds	r5, #1
 8009ac2:	2d08      	cmp	r5, #8
 8009ac4:	f10b 0b01 	add.w	fp, fp, #1
 8009ac8:	dd06      	ble.n	8009ad8 <__hexnan+0xfc>
 8009aca:	4544      	cmp	r4, r8
 8009acc:	d9c3      	bls.n	8009a56 <__hexnan+0x7a>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	3c04      	subs	r4, #4
 8009ad8:	6822      	ldr	r2, [r4, #0]
 8009ada:	f000 000f 	and.w	r0, r0, #15
 8009ade:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009ae2:	6022      	str	r2, [r4, #0]
 8009ae4:	e7b7      	b.n	8009a56 <__hexnan+0x7a>
 8009ae6:	2508      	movs	r5, #8
 8009ae8:	e7b5      	b.n	8009a56 <__hexnan+0x7a>
 8009aea:	9b01      	ldr	r3, [sp, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0df      	beq.n	8009ab0 <__hexnan+0xd4>
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	f1c3 0320 	rsb	r3, r3, #32
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
 8009afc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b00:	401a      	ands	r2, r3
 8009b02:	f846 2c04 	str.w	r2, [r6, #-4]
 8009b06:	e7d3      	b.n	8009ab0 <__hexnan+0xd4>
 8009b08:	3f04      	subs	r7, #4
 8009b0a:	e7d1      	b.n	8009ab0 <__hexnan+0xd4>
 8009b0c:	2004      	movs	r0, #4
 8009b0e:	b007      	add	sp, #28
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b14 <_localeconv_r>:
 8009b14:	4800      	ldr	r0, [pc, #0]	; (8009b18 <_localeconv_r+0x4>)
 8009b16:	4770      	bx	lr
 8009b18:	20000184 	.word	0x20000184

08009b1c <malloc>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <malloc+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f000 bd67 	b.w	800a5f4 <_malloc_r>
 8009b26:	bf00      	nop
 8009b28:	2000002c 	.word	0x2000002c

08009b2c <__ascii_mbtowc>:
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	b901      	cbnz	r1, 8009b32 <__ascii_mbtowc+0x6>
 8009b30:	a901      	add	r1, sp, #4
 8009b32:	b142      	cbz	r2, 8009b46 <__ascii_mbtowc+0x1a>
 8009b34:	b14b      	cbz	r3, 8009b4a <__ascii_mbtowc+0x1e>
 8009b36:	7813      	ldrb	r3, [r2, #0]
 8009b38:	600b      	str	r3, [r1, #0]
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	1e10      	subs	r0, r2, #0
 8009b3e:	bf18      	it	ne
 8009b40:	2001      	movne	r0, #1
 8009b42:	b002      	add	sp, #8
 8009b44:	4770      	bx	lr
 8009b46:	4610      	mov	r0, r2
 8009b48:	e7fb      	b.n	8009b42 <__ascii_mbtowc+0x16>
 8009b4a:	f06f 0001 	mvn.w	r0, #1
 8009b4e:	e7f8      	b.n	8009b42 <__ascii_mbtowc+0x16>

08009b50 <memcpy>:
 8009b50:	440a      	add	r2, r1
 8009b52:	4291      	cmp	r1, r2
 8009b54:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b58:	d100      	bne.n	8009b5c <memcpy+0xc>
 8009b5a:	4770      	bx	lr
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b66:	4291      	cmp	r1, r2
 8009b68:	d1f9      	bne.n	8009b5e <memcpy+0xe>
 8009b6a:	bd10      	pop	{r4, pc}

08009b6c <_Balloc>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	b976      	cbnz	r6, 8009b94 <_Balloc+0x28>
 8009b76:	2010      	movs	r0, #16
 8009b78:	f7ff ffd0 	bl	8009b1c <malloc>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	6260      	str	r0, [r4, #36]	; 0x24
 8009b80:	b920      	cbnz	r0, 8009b8c <_Balloc+0x20>
 8009b82:	4b18      	ldr	r3, [pc, #96]	; (8009be4 <_Balloc+0x78>)
 8009b84:	4818      	ldr	r0, [pc, #96]	; (8009be8 <_Balloc+0x7c>)
 8009b86:	2166      	movs	r1, #102	; 0x66
 8009b88:	f000 ff40 	bl	800aa0c <__assert_func>
 8009b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b90:	6006      	str	r6, [r0, #0]
 8009b92:	60c6      	str	r6, [r0, #12]
 8009b94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b96:	68f3      	ldr	r3, [r6, #12]
 8009b98:	b183      	cbz	r3, 8009bbc <_Balloc+0x50>
 8009b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ba2:	b9b8      	cbnz	r0, 8009bd4 <_Balloc+0x68>
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	fa01 f605 	lsl.w	r6, r1, r5
 8009baa:	1d72      	adds	r2, r6, #5
 8009bac:	0092      	lsls	r2, r2, #2
 8009bae:	4620      	mov	r0, r4
 8009bb0:	f000 fc9d 	bl	800a4ee <_calloc_r>
 8009bb4:	b160      	cbz	r0, 8009bd0 <_Balloc+0x64>
 8009bb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bba:	e00e      	b.n	8009bda <_Balloc+0x6e>
 8009bbc:	2221      	movs	r2, #33	; 0x21
 8009bbe:	2104      	movs	r1, #4
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 fc94 	bl	800a4ee <_calloc_r>
 8009bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc8:	60f0      	str	r0, [r6, #12]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e4      	bne.n	8009b9a <_Balloc+0x2e>
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	bd70      	pop	{r4, r5, r6, pc}
 8009bd4:	6802      	ldr	r2, [r0, #0]
 8009bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009be0:	e7f7      	b.n	8009bd2 <_Balloc+0x66>
 8009be2:	bf00      	nop
 8009be4:	0800c4d6 	.word	0x0800c4d6
 8009be8:	0800c5d4 	.word	0x0800c5d4

08009bec <_Bfree>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	b976      	cbnz	r6, 8009c14 <_Bfree+0x28>
 8009bf6:	2010      	movs	r0, #16
 8009bf8:	f7ff ff90 	bl	8009b1c <malloc>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	6268      	str	r0, [r5, #36]	; 0x24
 8009c00:	b920      	cbnz	r0, 8009c0c <_Bfree+0x20>
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <_Bfree+0x3c>)
 8009c04:	4809      	ldr	r0, [pc, #36]	; (8009c2c <_Bfree+0x40>)
 8009c06:	218a      	movs	r1, #138	; 0x8a
 8009c08:	f000 ff00 	bl	800aa0c <__assert_func>
 8009c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c10:	6006      	str	r6, [r0, #0]
 8009c12:	60c6      	str	r6, [r0, #12]
 8009c14:	b13c      	cbz	r4, 8009c26 <_Bfree+0x3a>
 8009c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c20:	6021      	str	r1, [r4, #0]
 8009c22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	0800c4d6 	.word	0x0800c4d6
 8009c2c:	0800c5d4 	.word	0x0800c5d4

08009c30 <__multadd>:
 8009c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c34:	690d      	ldr	r5, [r1, #16]
 8009c36:	4607      	mov	r7, r0
 8009c38:	460c      	mov	r4, r1
 8009c3a:	461e      	mov	r6, r3
 8009c3c:	f101 0c14 	add.w	ip, r1, #20
 8009c40:	2000      	movs	r0, #0
 8009c42:	f8dc 3000 	ldr.w	r3, [ip]
 8009c46:	b299      	uxth	r1, r3
 8009c48:	fb02 6101 	mla	r1, r2, r1, r6
 8009c4c:	0c1e      	lsrs	r6, r3, #16
 8009c4e:	0c0b      	lsrs	r3, r1, #16
 8009c50:	fb02 3306 	mla	r3, r2, r6, r3
 8009c54:	b289      	uxth	r1, r1
 8009c56:	3001      	adds	r0, #1
 8009c58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c5c:	4285      	cmp	r5, r0
 8009c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8009c62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c66:	dcec      	bgt.n	8009c42 <__multadd+0x12>
 8009c68:	b30e      	cbz	r6, 8009cae <__multadd+0x7e>
 8009c6a:	68a3      	ldr	r3, [r4, #8]
 8009c6c:	42ab      	cmp	r3, r5
 8009c6e:	dc19      	bgt.n	8009ca4 <__multadd+0x74>
 8009c70:	6861      	ldr	r1, [r4, #4]
 8009c72:	4638      	mov	r0, r7
 8009c74:	3101      	adds	r1, #1
 8009c76:	f7ff ff79 	bl	8009b6c <_Balloc>
 8009c7a:	4680      	mov	r8, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <__multadd+0x5a>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b0c      	ldr	r3, [pc, #48]	; (8009cb4 <__multadd+0x84>)
 8009c82:	480d      	ldr	r0, [pc, #52]	; (8009cb8 <__multadd+0x88>)
 8009c84:	21b5      	movs	r1, #181	; 0xb5
 8009c86:	f000 fec1 	bl	800aa0c <__assert_func>
 8009c8a:	6922      	ldr	r2, [r4, #16]
 8009c8c:	3202      	adds	r2, #2
 8009c8e:	f104 010c 	add.w	r1, r4, #12
 8009c92:	0092      	lsls	r2, r2, #2
 8009c94:	300c      	adds	r0, #12
 8009c96:	f7ff ff5b 	bl	8009b50 <memcpy>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa5 	bl	8009bec <_Bfree>
 8009ca2:	4644      	mov	r4, r8
 8009ca4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ca8:	3501      	adds	r5, #1
 8009caa:	615e      	str	r6, [r3, #20]
 8009cac:	6125      	str	r5, [r4, #16]
 8009cae:	4620      	mov	r0, r4
 8009cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb4:	0800c548 	.word	0x0800c548
 8009cb8:	0800c5d4 	.word	0x0800c5d4

08009cbc <__s2b>:
 8009cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	4615      	mov	r5, r2
 8009cc4:	461f      	mov	r7, r3
 8009cc6:	2209      	movs	r2, #9
 8009cc8:	3308      	adds	r3, #8
 8009cca:	4606      	mov	r6, r0
 8009ccc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	db09      	blt.n	8009cec <__s2b+0x30>
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff ff47 	bl	8009b6c <_Balloc>
 8009cde:	b940      	cbnz	r0, 8009cf2 <__s2b+0x36>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	4b19      	ldr	r3, [pc, #100]	; (8009d48 <__s2b+0x8c>)
 8009ce4:	4819      	ldr	r0, [pc, #100]	; (8009d4c <__s2b+0x90>)
 8009ce6:	21ce      	movs	r1, #206	; 0xce
 8009ce8:	f000 fe90 	bl	800aa0c <__assert_func>
 8009cec:	0052      	lsls	r2, r2, #1
 8009cee:	3101      	adds	r1, #1
 8009cf0:	e7f0      	b.n	8009cd4 <__s2b+0x18>
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	6143      	str	r3, [r0, #20]
 8009cf6:	2d09      	cmp	r5, #9
 8009cf8:	f04f 0301 	mov.w	r3, #1
 8009cfc:	6103      	str	r3, [r0, #16]
 8009cfe:	dd16      	ble.n	8009d2e <__s2b+0x72>
 8009d00:	f104 0909 	add.w	r9, r4, #9
 8009d04:	46c8      	mov	r8, r9
 8009d06:	442c      	add	r4, r5
 8009d08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	3b30      	subs	r3, #48	; 0x30
 8009d10:	220a      	movs	r2, #10
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff8c 	bl	8009c30 <__multadd>
 8009d18:	45a0      	cmp	r8, r4
 8009d1a:	d1f5      	bne.n	8009d08 <__s2b+0x4c>
 8009d1c:	f1a5 0408 	sub.w	r4, r5, #8
 8009d20:	444c      	add	r4, r9
 8009d22:	1b2d      	subs	r5, r5, r4
 8009d24:	1963      	adds	r3, r4, r5
 8009d26:	42bb      	cmp	r3, r7
 8009d28:	db04      	blt.n	8009d34 <__s2b+0x78>
 8009d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2e:	340a      	adds	r4, #10
 8009d30:	2509      	movs	r5, #9
 8009d32:	e7f6      	b.n	8009d22 <__s2b+0x66>
 8009d34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d38:	4601      	mov	r1, r0
 8009d3a:	3b30      	subs	r3, #48	; 0x30
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f7ff ff76 	bl	8009c30 <__multadd>
 8009d44:	e7ee      	b.n	8009d24 <__s2b+0x68>
 8009d46:	bf00      	nop
 8009d48:	0800c548 	.word	0x0800c548
 8009d4c:	0800c5d4 	.word	0x0800c5d4

08009d50 <__hi0bits>:
 8009d50:	0c03      	lsrs	r3, r0, #16
 8009d52:	041b      	lsls	r3, r3, #16
 8009d54:	b9d3      	cbnz	r3, 8009d8c <__hi0bits+0x3c>
 8009d56:	0400      	lsls	r0, r0, #16
 8009d58:	2310      	movs	r3, #16
 8009d5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d5e:	bf04      	itt	eq
 8009d60:	0200      	lsleq	r0, r0, #8
 8009d62:	3308      	addeq	r3, #8
 8009d64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d68:	bf04      	itt	eq
 8009d6a:	0100      	lsleq	r0, r0, #4
 8009d6c:	3304      	addeq	r3, #4
 8009d6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d72:	bf04      	itt	eq
 8009d74:	0080      	lsleq	r0, r0, #2
 8009d76:	3302      	addeq	r3, #2
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	db05      	blt.n	8009d88 <__hi0bits+0x38>
 8009d7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d80:	f103 0301 	add.w	r3, r3, #1
 8009d84:	bf08      	it	eq
 8009d86:	2320      	moveq	r3, #32
 8009d88:	4618      	mov	r0, r3
 8009d8a:	4770      	bx	lr
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e7e4      	b.n	8009d5a <__hi0bits+0xa>

08009d90 <__lo0bits>:
 8009d90:	6803      	ldr	r3, [r0, #0]
 8009d92:	f013 0207 	ands.w	r2, r3, #7
 8009d96:	4601      	mov	r1, r0
 8009d98:	d00b      	beq.n	8009db2 <__lo0bits+0x22>
 8009d9a:	07da      	lsls	r2, r3, #31
 8009d9c:	d423      	bmi.n	8009de6 <__lo0bits+0x56>
 8009d9e:	0798      	lsls	r0, r3, #30
 8009da0:	bf49      	itett	mi
 8009da2:	085b      	lsrmi	r3, r3, #1
 8009da4:	089b      	lsrpl	r3, r3, #2
 8009da6:	2001      	movmi	r0, #1
 8009da8:	600b      	strmi	r3, [r1, #0]
 8009daa:	bf5c      	itt	pl
 8009dac:	600b      	strpl	r3, [r1, #0]
 8009dae:	2002      	movpl	r0, #2
 8009db0:	4770      	bx	lr
 8009db2:	b298      	uxth	r0, r3
 8009db4:	b9a8      	cbnz	r0, 8009de2 <__lo0bits+0x52>
 8009db6:	0c1b      	lsrs	r3, r3, #16
 8009db8:	2010      	movs	r0, #16
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	b90a      	cbnz	r2, 8009dc2 <__lo0bits+0x32>
 8009dbe:	3008      	adds	r0, #8
 8009dc0:	0a1b      	lsrs	r3, r3, #8
 8009dc2:	071a      	lsls	r2, r3, #28
 8009dc4:	bf04      	itt	eq
 8009dc6:	091b      	lsreq	r3, r3, #4
 8009dc8:	3004      	addeq	r0, #4
 8009dca:	079a      	lsls	r2, r3, #30
 8009dcc:	bf04      	itt	eq
 8009dce:	089b      	lsreq	r3, r3, #2
 8009dd0:	3002      	addeq	r0, #2
 8009dd2:	07da      	lsls	r2, r3, #31
 8009dd4:	d403      	bmi.n	8009dde <__lo0bits+0x4e>
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	f100 0001 	add.w	r0, r0, #1
 8009ddc:	d005      	beq.n	8009dea <__lo0bits+0x5a>
 8009dde:	600b      	str	r3, [r1, #0]
 8009de0:	4770      	bx	lr
 8009de2:	4610      	mov	r0, r2
 8009de4:	e7e9      	b.n	8009dba <__lo0bits+0x2a>
 8009de6:	2000      	movs	r0, #0
 8009de8:	4770      	bx	lr
 8009dea:	2020      	movs	r0, #32
 8009dec:	4770      	bx	lr
	...

08009df0 <__i2b>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	2101      	movs	r1, #1
 8009df6:	f7ff feb9 	bl	8009b6c <_Balloc>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	b928      	cbnz	r0, 8009e0a <__i2b+0x1a>
 8009dfe:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <__i2b+0x24>)
 8009e00:	4805      	ldr	r0, [pc, #20]	; (8009e18 <__i2b+0x28>)
 8009e02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009e06:	f000 fe01 	bl	800aa0c <__assert_func>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	6144      	str	r4, [r0, #20]
 8009e0e:	6103      	str	r3, [r0, #16]
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	bf00      	nop
 8009e14:	0800c548 	.word	0x0800c548
 8009e18:	0800c5d4 	.word	0x0800c5d4

08009e1c <__multiply>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4691      	mov	r9, r2
 8009e22:	690a      	ldr	r2, [r1, #16]
 8009e24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	bfb8      	it	lt
 8009e2c:	460b      	movlt	r3, r1
 8009e2e:	460c      	mov	r4, r1
 8009e30:	bfbc      	itt	lt
 8009e32:	464c      	movlt	r4, r9
 8009e34:	4699      	movlt	r9, r3
 8009e36:	6927      	ldr	r7, [r4, #16]
 8009e38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	6861      	ldr	r1, [r4, #4]
 8009e40:	eb07 060a 	add.w	r6, r7, sl
 8009e44:	42b3      	cmp	r3, r6
 8009e46:	b085      	sub	sp, #20
 8009e48:	bfb8      	it	lt
 8009e4a:	3101      	addlt	r1, #1
 8009e4c:	f7ff fe8e 	bl	8009b6c <_Balloc>
 8009e50:	b930      	cbnz	r0, 8009e60 <__multiply+0x44>
 8009e52:	4602      	mov	r2, r0
 8009e54:	4b44      	ldr	r3, [pc, #272]	; (8009f68 <__multiply+0x14c>)
 8009e56:	4845      	ldr	r0, [pc, #276]	; (8009f6c <__multiply+0x150>)
 8009e58:	f240 115d 	movw	r1, #349	; 0x15d
 8009e5c:	f000 fdd6 	bl	800aa0c <__assert_func>
 8009e60:	f100 0514 	add.w	r5, r0, #20
 8009e64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e68:	462b      	mov	r3, r5
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	4543      	cmp	r3, r8
 8009e6e:	d321      	bcc.n	8009eb4 <__multiply+0x98>
 8009e70:	f104 0314 	add.w	r3, r4, #20
 8009e74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e78:	f109 0314 	add.w	r3, r9, #20
 8009e7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e80:	9202      	str	r2, [sp, #8]
 8009e82:	1b3a      	subs	r2, r7, r4
 8009e84:	3a15      	subs	r2, #21
 8009e86:	f022 0203 	bic.w	r2, r2, #3
 8009e8a:	3204      	adds	r2, #4
 8009e8c:	f104 0115 	add.w	r1, r4, #21
 8009e90:	428f      	cmp	r7, r1
 8009e92:	bf38      	it	cc
 8009e94:	2204      	movcc	r2, #4
 8009e96:	9201      	str	r2, [sp, #4]
 8009e98:	9a02      	ldr	r2, [sp, #8]
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d80c      	bhi.n	8009eba <__multiply+0x9e>
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	dd03      	ble.n	8009eac <__multiply+0x90>
 8009ea4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d05a      	beq.n	8009f62 <__multiply+0x146>
 8009eac:	6106      	str	r6, [r0, #16]
 8009eae:	b005      	add	sp, #20
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	f843 2b04 	str.w	r2, [r3], #4
 8009eb8:	e7d8      	b.n	8009e6c <__multiply+0x50>
 8009eba:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ebe:	f1ba 0f00 	cmp.w	sl, #0
 8009ec2:	d024      	beq.n	8009f0e <__multiply+0xf2>
 8009ec4:	f104 0e14 	add.w	lr, r4, #20
 8009ec8:	46a9      	mov	r9, r5
 8009eca:	f04f 0c00 	mov.w	ip, #0
 8009ece:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ed2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ed6:	fa1f fb82 	uxth.w	fp, r2
 8009eda:	b289      	uxth	r1, r1
 8009edc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009ee0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ee8:	4461      	add	r1, ip
 8009eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eee:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ef2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ef6:	b289      	uxth	r1, r1
 8009ef8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009efc:	4577      	cmp	r7, lr
 8009efe:	f849 1b04 	str.w	r1, [r9], #4
 8009f02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f06:	d8e2      	bhi.n	8009ece <__multiply+0xb2>
 8009f08:	9a01      	ldr	r2, [sp, #4]
 8009f0a:	f845 c002 	str.w	ip, [r5, r2]
 8009f0e:	9a03      	ldr	r2, [sp, #12]
 8009f10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f14:	3304      	adds	r3, #4
 8009f16:	f1b9 0f00 	cmp.w	r9, #0
 8009f1a:	d020      	beq.n	8009f5e <__multiply+0x142>
 8009f1c:	6829      	ldr	r1, [r5, #0]
 8009f1e:	f104 0c14 	add.w	ip, r4, #20
 8009f22:	46ae      	mov	lr, r5
 8009f24:	f04f 0a00 	mov.w	sl, #0
 8009f28:	f8bc b000 	ldrh.w	fp, [ip]
 8009f2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f30:	fb09 220b 	mla	r2, r9, fp, r2
 8009f34:	4492      	add	sl, r2
 8009f36:	b289      	uxth	r1, r1
 8009f38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009f3c:	f84e 1b04 	str.w	r1, [lr], #4
 8009f40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009f44:	f8be 1000 	ldrh.w	r1, [lr]
 8009f48:	0c12      	lsrs	r2, r2, #16
 8009f4a:	fb09 1102 	mla	r1, r9, r2, r1
 8009f4e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009f52:	4567      	cmp	r7, ip
 8009f54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f58:	d8e6      	bhi.n	8009f28 <__multiply+0x10c>
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	50a9      	str	r1, [r5, r2]
 8009f5e:	3504      	adds	r5, #4
 8009f60:	e79a      	b.n	8009e98 <__multiply+0x7c>
 8009f62:	3e01      	subs	r6, #1
 8009f64:	e79c      	b.n	8009ea0 <__multiply+0x84>
 8009f66:	bf00      	nop
 8009f68:	0800c548 	.word	0x0800c548
 8009f6c:	0800c5d4 	.word	0x0800c5d4

08009f70 <__pow5mult>:
 8009f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f74:	4615      	mov	r5, r2
 8009f76:	f012 0203 	ands.w	r2, r2, #3
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	d007      	beq.n	8009f90 <__pow5mult+0x20>
 8009f80:	4c25      	ldr	r4, [pc, #148]	; (800a018 <__pow5mult+0xa8>)
 8009f82:	3a01      	subs	r2, #1
 8009f84:	2300      	movs	r3, #0
 8009f86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f8a:	f7ff fe51 	bl	8009c30 <__multadd>
 8009f8e:	4607      	mov	r7, r0
 8009f90:	10ad      	asrs	r5, r5, #2
 8009f92:	d03d      	beq.n	800a010 <__pow5mult+0xa0>
 8009f94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f96:	b97c      	cbnz	r4, 8009fb8 <__pow5mult+0x48>
 8009f98:	2010      	movs	r0, #16
 8009f9a:	f7ff fdbf 	bl	8009b1c <malloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8009fa2:	b928      	cbnz	r0, 8009fb0 <__pow5mult+0x40>
 8009fa4:	4b1d      	ldr	r3, [pc, #116]	; (800a01c <__pow5mult+0xac>)
 8009fa6:	481e      	ldr	r0, [pc, #120]	; (800a020 <__pow5mult+0xb0>)
 8009fa8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009fac:	f000 fd2e 	bl	800aa0c <__assert_func>
 8009fb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fb4:	6004      	str	r4, [r0, #0]
 8009fb6:	60c4      	str	r4, [r0, #12]
 8009fb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009fbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009fc0:	b94c      	cbnz	r4, 8009fd6 <__pow5mult+0x66>
 8009fc2:	f240 2171 	movw	r1, #625	; 0x271
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f7ff ff12 	bl	8009df0 <__i2b>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	07eb      	lsls	r3, r5, #31
 8009fdc:	d50a      	bpl.n	8009ff4 <__pow5mult+0x84>
 8009fde:	4639      	mov	r1, r7
 8009fe0:	4622      	mov	r2, r4
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff1a 	bl	8009e1c <__multiply>
 8009fe8:	4639      	mov	r1, r7
 8009fea:	4680      	mov	r8, r0
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7ff fdfd 	bl	8009bec <_Bfree>
 8009ff2:	4647      	mov	r7, r8
 8009ff4:	106d      	asrs	r5, r5, #1
 8009ff6:	d00b      	beq.n	800a010 <__pow5mult+0xa0>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	b938      	cbnz	r0, 800a00c <__pow5mult+0x9c>
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f7ff ff0b 	bl	8009e1c <__multiply>
 800a006:	6020      	str	r0, [r4, #0]
 800a008:	f8c0 9000 	str.w	r9, [r0]
 800a00c:	4604      	mov	r4, r0
 800a00e:	e7e4      	b.n	8009fda <__pow5mult+0x6a>
 800a010:	4638      	mov	r0, r7
 800a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a016:	bf00      	nop
 800a018:	0800c720 	.word	0x0800c720
 800a01c:	0800c4d6 	.word	0x0800c4d6
 800a020:	0800c5d4 	.word	0x0800c5d4

0800a024 <__lshift>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	6849      	ldr	r1, [r1, #4]
 800a02c:	6923      	ldr	r3, [r4, #16]
 800a02e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a032:	68a3      	ldr	r3, [r4, #8]
 800a034:	4607      	mov	r7, r0
 800a036:	4691      	mov	r9, r2
 800a038:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a03c:	f108 0601 	add.w	r6, r8, #1
 800a040:	42b3      	cmp	r3, r6
 800a042:	db0b      	blt.n	800a05c <__lshift+0x38>
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff fd91 	bl	8009b6c <_Balloc>
 800a04a:	4605      	mov	r5, r0
 800a04c:	b948      	cbnz	r0, 800a062 <__lshift+0x3e>
 800a04e:	4602      	mov	r2, r0
 800a050:	4b2a      	ldr	r3, [pc, #168]	; (800a0fc <__lshift+0xd8>)
 800a052:	482b      	ldr	r0, [pc, #172]	; (800a100 <__lshift+0xdc>)
 800a054:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a058:	f000 fcd8 	bl	800aa0c <__assert_func>
 800a05c:	3101      	adds	r1, #1
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	e7ee      	b.n	800a040 <__lshift+0x1c>
 800a062:	2300      	movs	r3, #0
 800a064:	f100 0114 	add.w	r1, r0, #20
 800a068:	f100 0210 	add.w	r2, r0, #16
 800a06c:	4618      	mov	r0, r3
 800a06e:	4553      	cmp	r3, sl
 800a070:	db37      	blt.n	800a0e2 <__lshift+0xbe>
 800a072:	6920      	ldr	r0, [r4, #16]
 800a074:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a078:	f104 0314 	add.w	r3, r4, #20
 800a07c:	f019 091f 	ands.w	r9, r9, #31
 800a080:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a084:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a088:	d02f      	beq.n	800a0ea <__lshift+0xc6>
 800a08a:	f1c9 0e20 	rsb	lr, r9, #32
 800a08e:	468a      	mov	sl, r1
 800a090:	f04f 0c00 	mov.w	ip, #0
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	fa02 f209 	lsl.w	r2, r2, r9
 800a09a:	ea42 020c 	orr.w	r2, r2, ip
 800a09e:	f84a 2b04 	str.w	r2, [sl], #4
 800a0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0a6:	4298      	cmp	r0, r3
 800a0a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a0ac:	d8f2      	bhi.n	800a094 <__lshift+0x70>
 800a0ae:	1b03      	subs	r3, r0, r4
 800a0b0:	3b15      	subs	r3, #21
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	f104 0215 	add.w	r2, r4, #21
 800a0bc:	4290      	cmp	r0, r2
 800a0be:	bf38      	it	cc
 800a0c0:	2304      	movcc	r3, #4
 800a0c2:	f841 c003 	str.w	ip, [r1, r3]
 800a0c6:	f1bc 0f00 	cmp.w	ip, #0
 800a0ca:	d001      	beq.n	800a0d0 <__lshift+0xac>
 800a0cc:	f108 0602 	add.w	r6, r8, #2
 800a0d0:	3e01      	subs	r6, #1
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	612e      	str	r6, [r5, #16]
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	f7ff fd88 	bl	8009bec <_Bfree>
 800a0dc:	4628      	mov	r0, r5
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	e7c1      	b.n	800a06e <__lshift+0x4a>
 800a0ea:	3904      	subs	r1, #4
 800a0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0f4:	4298      	cmp	r0, r3
 800a0f6:	d8f9      	bhi.n	800a0ec <__lshift+0xc8>
 800a0f8:	e7ea      	b.n	800a0d0 <__lshift+0xac>
 800a0fa:	bf00      	nop
 800a0fc:	0800c548 	.word	0x0800c548
 800a100:	0800c5d4 	.word	0x0800c5d4

0800a104 <__mcmp>:
 800a104:	b530      	push	{r4, r5, lr}
 800a106:	6902      	ldr	r2, [r0, #16]
 800a108:	690c      	ldr	r4, [r1, #16]
 800a10a:	1b12      	subs	r2, r2, r4
 800a10c:	d10e      	bne.n	800a12c <__mcmp+0x28>
 800a10e:	f100 0314 	add.w	r3, r0, #20
 800a112:	3114      	adds	r1, #20
 800a114:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a11c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a120:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a124:	42a5      	cmp	r5, r4
 800a126:	d003      	beq.n	800a130 <__mcmp+0x2c>
 800a128:	d305      	bcc.n	800a136 <__mcmp+0x32>
 800a12a:	2201      	movs	r2, #1
 800a12c:	4610      	mov	r0, r2
 800a12e:	bd30      	pop	{r4, r5, pc}
 800a130:	4283      	cmp	r3, r0
 800a132:	d3f3      	bcc.n	800a11c <__mcmp+0x18>
 800a134:	e7fa      	b.n	800a12c <__mcmp+0x28>
 800a136:	f04f 32ff 	mov.w	r2, #4294967295
 800a13a:	e7f7      	b.n	800a12c <__mcmp+0x28>

0800a13c <__mdiff>:
 800a13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	460c      	mov	r4, r1
 800a142:	4606      	mov	r6, r0
 800a144:	4611      	mov	r1, r2
 800a146:	4620      	mov	r0, r4
 800a148:	4690      	mov	r8, r2
 800a14a:	f7ff ffdb 	bl	800a104 <__mcmp>
 800a14e:	1e05      	subs	r5, r0, #0
 800a150:	d110      	bne.n	800a174 <__mdiff+0x38>
 800a152:	4629      	mov	r1, r5
 800a154:	4630      	mov	r0, r6
 800a156:	f7ff fd09 	bl	8009b6c <_Balloc>
 800a15a:	b930      	cbnz	r0, 800a16a <__mdiff+0x2e>
 800a15c:	4b3a      	ldr	r3, [pc, #232]	; (800a248 <__mdiff+0x10c>)
 800a15e:	4602      	mov	r2, r0
 800a160:	f240 2132 	movw	r1, #562	; 0x232
 800a164:	4839      	ldr	r0, [pc, #228]	; (800a24c <__mdiff+0x110>)
 800a166:	f000 fc51 	bl	800aa0c <__assert_func>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	bfa4      	itt	ge
 800a176:	4643      	movge	r3, r8
 800a178:	46a0      	movge	r8, r4
 800a17a:	4630      	mov	r0, r6
 800a17c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a180:	bfa6      	itte	ge
 800a182:	461c      	movge	r4, r3
 800a184:	2500      	movge	r5, #0
 800a186:	2501      	movlt	r5, #1
 800a188:	f7ff fcf0 	bl	8009b6c <_Balloc>
 800a18c:	b920      	cbnz	r0, 800a198 <__mdiff+0x5c>
 800a18e:	4b2e      	ldr	r3, [pc, #184]	; (800a248 <__mdiff+0x10c>)
 800a190:	4602      	mov	r2, r0
 800a192:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a196:	e7e5      	b.n	800a164 <__mdiff+0x28>
 800a198:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a19c:	6926      	ldr	r6, [r4, #16]
 800a19e:	60c5      	str	r5, [r0, #12]
 800a1a0:	f104 0914 	add.w	r9, r4, #20
 800a1a4:	f108 0514 	add.w	r5, r8, #20
 800a1a8:	f100 0e14 	add.w	lr, r0, #20
 800a1ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a1b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a1b4:	f108 0210 	add.w	r2, r8, #16
 800a1b8:	46f2      	mov	sl, lr
 800a1ba:	2100      	movs	r1, #0
 800a1bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a1c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a1c4:	fa1f f883 	uxth.w	r8, r3
 800a1c8:	fa11 f18b 	uxtah	r1, r1, fp
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	eba1 0808 	sub.w	r8, r1, r8
 800a1d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a1d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1da:	fa1f f888 	uxth.w	r8, r8
 800a1de:	1419      	asrs	r1, r3, #16
 800a1e0:	454e      	cmp	r6, r9
 800a1e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1e6:	f84a 3b04 	str.w	r3, [sl], #4
 800a1ea:	d8e7      	bhi.n	800a1bc <__mdiff+0x80>
 800a1ec:	1b33      	subs	r3, r6, r4
 800a1ee:	3b15      	subs	r3, #21
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	3415      	adds	r4, #21
 800a1f8:	42a6      	cmp	r6, r4
 800a1fa:	bf38      	it	cc
 800a1fc:	2304      	movcc	r3, #4
 800a1fe:	441d      	add	r5, r3
 800a200:	4473      	add	r3, lr
 800a202:	469e      	mov	lr, r3
 800a204:	462e      	mov	r6, r5
 800a206:	4566      	cmp	r6, ip
 800a208:	d30e      	bcc.n	800a228 <__mdiff+0xec>
 800a20a:	f10c 0203 	add.w	r2, ip, #3
 800a20e:	1b52      	subs	r2, r2, r5
 800a210:	f022 0203 	bic.w	r2, r2, #3
 800a214:	3d03      	subs	r5, #3
 800a216:	45ac      	cmp	ip, r5
 800a218:	bf38      	it	cc
 800a21a:	2200      	movcc	r2, #0
 800a21c:	441a      	add	r2, r3
 800a21e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a222:	b17b      	cbz	r3, 800a244 <__mdiff+0x108>
 800a224:	6107      	str	r7, [r0, #16]
 800a226:	e7a3      	b.n	800a170 <__mdiff+0x34>
 800a228:	f856 8b04 	ldr.w	r8, [r6], #4
 800a22c:	fa11 f288 	uxtah	r2, r1, r8
 800a230:	1414      	asrs	r4, r2, #16
 800a232:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a236:	b292      	uxth	r2, r2
 800a238:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a23c:	f84e 2b04 	str.w	r2, [lr], #4
 800a240:	1421      	asrs	r1, r4, #16
 800a242:	e7e0      	b.n	800a206 <__mdiff+0xca>
 800a244:	3f01      	subs	r7, #1
 800a246:	e7ea      	b.n	800a21e <__mdiff+0xe2>
 800a248:	0800c548 	.word	0x0800c548
 800a24c:	0800c5d4 	.word	0x0800c5d4

0800a250 <__ulp>:
 800a250:	b082      	sub	sp, #8
 800a252:	ed8d 0b00 	vstr	d0, [sp]
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	4912      	ldr	r1, [pc, #72]	; (800a2a4 <__ulp+0x54>)
 800a25a:	4019      	ands	r1, r3
 800a25c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a260:	2900      	cmp	r1, #0
 800a262:	dd05      	ble.n	800a270 <__ulp+0x20>
 800a264:	2200      	movs	r2, #0
 800a266:	460b      	mov	r3, r1
 800a268:	ec43 2b10 	vmov	d0, r2, r3
 800a26c:	b002      	add	sp, #8
 800a26e:	4770      	bx	lr
 800a270:	4249      	negs	r1, r1
 800a272:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a276:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a27a:	f04f 0200 	mov.w	r2, #0
 800a27e:	f04f 0300 	mov.w	r3, #0
 800a282:	da04      	bge.n	800a28e <__ulp+0x3e>
 800a284:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a288:	fa41 f300 	asr.w	r3, r1, r0
 800a28c:	e7ec      	b.n	800a268 <__ulp+0x18>
 800a28e:	f1a0 0114 	sub.w	r1, r0, #20
 800a292:	291e      	cmp	r1, #30
 800a294:	bfda      	itte	le
 800a296:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a29a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a29e:	2101      	movgt	r1, #1
 800a2a0:	460a      	mov	r2, r1
 800a2a2:	e7e1      	b.n	800a268 <__ulp+0x18>
 800a2a4:	7ff00000 	.word	0x7ff00000

0800a2a8 <__b2d>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	6905      	ldr	r5, [r0, #16]
 800a2ac:	f100 0714 	add.w	r7, r0, #20
 800a2b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a2b4:	1f2e      	subs	r6, r5, #4
 800a2b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f7ff fd48 	bl	8009d50 <__hi0bits>
 800a2c0:	f1c0 0320 	rsb	r3, r0, #32
 800a2c4:	280a      	cmp	r0, #10
 800a2c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a344 <__b2d+0x9c>
 800a2ca:	600b      	str	r3, [r1, #0]
 800a2cc:	dc14      	bgt.n	800a2f8 <__b2d+0x50>
 800a2ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800a2d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a2d6:	42b7      	cmp	r7, r6
 800a2d8:	ea41 030c 	orr.w	r3, r1, ip
 800a2dc:	bf34      	ite	cc
 800a2de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a2e2:	2100      	movcs	r1, #0
 800a2e4:	3015      	adds	r0, #21
 800a2e6:	fa04 f000 	lsl.w	r0, r4, r0
 800a2ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800a2ee:	ea40 0201 	orr.w	r2, r0, r1
 800a2f2:	ec43 2b10 	vmov	d0, r2, r3
 800a2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f8:	42b7      	cmp	r7, r6
 800a2fa:	bf3a      	itte	cc
 800a2fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a300:	f1a5 0608 	subcc.w	r6, r5, #8
 800a304:	2100      	movcs	r1, #0
 800a306:	380b      	subs	r0, #11
 800a308:	d017      	beq.n	800a33a <__b2d+0x92>
 800a30a:	f1c0 0c20 	rsb	ip, r0, #32
 800a30e:	fa04 f500 	lsl.w	r5, r4, r0
 800a312:	42be      	cmp	r6, r7
 800a314:	fa21 f40c 	lsr.w	r4, r1, ip
 800a318:	ea45 0504 	orr.w	r5, r5, r4
 800a31c:	bf8c      	ite	hi
 800a31e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a322:	2400      	movls	r4, #0
 800a324:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a328:	fa01 f000 	lsl.w	r0, r1, r0
 800a32c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a330:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a334:	ea40 0204 	orr.w	r2, r0, r4
 800a338:	e7db      	b.n	800a2f2 <__b2d+0x4a>
 800a33a:	ea44 030c 	orr.w	r3, r4, ip
 800a33e:	460a      	mov	r2, r1
 800a340:	e7d7      	b.n	800a2f2 <__b2d+0x4a>
 800a342:	bf00      	nop
 800a344:	3ff00000 	.word	0x3ff00000

0800a348 <__d2b>:
 800a348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a34c:	4689      	mov	r9, r1
 800a34e:	2101      	movs	r1, #1
 800a350:	ec57 6b10 	vmov	r6, r7, d0
 800a354:	4690      	mov	r8, r2
 800a356:	f7ff fc09 	bl	8009b6c <_Balloc>
 800a35a:	4604      	mov	r4, r0
 800a35c:	b930      	cbnz	r0, 800a36c <__d2b+0x24>
 800a35e:	4602      	mov	r2, r0
 800a360:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <__d2b+0xb0>)
 800a362:	4826      	ldr	r0, [pc, #152]	; (800a3fc <__d2b+0xb4>)
 800a364:	f240 310a 	movw	r1, #778	; 0x30a
 800a368:	f000 fb50 	bl	800aa0c <__assert_func>
 800a36c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a374:	bb35      	cbnz	r5, 800a3c4 <__d2b+0x7c>
 800a376:	2e00      	cmp	r6, #0
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	d028      	beq.n	800a3ce <__d2b+0x86>
 800a37c:	4668      	mov	r0, sp
 800a37e:	9600      	str	r6, [sp, #0]
 800a380:	f7ff fd06 	bl	8009d90 <__lo0bits>
 800a384:	9900      	ldr	r1, [sp, #0]
 800a386:	b300      	cbz	r0, 800a3ca <__d2b+0x82>
 800a388:	9a01      	ldr	r2, [sp, #4]
 800a38a:	f1c0 0320 	rsb	r3, r0, #32
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	430b      	orrs	r3, r1
 800a394:	40c2      	lsrs	r2, r0
 800a396:	6163      	str	r3, [r4, #20]
 800a398:	9201      	str	r2, [sp, #4]
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	61a3      	str	r3, [r4, #24]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bf14      	ite	ne
 800a3a2:	2202      	movne	r2, #2
 800a3a4:	2201      	moveq	r2, #1
 800a3a6:	6122      	str	r2, [r4, #16]
 800a3a8:	b1d5      	cbz	r5, 800a3e0 <__d2b+0x98>
 800a3aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a3ae:	4405      	add	r5, r0
 800a3b0:	f8c9 5000 	str.w	r5, [r9]
 800a3b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3b8:	f8c8 0000 	str.w	r0, [r8]
 800a3bc:	4620      	mov	r0, r4
 800a3be:	b003      	add	sp, #12
 800a3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c8:	e7d5      	b.n	800a376 <__d2b+0x2e>
 800a3ca:	6161      	str	r1, [r4, #20]
 800a3cc:	e7e5      	b.n	800a39a <__d2b+0x52>
 800a3ce:	a801      	add	r0, sp, #4
 800a3d0:	f7ff fcde 	bl	8009d90 <__lo0bits>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	6163      	str	r3, [r4, #20]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	6122      	str	r2, [r4, #16]
 800a3dc:	3020      	adds	r0, #32
 800a3de:	e7e3      	b.n	800a3a8 <__d2b+0x60>
 800a3e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a3e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3e8:	f8c9 0000 	str.w	r0, [r9]
 800a3ec:	6918      	ldr	r0, [r3, #16]
 800a3ee:	f7ff fcaf 	bl	8009d50 <__hi0bits>
 800a3f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3f6:	e7df      	b.n	800a3b8 <__d2b+0x70>
 800a3f8:	0800c548 	.word	0x0800c548
 800a3fc:	0800c5d4 	.word	0x0800c5d4

0800a400 <__ratio>:
 800a400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	4688      	mov	r8, r1
 800a406:	4669      	mov	r1, sp
 800a408:	4681      	mov	r9, r0
 800a40a:	f7ff ff4d 	bl	800a2a8 <__b2d>
 800a40e:	a901      	add	r1, sp, #4
 800a410:	4640      	mov	r0, r8
 800a412:	ec55 4b10 	vmov	r4, r5, d0
 800a416:	f7ff ff47 	bl	800a2a8 <__b2d>
 800a41a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a41e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a422:	eba3 0c02 	sub.w	ip, r3, r2
 800a426:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a430:	ec51 0b10 	vmov	r0, r1, d0
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfd6      	itet	le
 800a438:	460a      	movle	r2, r1
 800a43a:	462a      	movgt	r2, r5
 800a43c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a440:	468b      	mov	fp, r1
 800a442:	462f      	mov	r7, r5
 800a444:	bfd4      	ite	le
 800a446:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a44a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a44e:	4620      	mov	r0, r4
 800a450:	ee10 2a10 	vmov	r2, s0
 800a454:	465b      	mov	r3, fp
 800a456:	4639      	mov	r1, r7
 800a458:	f7f6 fa00 	bl	800085c <__aeabi_ddiv>
 800a45c:	ec41 0b10 	vmov	d0, r0, r1
 800a460:	b003      	add	sp, #12
 800a462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a466 <__copybits>:
 800a466:	3901      	subs	r1, #1
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	1149      	asrs	r1, r1, #5
 800a46c:	6914      	ldr	r4, [r2, #16]
 800a46e:	3101      	adds	r1, #1
 800a470:	f102 0314 	add.w	r3, r2, #20
 800a474:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a478:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a47c:	1f05      	subs	r5, r0, #4
 800a47e:	42a3      	cmp	r3, r4
 800a480:	d30c      	bcc.n	800a49c <__copybits+0x36>
 800a482:	1aa3      	subs	r3, r4, r2
 800a484:	3b11      	subs	r3, #17
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	3211      	adds	r2, #17
 800a48c:	42a2      	cmp	r2, r4
 800a48e:	bf88      	it	hi
 800a490:	2300      	movhi	r3, #0
 800a492:	4418      	add	r0, r3
 800a494:	2300      	movs	r3, #0
 800a496:	4288      	cmp	r0, r1
 800a498:	d305      	bcc.n	800a4a6 <__copybits+0x40>
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a4a0:	f845 6f04 	str.w	r6, [r5, #4]!
 800a4a4:	e7eb      	b.n	800a47e <__copybits+0x18>
 800a4a6:	f840 3b04 	str.w	r3, [r0], #4
 800a4aa:	e7f4      	b.n	800a496 <__copybits+0x30>

0800a4ac <__any_on>:
 800a4ac:	f100 0214 	add.w	r2, r0, #20
 800a4b0:	6900      	ldr	r0, [r0, #16]
 800a4b2:	114b      	asrs	r3, r1, #5
 800a4b4:	4298      	cmp	r0, r3
 800a4b6:	b510      	push	{r4, lr}
 800a4b8:	db11      	blt.n	800a4de <__any_on+0x32>
 800a4ba:	dd0a      	ble.n	800a4d2 <__any_on+0x26>
 800a4bc:	f011 011f 	ands.w	r1, r1, #31
 800a4c0:	d007      	beq.n	800a4d2 <__any_on+0x26>
 800a4c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a4c6:	fa24 f001 	lsr.w	r0, r4, r1
 800a4ca:	fa00 f101 	lsl.w	r1, r0, r1
 800a4ce:	428c      	cmp	r4, r1
 800a4d0:	d10b      	bne.n	800a4ea <__any_on+0x3e>
 800a4d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d803      	bhi.n	800a4e2 <__any_on+0x36>
 800a4da:	2000      	movs	r0, #0
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	4603      	mov	r3, r0
 800a4e0:	e7f7      	b.n	800a4d2 <__any_on+0x26>
 800a4e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4e6:	2900      	cmp	r1, #0
 800a4e8:	d0f5      	beq.n	800a4d6 <__any_on+0x2a>
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7f6      	b.n	800a4dc <__any_on+0x30>

0800a4ee <_calloc_r>:
 800a4ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4f0:	fba1 2402 	umull	r2, r4, r1, r2
 800a4f4:	b94c      	cbnz	r4, 800a50a <_calloc_r+0x1c>
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	9201      	str	r2, [sp, #4]
 800a4fa:	f000 f87b 	bl	800a5f4 <_malloc_r>
 800a4fe:	9a01      	ldr	r2, [sp, #4]
 800a500:	4605      	mov	r5, r0
 800a502:	b930      	cbnz	r0, 800a512 <_calloc_r+0x24>
 800a504:	4628      	mov	r0, r5
 800a506:	b003      	add	sp, #12
 800a508:	bd30      	pop	{r4, r5, pc}
 800a50a:	220c      	movs	r2, #12
 800a50c:	6002      	str	r2, [r0, #0]
 800a50e:	2500      	movs	r5, #0
 800a510:	e7f8      	b.n	800a504 <_calloc_r+0x16>
 800a512:	4621      	mov	r1, r4
 800a514:	f7fc fbbe 	bl	8006c94 <memset>
 800a518:	e7f4      	b.n	800a504 <_calloc_r+0x16>
	...

0800a51c <_free_r>:
 800a51c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a51e:	2900      	cmp	r1, #0
 800a520:	d044      	beq.n	800a5ac <_free_r+0x90>
 800a522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a526:	9001      	str	r0, [sp, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f1a1 0404 	sub.w	r4, r1, #4
 800a52e:	bfb8      	it	lt
 800a530:	18e4      	addlt	r4, r4, r3
 800a532:	f000 fab5 	bl	800aaa0 <__malloc_lock>
 800a536:	4a1e      	ldr	r2, [pc, #120]	; (800a5b0 <_free_r+0x94>)
 800a538:	9801      	ldr	r0, [sp, #4]
 800a53a:	6813      	ldr	r3, [r2, #0]
 800a53c:	b933      	cbnz	r3, 800a54c <_free_r+0x30>
 800a53e:	6063      	str	r3, [r4, #4]
 800a540:	6014      	str	r4, [r2, #0]
 800a542:	b003      	add	sp, #12
 800a544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a548:	f000 bab0 	b.w	800aaac <__malloc_unlock>
 800a54c:	42a3      	cmp	r3, r4
 800a54e:	d908      	bls.n	800a562 <_free_r+0x46>
 800a550:	6825      	ldr	r5, [r4, #0]
 800a552:	1961      	adds	r1, r4, r5
 800a554:	428b      	cmp	r3, r1
 800a556:	bf01      	itttt	eq
 800a558:	6819      	ldreq	r1, [r3, #0]
 800a55a:	685b      	ldreq	r3, [r3, #4]
 800a55c:	1949      	addeq	r1, r1, r5
 800a55e:	6021      	streq	r1, [r4, #0]
 800a560:	e7ed      	b.n	800a53e <_free_r+0x22>
 800a562:	461a      	mov	r2, r3
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	b10b      	cbz	r3, 800a56c <_free_r+0x50>
 800a568:	42a3      	cmp	r3, r4
 800a56a:	d9fa      	bls.n	800a562 <_free_r+0x46>
 800a56c:	6811      	ldr	r1, [r2, #0]
 800a56e:	1855      	adds	r5, r2, r1
 800a570:	42a5      	cmp	r5, r4
 800a572:	d10b      	bne.n	800a58c <_free_r+0x70>
 800a574:	6824      	ldr	r4, [r4, #0]
 800a576:	4421      	add	r1, r4
 800a578:	1854      	adds	r4, r2, r1
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	6011      	str	r1, [r2, #0]
 800a57e:	d1e0      	bne.n	800a542 <_free_r+0x26>
 800a580:	681c      	ldr	r4, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	6053      	str	r3, [r2, #4]
 800a586:	4421      	add	r1, r4
 800a588:	6011      	str	r1, [r2, #0]
 800a58a:	e7da      	b.n	800a542 <_free_r+0x26>
 800a58c:	d902      	bls.n	800a594 <_free_r+0x78>
 800a58e:	230c      	movs	r3, #12
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	e7d6      	b.n	800a542 <_free_r+0x26>
 800a594:	6825      	ldr	r5, [r4, #0]
 800a596:	1961      	adds	r1, r4, r5
 800a598:	428b      	cmp	r3, r1
 800a59a:	bf04      	itt	eq
 800a59c:	6819      	ldreq	r1, [r3, #0]
 800a59e:	685b      	ldreq	r3, [r3, #4]
 800a5a0:	6063      	str	r3, [r4, #4]
 800a5a2:	bf04      	itt	eq
 800a5a4:	1949      	addeq	r1, r1, r5
 800a5a6:	6021      	streq	r1, [r4, #0]
 800a5a8:	6054      	str	r4, [r2, #4]
 800a5aa:	e7ca      	b.n	800a542 <_free_r+0x26>
 800a5ac:	b003      	add	sp, #12
 800a5ae:	bd30      	pop	{r4, r5, pc}
 800a5b0:	200008b0 	.word	0x200008b0

0800a5b4 <sbrk_aligned>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4e0e      	ldr	r6, [pc, #56]	; (800a5f0 <sbrk_aligned+0x3c>)
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	6831      	ldr	r1, [r6, #0]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	b911      	cbnz	r1, 800a5c6 <sbrk_aligned+0x12>
 800a5c0:	f000 f9f2 	bl	800a9a8 <_sbrk_r>
 800a5c4:	6030      	str	r0, [r6, #0]
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4628      	mov	r0, r5
 800a5ca:	f000 f9ed 	bl	800a9a8 <_sbrk_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	d00a      	beq.n	800a5e8 <sbrk_aligned+0x34>
 800a5d2:	1cc4      	adds	r4, r0, #3
 800a5d4:	f024 0403 	bic.w	r4, r4, #3
 800a5d8:	42a0      	cmp	r0, r4
 800a5da:	d007      	beq.n	800a5ec <sbrk_aligned+0x38>
 800a5dc:	1a21      	subs	r1, r4, r0
 800a5de:	4628      	mov	r0, r5
 800a5e0:	f000 f9e2 	bl	800a9a8 <_sbrk_r>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d101      	bne.n	800a5ec <sbrk_aligned+0x38>
 800a5e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	200008b4 	.word	0x200008b4

0800a5f4 <_malloc_r>:
 800a5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5f8:	1ccd      	adds	r5, r1, #3
 800a5fa:	f025 0503 	bic.w	r5, r5, #3
 800a5fe:	3508      	adds	r5, #8
 800a600:	2d0c      	cmp	r5, #12
 800a602:	bf38      	it	cc
 800a604:	250c      	movcc	r5, #12
 800a606:	2d00      	cmp	r5, #0
 800a608:	4607      	mov	r7, r0
 800a60a:	db01      	blt.n	800a610 <_malloc_r+0x1c>
 800a60c:	42a9      	cmp	r1, r5
 800a60e:	d905      	bls.n	800a61c <_malloc_r+0x28>
 800a610:	230c      	movs	r3, #12
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	2600      	movs	r6, #0
 800a616:	4630      	mov	r0, r6
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	4e2e      	ldr	r6, [pc, #184]	; (800a6d8 <_malloc_r+0xe4>)
 800a61e:	f000 fa3f 	bl	800aaa0 <__malloc_lock>
 800a622:	6833      	ldr	r3, [r6, #0]
 800a624:	461c      	mov	r4, r3
 800a626:	bb34      	cbnz	r4, 800a676 <_malloc_r+0x82>
 800a628:	4629      	mov	r1, r5
 800a62a:	4638      	mov	r0, r7
 800a62c:	f7ff ffc2 	bl	800a5b4 <sbrk_aligned>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	4604      	mov	r4, r0
 800a634:	d14d      	bne.n	800a6d2 <_malloc_r+0xde>
 800a636:	6834      	ldr	r4, [r6, #0]
 800a638:	4626      	mov	r6, r4
 800a63a:	2e00      	cmp	r6, #0
 800a63c:	d140      	bne.n	800a6c0 <_malloc_r+0xcc>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	4631      	mov	r1, r6
 800a642:	4638      	mov	r0, r7
 800a644:	eb04 0803 	add.w	r8, r4, r3
 800a648:	f000 f9ae 	bl	800a9a8 <_sbrk_r>
 800a64c:	4580      	cmp	r8, r0
 800a64e:	d13a      	bne.n	800a6c6 <_malloc_r+0xd2>
 800a650:	6821      	ldr	r1, [r4, #0]
 800a652:	3503      	adds	r5, #3
 800a654:	1a6d      	subs	r5, r5, r1
 800a656:	f025 0503 	bic.w	r5, r5, #3
 800a65a:	3508      	adds	r5, #8
 800a65c:	2d0c      	cmp	r5, #12
 800a65e:	bf38      	it	cc
 800a660:	250c      	movcc	r5, #12
 800a662:	4629      	mov	r1, r5
 800a664:	4638      	mov	r0, r7
 800a666:	f7ff ffa5 	bl	800a5b4 <sbrk_aligned>
 800a66a:	3001      	adds	r0, #1
 800a66c:	d02b      	beq.n	800a6c6 <_malloc_r+0xd2>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	442b      	add	r3, r5
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	e00e      	b.n	800a694 <_malloc_r+0xa0>
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	1b52      	subs	r2, r2, r5
 800a67a:	d41e      	bmi.n	800a6ba <_malloc_r+0xc6>
 800a67c:	2a0b      	cmp	r2, #11
 800a67e:	d916      	bls.n	800a6ae <_malloc_r+0xba>
 800a680:	1961      	adds	r1, r4, r5
 800a682:	42a3      	cmp	r3, r4
 800a684:	6025      	str	r5, [r4, #0]
 800a686:	bf18      	it	ne
 800a688:	6059      	strne	r1, [r3, #4]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	bf08      	it	eq
 800a68e:	6031      	streq	r1, [r6, #0]
 800a690:	5162      	str	r2, [r4, r5]
 800a692:	604b      	str	r3, [r1, #4]
 800a694:	4638      	mov	r0, r7
 800a696:	f104 060b 	add.w	r6, r4, #11
 800a69a:	f000 fa07 	bl	800aaac <__malloc_unlock>
 800a69e:	f026 0607 	bic.w	r6, r6, #7
 800a6a2:	1d23      	adds	r3, r4, #4
 800a6a4:	1af2      	subs	r2, r6, r3
 800a6a6:	d0b6      	beq.n	800a616 <_malloc_r+0x22>
 800a6a8:	1b9b      	subs	r3, r3, r6
 800a6aa:	50a3      	str	r3, [r4, r2]
 800a6ac:	e7b3      	b.n	800a616 <_malloc_r+0x22>
 800a6ae:	6862      	ldr	r2, [r4, #4]
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	bf0c      	ite	eq
 800a6b4:	6032      	streq	r2, [r6, #0]
 800a6b6:	605a      	strne	r2, [r3, #4]
 800a6b8:	e7ec      	b.n	800a694 <_malloc_r+0xa0>
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	6864      	ldr	r4, [r4, #4]
 800a6be:	e7b2      	b.n	800a626 <_malloc_r+0x32>
 800a6c0:	4634      	mov	r4, r6
 800a6c2:	6876      	ldr	r6, [r6, #4]
 800a6c4:	e7b9      	b.n	800a63a <_malloc_r+0x46>
 800a6c6:	230c      	movs	r3, #12
 800a6c8:	603b      	str	r3, [r7, #0]
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	f000 f9ee 	bl	800aaac <__malloc_unlock>
 800a6d0:	e7a1      	b.n	800a616 <_malloc_r+0x22>
 800a6d2:	6025      	str	r5, [r4, #0]
 800a6d4:	e7de      	b.n	800a694 <_malloc_r+0xa0>
 800a6d6:	bf00      	nop
 800a6d8:	200008b0 	.word	0x200008b0

0800a6dc <__ssputs_r>:
 800a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	688e      	ldr	r6, [r1, #8]
 800a6e2:	429e      	cmp	r6, r3
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	4690      	mov	r8, r2
 800a6ea:	461f      	mov	r7, r3
 800a6ec:	d838      	bhi.n	800a760 <__ssputs_r+0x84>
 800a6ee:	898a      	ldrh	r2, [r1, #12]
 800a6f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a6f4:	d032      	beq.n	800a75c <__ssputs_r+0x80>
 800a6f6:	6825      	ldr	r5, [r4, #0]
 800a6f8:	6909      	ldr	r1, [r1, #16]
 800a6fa:	eba5 0901 	sub.w	r9, r5, r1
 800a6fe:	6965      	ldr	r5, [r4, #20]
 800a700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a704:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a708:	3301      	adds	r3, #1
 800a70a:	444b      	add	r3, r9
 800a70c:	106d      	asrs	r5, r5, #1
 800a70e:	429d      	cmp	r5, r3
 800a710:	bf38      	it	cc
 800a712:	461d      	movcc	r5, r3
 800a714:	0553      	lsls	r3, r2, #21
 800a716:	d531      	bpl.n	800a77c <__ssputs_r+0xa0>
 800a718:	4629      	mov	r1, r5
 800a71a:	f7ff ff6b 	bl	800a5f4 <_malloc_r>
 800a71e:	4606      	mov	r6, r0
 800a720:	b950      	cbnz	r0, 800a738 <__ssputs_r+0x5c>
 800a722:	230c      	movs	r3, #12
 800a724:	f8ca 3000 	str.w	r3, [sl]
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72e:	81a3      	strh	r3, [r4, #12]
 800a730:	f04f 30ff 	mov.w	r0, #4294967295
 800a734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a738:	6921      	ldr	r1, [r4, #16]
 800a73a:	464a      	mov	r2, r9
 800a73c:	f7ff fa08 	bl	8009b50 <memcpy>
 800a740:	89a3      	ldrh	r3, [r4, #12]
 800a742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74a:	81a3      	strh	r3, [r4, #12]
 800a74c:	6126      	str	r6, [r4, #16]
 800a74e:	6165      	str	r5, [r4, #20]
 800a750:	444e      	add	r6, r9
 800a752:	eba5 0509 	sub.w	r5, r5, r9
 800a756:	6026      	str	r6, [r4, #0]
 800a758:	60a5      	str	r5, [r4, #8]
 800a75a:	463e      	mov	r6, r7
 800a75c:	42be      	cmp	r6, r7
 800a75e:	d900      	bls.n	800a762 <__ssputs_r+0x86>
 800a760:	463e      	mov	r6, r7
 800a762:	6820      	ldr	r0, [r4, #0]
 800a764:	4632      	mov	r2, r6
 800a766:	4641      	mov	r1, r8
 800a768:	f000 f980 	bl	800aa6c <memmove>
 800a76c:	68a3      	ldr	r3, [r4, #8]
 800a76e:	1b9b      	subs	r3, r3, r6
 800a770:	60a3      	str	r3, [r4, #8]
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4433      	add	r3, r6
 800a776:	6023      	str	r3, [r4, #0]
 800a778:	2000      	movs	r0, #0
 800a77a:	e7db      	b.n	800a734 <__ssputs_r+0x58>
 800a77c:	462a      	mov	r2, r5
 800a77e:	f000 f99b 	bl	800aab8 <_realloc_r>
 800a782:	4606      	mov	r6, r0
 800a784:	2800      	cmp	r0, #0
 800a786:	d1e1      	bne.n	800a74c <__ssputs_r+0x70>
 800a788:	6921      	ldr	r1, [r4, #16]
 800a78a:	4650      	mov	r0, sl
 800a78c:	f7ff fec6 	bl	800a51c <_free_r>
 800a790:	e7c7      	b.n	800a722 <__ssputs_r+0x46>
	...

0800a794 <_svfiprintf_r>:
 800a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	4698      	mov	r8, r3
 800a79a:	898b      	ldrh	r3, [r1, #12]
 800a79c:	061b      	lsls	r3, r3, #24
 800a79e:	b09d      	sub	sp, #116	; 0x74
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460d      	mov	r5, r1
 800a7a4:	4614      	mov	r4, r2
 800a7a6:	d50e      	bpl.n	800a7c6 <_svfiprintf_r+0x32>
 800a7a8:	690b      	ldr	r3, [r1, #16]
 800a7aa:	b963      	cbnz	r3, 800a7c6 <_svfiprintf_r+0x32>
 800a7ac:	2140      	movs	r1, #64	; 0x40
 800a7ae:	f7ff ff21 	bl	800a5f4 <_malloc_r>
 800a7b2:	6028      	str	r0, [r5, #0]
 800a7b4:	6128      	str	r0, [r5, #16]
 800a7b6:	b920      	cbnz	r0, 800a7c2 <_svfiprintf_r+0x2e>
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	603b      	str	r3, [r7, #0]
 800a7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c0:	e0d1      	b.n	800a966 <_svfiprintf_r+0x1d2>
 800a7c2:	2340      	movs	r3, #64	; 0x40
 800a7c4:	616b      	str	r3, [r5, #20]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ca:	2320      	movs	r3, #32
 800a7cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7d4:	2330      	movs	r3, #48	; 0x30
 800a7d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a980 <_svfiprintf_r+0x1ec>
 800a7da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7de:	f04f 0901 	mov.w	r9, #1
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	469a      	mov	sl, r3
 800a7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ea:	b10a      	cbz	r2, 800a7f0 <_svfiprintf_r+0x5c>
 800a7ec:	2a25      	cmp	r2, #37	; 0x25
 800a7ee:	d1f9      	bne.n	800a7e4 <_svfiprintf_r+0x50>
 800a7f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a7f4:	d00b      	beq.n	800a80e <_svfiprintf_r+0x7a>
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	4622      	mov	r2, r4
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff ff6d 	bl	800a6dc <__ssputs_r>
 800a802:	3001      	adds	r0, #1
 800a804:	f000 80aa 	beq.w	800a95c <_svfiprintf_r+0x1c8>
 800a808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a80a:	445a      	add	r2, fp
 800a80c:	9209      	str	r2, [sp, #36]	; 0x24
 800a80e:	f89a 3000 	ldrb.w	r3, [sl]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80a2 	beq.w	800a95c <_svfiprintf_r+0x1c8>
 800a818:	2300      	movs	r3, #0
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295
 800a81e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a822:	f10a 0a01 	add.w	sl, sl, #1
 800a826:	9304      	str	r3, [sp, #16]
 800a828:	9307      	str	r3, [sp, #28]
 800a82a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a82e:	931a      	str	r3, [sp, #104]	; 0x68
 800a830:	4654      	mov	r4, sl
 800a832:	2205      	movs	r2, #5
 800a834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a838:	4851      	ldr	r0, [pc, #324]	; (800a980 <_svfiprintf_r+0x1ec>)
 800a83a:	f7f5 fcd9 	bl	80001f0 <memchr>
 800a83e:	9a04      	ldr	r2, [sp, #16]
 800a840:	b9d8      	cbnz	r0, 800a87a <_svfiprintf_r+0xe6>
 800a842:	06d0      	lsls	r0, r2, #27
 800a844:	bf44      	itt	mi
 800a846:	2320      	movmi	r3, #32
 800a848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a84c:	0711      	lsls	r1, r2, #28
 800a84e:	bf44      	itt	mi
 800a850:	232b      	movmi	r3, #43	; 0x2b
 800a852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a856:	f89a 3000 	ldrb.w	r3, [sl]
 800a85a:	2b2a      	cmp	r3, #42	; 0x2a
 800a85c:	d015      	beq.n	800a88a <_svfiprintf_r+0xf6>
 800a85e:	9a07      	ldr	r2, [sp, #28]
 800a860:	4654      	mov	r4, sl
 800a862:	2000      	movs	r0, #0
 800a864:	f04f 0c0a 	mov.w	ip, #10
 800a868:	4621      	mov	r1, r4
 800a86a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a86e:	3b30      	subs	r3, #48	; 0x30
 800a870:	2b09      	cmp	r3, #9
 800a872:	d94e      	bls.n	800a912 <_svfiprintf_r+0x17e>
 800a874:	b1b0      	cbz	r0, 800a8a4 <_svfiprintf_r+0x110>
 800a876:	9207      	str	r2, [sp, #28]
 800a878:	e014      	b.n	800a8a4 <_svfiprintf_r+0x110>
 800a87a:	eba0 0308 	sub.w	r3, r0, r8
 800a87e:	fa09 f303 	lsl.w	r3, r9, r3
 800a882:	4313      	orrs	r3, r2
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	46a2      	mov	sl, r4
 800a888:	e7d2      	b.n	800a830 <_svfiprintf_r+0x9c>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	1d19      	adds	r1, r3, #4
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	9103      	str	r1, [sp, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	bfbb      	ittet	lt
 800a896:	425b      	neglt	r3, r3
 800a898:	f042 0202 	orrlt.w	r2, r2, #2
 800a89c:	9307      	strge	r3, [sp, #28]
 800a89e:	9307      	strlt	r3, [sp, #28]
 800a8a0:	bfb8      	it	lt
 800a8a2:	9204      	strlt	r2, [sp, #16]
 800a8a4:	7823      	ldrb	r3, [r4, #0]
 800a8a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a8a8:	d10c      	bne.n	800a8c4 <_svfiprintf_r+0x130>
 800a8aa:	7863      	ldrb	r3, [r4, #1]
 800a8ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ae:	d135      	bne.n	800a91c <_svfiprintf_r+0x188>
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	1d1a      	adds	r2, r3, #4
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	9203      	str	r2, [sp, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	bfb8      	it	lt
 800a8bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8c0:	3402      	adds	r4, #2
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a990 <_svfiprintf_r+0x1fc>
 800a8c8:	7821      	ldrb	r1, [r4, #0]
 800a8ca:	2203      	movs	r2, #3
 800a8cc:	4650      	mov	r0, sl
 800a8ce:	f7f5 fc8f 	bl	80001f0 <memchr>
 800a8d2:	b140      	cbz	r0, 800a8e6 <_svfiprintf_r+0x152>
 800a8d4:	2340      	movs	r3, #64	; 0x40
 800a8d6:	eba0 000a 	sub.w	r0, r0, sl
 800a8da:	fa03 f000 	lsl.w	r0, r3, r0
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	4303      	orrs	r3, r0
 800a8e2:	3401      	adds	r4, #1
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ea:	4826      	ldr	r0, [pc, #152]	; (800a984 <_svfiprintf_r+0x1f0>)
 800a8ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8f0:	2206      	movs	r2, #6
 800a8f2:	f7f5 fc7d 	bl	80001f0 <memchr>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d038      	beq.n	800a96c <_svfiprintf_r+0x1d8>
 800a8fa:	4b23      	ldr	r3, [pc, #140]	; (800a988 <_svfiprintf_r+0x1f4>)
 800a8fc:	bb1b      	cbnz	r3, 800a946 <_svfiprintf_r+0x1b2>
 800a8fe:	9b03      	ldr	r3, [sp, #12]
 800a900:	3307      	adds	r3, #7
 800a902:	f023 0307 	bic.w	r3, r3, #7
 800a906:	3308      	adds	r3, #8
 800a908:	9303      	str	r3, [sp, #12]
 800a90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90c:	4433      	add	r3, r6
 800a90e:	9309      	str	r3, [sp, #36]	; 0x24
 800a910:	e767      	b.n	800a7e2 <_svfiprintf_r+0x4e>
 800a912:	fb0c 3202 	mla	r2, ip, r2, r3
 800a916:	460c      	mov	r4, r1
 800a918:	2001      	movs	r0, #1
 800a91a:	e7a5      	b.n	800a868 <_svfiprintf_r+0xd4>
 800a91c:	2300      	movs	r3, #0
 800a91e:	3401      	adds	r4, #1
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	4619      	mov	r1, r3
 800a924:	f04f 0c0a 	mov.w	ip, #10
 800a928:	4620      	mov	r0, r4
 800a92a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a92e:	3a30      	subs	r2, #48	; 0x30
 800a930:	2a09      	cmp	r2, #9
 800a932:	d903      	bls.n	800a93c <_svfiprintf_r+0x1a8>
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0c5      	beq.n	800a8c4 <_svfiprintf_r+0x130>
 800a938:	9105      	str	r1, [sp, #20]
 800a93a:	e7c3      	b.n	800a8c4 <_svfiprintf_r+0x130>
 800a93c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a940:	4604      	mov	r4, r0
 800a942:	2301      	movs	r3, #1
 800a944:	e7f0      	b.n	800a928 <_svfiprintf_r+0x194>
 800a946:	ab03      	add	r3, sp, #12
 800a948:	9300      	str	r3, [sp, #0]
 800a94a:	462a      	mov	r2, r5
 800a94c:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <_svfiprintf_r+0x1f8>)
 800a94e:	a904      	add	r1, sp, #16
 800a950:	4638      	mov	r0, r7
 800a952:	f7fc fa47 	bl	8006de4 <_printf_float>
 800a956:	1c42      	adds	r2, r0, #1
 800a958:	4606      	mov	r6, r0
 800a95a:	d1d6      	bne.n	800a90a <_svfiprintf_r+0x176>
 800a95c:	89ab      	ldrh	r3, [r5, #12]
 800a95e:	065b      	lsls	r3, r3, #25
 800a960:	f53f af2c 	bmi.w	800a7bc <_svfiprintf_r+0x28>
 800a964:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a966:	b01d      	add	sp, #116	; 0x74
 800a968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96c:	ab03      	add	r3, sp, #12
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	462a      	mov	r2, r5
 800a972:	4b06      	ldr	r3, [pc, #24]	; (800a98c <_svfiprintf_r+0x1f8>)
 800a974:	a904      	add	r1, sp, #16
 800a976:	4638      	mov	r0, r7
 800a978:	f7fc fcd8 	bl	800732c <_printf_i>
 800a97c:	e7eb      	b.n	800a956 <_svfiprintf_r+0x1c2>
 800a97e:	bf00      	nop
 800a980:	0800c72c 	.word	0x0800c72c
 800a984:	0800c736 	.word	0x0800c736
 800a988:	08006de5 	.word	0x08006de5
 800a98c:	0800a6dd 	.word	0x0800a6dd
 800a990:	0800c732 	.word	0x0800c732
 800a994:	00000000 	.word	0x00000000

0800a998 <nan>:
 800a998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9a0 <nan+0x8>
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	00000000 	.word	0x00000000
 800a9a4:	7ff80000 	.word	0x7ff80000

0800a9a8 <_sbrk_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d06      	ldr	r5, [pc, #24]	; (800a9c4 <_sbrk_r+0x1c>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f7 fdfa 	bl	80025ac <_sbrk>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_sbrk_r+0x1a>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_sbrk_r+0x1a>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	200008b8 	.word	0x200008b8

0800a9c8 <strncmp>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	b17a      	cbz	r2, 800a9ec <strncmp+0x24>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	3901      	subs	r1, #1
 800a9d0:	1884      	adds	r4, r0, r2
 800a9d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a9d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9da:	4290      	cmp	r0, r2
 800a9dc:	d101      	bne.n	800a9e2 <strncmp+0x1a>
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	d101      	bne.n	800a9e6 <strncmp+0x1e>
 800a9e2:	1a80      	subs	r0, r0, r2
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	d1f3      	bne.n	800a9d2 <strncmp+0xa>
 800a9ea:	e7fa      	b.n	800a9e2 <strncmp+0x1a>
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	e7f9      	b.n	800a9e4 <strncmp+0x1c>

0800a9f0 <__ascii_wctomb>:
 800a9f0:	b149      	cbz	r1, 800aa06 <__ascii_wctomb+0x16>
 800a9f2:	2aff      	cmp	r2, #255	; 0xff
 800a9f4:	bf85      	ittet	hi
 800a9f6:	238a      	movhi	r3, #138	; 0x8a
 800a9f8:	6003      	strhi	r3, [r0, #0]
 800a9fa:	700a      	strbls	r2, [r1, #0]
 800a9fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa00:	bf98      	it	ls
 800aa02:	2001      	movls	r0, #1
 800aa04:	4770      	bx	lr
 800aa06:	4608      	mov	r0, r1
 800aa08:	4770      	bx	lr
	...

0800aa0c <__assert_func>:
 800aa0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa0e:	4614      	mov	r4, r2
 800aa10:	461a      	mov	r2, r3
 800aa12:	4b09      	ldr	r3, [pc, #36]	; (800aa38 <__assert_func+0x2c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4605      	mov	r5, r0
 800aa18:	68d8      	ldr	r0, [r3, #12]
 800aa1a:	b14c      	cbz	r4, 800aa30 <__assert_func+0x24>
 800aa1c:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <__assert_func+0x30>)
 800aa1e:	9100      	str	r1, [sp, #0]
 800aa20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa24:	4906      	ldr	r1, [pc, #24]	; (800aa40 <__assert_func+0x34>)
 800aa26:	462b      	mov	r3, r5
 800aa28:	f000 f80e 	bl	800aa48 <fiprintf>
 800aa2c:	f000 fa8c 	bl	800af48 <abort>
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <__assert_func+0x38>)
 800aa32:	461c      	mov	r4, r3
 800aa34:	e7f3      	b.n	800aa1e <__assert_func+0x12>
 800aa36:	bf00      	nop
 800aa38:	2000002c 	.word	0x2000002c
 800aa3c:	0800c73d 	.word	0x0800c73d
 800aa40:	0800c74a 	.word	0x0800c74a
 800aa44:	0800c778 	.word	0x0800c778

0800aa48 <fiprintf>:
 800aa48:	b40e      	push	{r1, r2, r3}
 800aa4a:	b503      	push	{r0, r1, lr}
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	ab03      	add	r3, sp, #12
 800aa50:	4805      	ldr	r0, [pc, #20]	; (800aa68 <fiprintf+0x20>)
 800aa52:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa56:	6800      	ldr	r0, [r0, #0]
 800aa58:	9301      	str	r3, [sp, #4]
 800aa5a:	f000 f885 	bl	800ab68 <_vfiprintf_r>
 800aa5e:	b002      	add	sp, #8
 800aa60:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa64:	b003      	add	sp, #12
 800aa66:	4770      	bx	lr
 800aa68:	2000002c 	.word	0x2000002c

0800aa6c <memmove>:
 800aa6c:	4288      	cmp	r0, r1
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	eb01 0402 	add.w	r4, r1, r2
 800aa74:	d902      	bls.n	800aa7c <memmove+0x10>
 800aa76:	4284      	cmp	r4, r0
 800aa78:	4623      	mov	r3, r4
 800aa7a:	d807      	bhi.n	800aa8c <memmove+0x20>
 800aa7c:	1e43      	subs	r3, r0, #1
 800aa7e:	42a1      	cmp	r1, r4
 800aa80:	d008      	beq.n	800aa94 <memmove+0x28>
 800aa82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa8a:	e7f8      	b.n	800aa7e <memmove+0x12>
 800aa8c:	4402      	add	r2, r0
 800aa8e:	4601      	mov	r1, r0
 800aa90:	428a      	cmp	r2, r1
 800aa92:	d100      	bne.n	800aa96 <memmove+0x2a>
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa9e:	e7f7      	b.n	800aa90 <memmove+0x24>

0800aaa0 <__malloc_lock>:
 800aaa0:	4801      	ldr	r0, [pc, #4]	; (800aaa8 <__malloc_lock+0x8>)
 800aaa2:	f000 bc11 	b.w	800b2c8 <__retarget_lock_acquire_recursive>
 800aaa6:	bf00      	nop
 800aaa8:	200008bc 	.word	0x200008bc

0800aaac <__malloc_unlock>:
 800aaac:	4801      	ldr	r0, [pc, #4]	; (800aab4 <__malloc_unlock+0x8>)
 800aaae:	f000 bc0c 	b.w	800b2ca <__retarget_lock_release_recursive>
 800aab2:	bf00      	nop
 800aab4:	200008bc 	.word	0x200008bc

0800aab8 <_realloc_r>:
 800aab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aabc:	4680      	mov	r8, r0
 800aabe:	4614      	mov	r4, r2
 800aac0:	460e      	mov	r6, r1
 800aac2:	b921      	cbnz	r1, 800aace <_realloc_r+0x16>
 800aac4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4611      	mov	r1, r2
 800aaca:	f7ff bd93 	b.w	800a5f4 <_malloc_r>
 800aace:	b92a      	cbnz	r2, 800aadc <_realloc_r+0x24>
 800aad0:	f7ff fd24 	bl	800a51c <_free_r>
 800aad4:	4625      	mov	r5, r4
 800aad6:	4628      	mov	r0, r5
 800aad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aadc:	f000 fc5c 	bl	800b398 <_malloc_usable_size_r>
 800aae0:	4284      	cmp	r4, r0
 800aae2:	4607      	mov	r7, r0
 800aae4:	d802      	bhi.n	800aaec <_realloc_r+0x34>
 800aae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aaea:	d812      	bhi.n	800ab12 <_realloc_r+0x5a>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4640      	mov	r0, r8
 800aaf0:	f7ff fd80 	bl	800a5f4 <_malloc_r>
 800aaf4:	4605      	mov	r5, r0
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	d0ed      	beq.n	800aad6 <_realloc_r+0x1e>
 800aafa:	42bc      	cmp	r4, r7
 800aafc:	4622      	mov	r2, r4
 800aafe:	4631      	mov	r1, r6
 800ab00:	bf28      	it	cs
 800ab02:	463a      	movcs	r2, r7
 800ab04:	f7ff f824 	bl	8009b50 <memcpy>
 800ab08:	4631      	mov	r1, r6
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7ff fd06 	bl	800a51c <_free_r>
 800ab10:	e7e1      	b.n	800aad6 <_realloc_r+0x1e>
 800ab12:	4635      	mov	r5, r6
 800ab14:	e7df      	b.n	800aad6 <_realloc_r+0x1e>

0800ab16 <__sfputc_r>:
 800ab16:	6893      	ldr	r3, [r2, #8]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	b410      	push	{r4}
 800ab1e:	6093      	str	r3, [r2, #8]
 800ab20:	da08      	bge.n	800ab34 <__sfputc_r+0x1e>
 800ab22:	6994      	ldr	r4, [r2, #24]
 800ab24:	42a3      	cmp	r3, r4
 800ab26:	db01      	blt.n	800ab2c <__sfputc_r+0x16>
 800ab28:	290a      	cmp	r1, #10
 800ab2a:	d103      	bne.n	800ab34 <__sfputc_r+0x1e>
 800ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab30:	f000 b94a 	b.w	800adc8 <__swbuf_r>
 800ab34:	6813      	ldr	r3, [r2, #0]
 800ab36:	1c58      	adds	r0, r3, #1
 800ab38:	6010      	str	r0, [r2, #0]
 800ab3a:	7019      	strb	r1, [r3, #0]
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <__sfputs_r>:
 800ab44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
 800ab4a:	4614      	mov	r4, r2
 800ab4c:	18d5      	adds	r5, r2, r3
 800ab4e:	42ac      	cmp	r4, r5
 800ab50:	d101      	bne.n	800ab56 <__sfputs_r+0x12>
 800ab52:	2000      	movs	r0, #0
 800ab54:	e007      	b.n	800ab66 <__sfputs_r+0x22>
 800ab56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5a:	463a      	mov	r2, r7
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	f7ff ffda 	bl	800ab16 <__sfputc_r>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d1f3      	bne.n	800ab4e <__sfputs_r+0xa>
 800ab66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab68 <_vfiprintf_r>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	b09d      	sub	sp, #116	; 0x74
 800ab70:	4614      	mov	r4, r2
 800ab72:	4698      	mov	r8, r3
 800ab74:	4606      	mov	r6, r0
 800ab76:	b118      	cbz	r0, 800ab80 <_vfiprintf_r+0x18>
 800ab78:	6983      	ldr	r3, [r0, #24]
 800ab7a:	b90b      	cbnz	r3, 800ab80 <_vfiprintf_r+0x18>
 800ab7c:	f000 fb06 	bl	800b18c <__sinit>
 800ab80:	4b89      	ldr	r3, [pc, #548]	; (800ada8 <_vfiprintf_r+0x240>)
 800ab82:	429d      	cmp	r5, r3
 800ab84:	d11b      	bne.n	800abbe <_vfiprintf_r+0x56>
 800ab86:	6875      	ldr	r5, [r6, #4]
 800ab88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab8a:	07d9      	lsls	r1, r3, #31
 800ab8c:	d405      	bmi.n	800ab9a <_vfiprintf_r+0x32>
 800ab8e:	89ab      	ldrh	r3, [r5, #12]
 800ab90:	059a      	lsls	r2, r3, #22
 800ab92:	d402      	bmi.n	800ab9a <_vfiprintf_r+0x32>
 800ab94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab96:	f000 fb97 	bl	800b2c8 <__retarget_lock_acquire_recursive>
 800ab9a:	89ab      	ldrh	r3, [r5, #12]
 800ab9c:	071b      	lsls	r3, r3, #28
 800ab9e:	d501      	bpl.n	800aba4 <_vfiprintf_r+0x3c>
 800aba0:	692b      	ldr	r3, [r5, #16]
 800aba2:	b9eb      	cbnz	r3, 800abe0 <_vfiprintf_r+0x78>
 800aba4:	4629      	mov	r1, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 f960 	bl	800ae6c <__swsetup_r>
 800abac:	b1c0      	cbz	r0, 800abe0 <_vfiprintf_r+0x78>
 800abae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abb0:	07dc      	lsls	r4, r3, #31
 800abb2:	d50e      	bpl.n	800abd2 <_vfiprintf_r+0x6a>
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	b01d      	add	sp, #116	; 0x74
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	4b7b      	ldr	r3, [pc, #492]	; (800adac <_vfiprintf_r+0x244>)
 800abc0:	429d      	cmp	r5, r3
 800abc2:	d101      	bne.n	800abc8 <_vfiprintf_r+0x60>
 800abc4:	68b5      	ldr	r5, [r6, #8]
 800abc6:	e7df      	b.n	800ab88 <_vfiprintf_r+0x20>
 800abc8:	4b79      	ldr	r3, [pc, #484]	; (800adb0 <_vfiprintf_r+0x248>)
 800abca:	429d      	cmp	r5, r3
 800abcc:	bf08      	it	eq
 800abce:	68f5      	ldreq	r5, [r6, #12]
 800abd0:	e7da      	b.n	800ab88 <_vfiprintf_r+0x20>
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	0598      	lsls	r0, r3, #22
 800abd6:	d4ed      	bmi.n	800abb4 <_vfiprintf_r+0x4c>
 800abd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abda:	f000 fb76 	bl	800b2ca <__retarget_lock_release_recursive>
 800abde:	e7e9      	b.n	800abb4 <_vfiprintf_r+0x4c>
 800abe0:	2300      	movs	r3, #0
 800abe2:	9309      	str	r3, [sp, #36]	; 0x24
 800abe4:	2320      	movs	r3, #32
 800abe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abea:	f8cd 800c 	str.w	r8, [sp, #12]
 800abee:	2330      	movs	r3, #48	; 0x30
 800abf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800adb4 <_vfiprintf_r+0x24c>
 800abf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abf8:	f04f 0901 	mov.w	r9, #1
 800abfc:	4623      	mov	r3, r4
 800abfe:	469a      	mov	sl, r3
 800ac00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac04:	b10a      	cbz	r2, 800ac0a <_vfiprintf_r+0xa2>
 800ac06:	2a25      	cmp	r2, #37	; 0x25
 800ac08:	d1f9      	bne.n	800abfe <_vfiprintf_r+0x96>
 800ac0a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac0e:	d00b      	beq.n	800ac28 <_vfiprintf_r+0xc0>
 800ac10:	465b      	mov	r3, fp
 800ac12:	4622      	mov	r2, r4
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f7ff ff94 	bl	800ab44 <__sfputs_r>
 800ac1c:	3001      	adds	r0, #1
 800ac1e:	f000 80aa 	beq.w	800ad76 <_vfiprintf_r+0x20e>
 800ac22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac24:	445a      	add	r2, fp
 800ac26:	9209      	str	r2, [sp, #36]	; 0x24
 800ac28:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 80a2 	beq.w	800ad76 <_vfiprintf_r+0x20e>
 800ac32:	2300      	movs	r3, #0
 800ac34:	f04f 32ff 	mov.w	r2, #4294967295
 800ac38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac3c:	f10a 0a01 	add.w	sl, sl, #1
 800ac40:	9304      	str	r3, [sp, #16]
 800ac42:	9307      	str	r3, [sp, #28]
 800ac44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac48:	931a      	str	r3, [sp, #104]	; 0x68
 800ac4a:	4654      	mov	r4, sl
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac52:	4858      	ldr	r0, [pc, #352]	; (800adb4 <_vfiprintf_r+0x24c>)
 800ac54:	f7f5 facc 	bl	80001f0 <memchr>
 800ac58:	9a04      	ldr	r2, [sp, #16]
 800ac5a:	b9d8      	cbnz	r0, 800ac94 <_vfiprintf_r+0x12c>
 800ac5c:	06d1      	lsls	r1, r2, #27
 800ac5e:	bf44      	itt	mi
 800ac60:	2320      	movmi	r3, #32
 800ac62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac66:	0713      	lsls	r3, r2, #28
 800ac68:	bf44      	itt	mi
 800ac6a:	232b      	movmi	r3, #43	; 0x2b
 800ac6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac70:	f89a 3000 	ldrb.w	r3, [sl]
 800ac74:	2b2a      	cmp	r3, #42	; 0x2a
 800ac76:	d015      	beq.n	800aca4 <_vfiprintf_r+0x13c>
 800ac78:	9a07      	ldr	r2, [sp, #28]
 800ac7a:	4654      	mov	r4, sl
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f04f 0c0a 	mov.w	ip, #10
 800ac82:	4621      	mov	r1, r4
 800ac84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac88:	3b30      	subs	r3, #48	; 0x30
 800ac8a:	2b09      	cmp	r3, #9
 800ac8c:	d94e      	bls.n	800ad2c <_vfiprintf_r+0x1c4>
 800ac8e:	b1b0      	cbz	r0, 800acbe <_vfiprintf_r+0x156>
 800ac90:	9207      	str	r2, [sp, #28]
 800ac92:	e014      	b.n	800acbe <_vfiprintf_r+0x156>
 800ac94:	eba0 0308 	sub.w	r3, r0, r8
 800ac98:	fa09 f303 	lsl.w	r3, r9, r3
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	9304      	str	r3, [sp, #16]
 800aca0:	46a2      	mov	sl, r4
 800aca2:	e7d2      	b.n	800ac4a <_vfiprintf_r+0xe2>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	1d19      	adds	r1, r3, #4
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	9103      	str	r1, [sp, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	bfbb      	ittet	lt
 800acb0:	425b      	neglt	r3, r3
 800acb2:	f042 0202 	orrlt.w	r2, r2, #2
 800acb6:	9307      	strge	r3, [sp, #28]
 800acb8:	9307      	strlt	r3, [sp, #28]
 800acba:	bfb8      	it	lt
 800acbc:	9204      	strlt	r2, [sp, #16]
 800acbe:	7823      	ldrb	r3, [r4, #0]
 800acc0:	2b2e      	cmp	r3, #46	; 0x2e
 800acc2:	d10c      	bne.n	800acde <_vfiprintf_r+0x176>
 800acc4:	7863      	ldrb	r3, [r4, #1]
 800acc6:	2b2a      	cmp	r3, #42	; 0x2a
 800acc8:	d135      	bne.n	800ad36 <_vfiprintf_r+0x1ce>
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	9203      	str	r2, [sp, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	bfb8      	it	lt
 800acd6:	f04f 33ff 	movlt.w	r3, #4294967295
 800acda:	3402      	adds	r4, #2
 800acdc:	9305      	str	r3, [sp, #20]
 800acde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800adc4 <_vfiprintf_r+0x25c>
 800ace2:	7821      	ldrb	r1, [r4, #0]
 800ace4:	2203      	movs	r2, #3
 800ace6:	4650      	mov	r0, sl
 800ace8:	f7f5 fa82 	bl	80001f0 <memchr>
 800acec:	b140      	cbz	r0, 800ad00 <_vfiprintf_r+0x198>
 800acee:	2340      	movs	r3, #64	; 0x40
 800acf0:	eba0 000a 	sub.w	r0, r0, sl
 800acf4:	fa03 f000 	lsl.w	r0, r3, r0
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	4303      	orrs	r3, r0
 800acfc:	3401      	adds	r4, #1
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad04:	482c      	ldr	r0, [pc, #176]	; (800adb8 <_vfiprintf_r+0x250>)
 800ad06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad0a:	2206      	movs	r2, #6
 800ad0c:	f7f5 fa70 	bl	80001f0 <memchr>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d03f      	beq.n	800ad94 <_vfiprintf_r+0x22c>
 800ad14:	4b29      	ldr	r3, [pc, #164]	; (800adbc <_vfiprintf_r+0x254>)
 800ad16:	bb1b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x1f8>
 800ad18:	9b03      	ldr	r3, [sp, #12]
 800ad1a:	3307      	adds	r3, #7
 800ad1c:	f023 0307 	bic.w	r3, r3, #7
 800ad20:	3308      	adds	r3, #8
 800ad22:	9303      	str	r3, [sp, #12]
 800ad24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad26:	443b      	add	r3, r7
 800ad28:	9309      	str	r3, [sp, #36]	; 0x24
 800ad2a:	e767      	b.n	800abfc <_vfiprintf_r+0x94>
 800ad2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad30:	460c      	mov	r4, r1
 800ad32:	2001      	movs	r0, #1
 800ad34:	e7a5      	b.n	800ac82 <_vfiprintf_r+0x11a>
 800ad36:	2300      	movs	r3, #0
 800ad38:	3401      	adds	r4, #1
 800ad3a:	9305      	str	r3, [sp, #20]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	4620      	mov	r0, r4
 800ad44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad48:	3a30      	subs	r2, #48	; 0x30
 800ad4a:	2a09      	cmp	r2, #9
 800ad4c:	d903      	bls.n	800ad56 <_vfiprintf_r+0x1ee>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0c5      	beq.n	800acde <_vfiprintf_r+0x176>
 800ad52:	9105      	str	r1, [sp, #20]
 800ad54:	e7c3      	b.n	800acde <_vfiprintf_r+0x176>
 800ad56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e7f0      	b.n	800ad42 <_vfiprintf_r+0x1da>
 800ad60:	ab03      	add	r3, sp, #12
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	462a      	mov	r2, r5
 800ad66:	4b16      	ldr	r3, [pc, #88]	; (800adc0 <_vfiprintf_r+0x258>)
 800ad68:	a904      	add	r1, sp, #16
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f7fc f83a 	bl	8006de4 <_printf_float>
 800ad70:	4607      	mov	r7, r0
 800ad72:	1c78      	adds	r0, r7, #1
 800ad74:	d1d6      	bne.n	800ad24 <_vfiprintf_r+0x1bc>
 800ad76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad78:	07d9      	lsls	r1, r3, #31
 800ad7a:	d405      	bmi.n	800ad88 <_vfiprintf_r+0x220>
 800ad7c:	89ab      	ldrh	r3, [r5, #12]
 800ad7e:	059a      	lsls	r2, r3, #22
 800ad80:	d402      	bmi.n	800ad88 <_vfiprintf_r+0x220>
 800ad82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad84:	f000 faa1 	bl	800b2ca <__retarget_lock_release_recursive>
 800ad88:	89ab      	ldrh	r3, [r5, #12]
 800ad8a:	065b      	lsls	r3, r3, #25
 800ad8c:	f53f af12 	bmi.w	800abb4 <_vfiprintf_r+0x4c>
 800ad90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad92:	e711      	b.n	800abb8 <_vfiprintf_r+0x50>
 800ad94:	ab03      	add	r3, sp, #12
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	462a      	mov	r2, r5
 800ad9a:	4b09      	ldr	r3, [pc, #36]	; (800adc0 <_vfiprintf_r+0x258>)
 800ad9c:	a904      	add	r1, sp, #16
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7fc fac4 	bl	800732c <_printf_i>
 800ada4:	e7e4      	b.n	800ad70 <_vfiprintf_r+0x208>
 800ada6:	bf00      	nop
 800ada8:	0800c79c 	.word	0x0800c79c
 800adac:	0800c7bc 	.word	0x0800c7bc
 800adb0:	0800c77c 	.word	0x0800c77c
 800adb4:	0800c72c 	.word	0x0800c72c
 800adb8:	0800c736 	.word	0x0800c736
 800adbc:	08006de5 	.word	0x08006de5
 800adc0:	0800ab45 	.word	0x0800ab45
 800adc4:	0800c732 	.word	0x0800c732

0800adc8 <__swbuf_r>:
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	460e      	mov	r6, r1
 800adcc:	4614      	mov	r4, r2
 800adce:	4605      	mov	r5, r0
 800add0:	b118      	cbz	r0, 800adda <__swbuf_r+0x12>
 800add2:	6983      	ldr	r3, [r0, #24]
 800add4:	b90b      	cbnz	r3, 800adda <__swbuf_r+0x12>
 800add6:	f000 f9d9 	bl	800b18c <__sinit>
 800adda:	4b21      	ldr	r3, [pc, #132]	; (800ae60 <__swbuf_r+0x98>)
 800addc:	429c      	cmp	r4, r3
 800adde:	d12b      	bne.n	800ae38 <__swbuf_r+0x70>
 800ade0:	686c      	ldr	r4, [r5, #4]
 800ade2:	69a3      	ldr	r3, [r4, #24]
 800ade4:	60a3      	str	r3, [r4, #8]
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	071a      	lsls	r2, r3, #28
 800adea:	d52f      	bpl.n	800ae4c <__swbuf_r+0x84>
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	b36b      	cbz	r3, 800ae4c <__swbuf_r+0x84>
 800adf0:	6923      	ldr	r3, [r4, #16]
 800adf2:	6820      	ldr	r0, [r4, #0]
 800adf4:	1ac0      	subs	r0, r0, r3
 800adf6:	6963      	ldr	r3, [r4, #20]
 800adf8:	b2f6      	uxtb	r6, r6
 800adfa:	4283      	cmp	r3, r0
 800adfc:	4637      	mov	r7, r6
 800adfe:	dc04      	bgt.n	800ae0a <__swbuf_r+0x42>
 800ae00:	4621      	mov	r1, r4
 800ae02:	4628      	mov	r0, r5
 800ae04:	f000 f92e 	bl	800b064 <_fflush_r>
 800ae08:	bb30      	cbnz	r0, 800ae58 <__swbuf_r+0x90>
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	60a3      	str	r3, [r4, #8]
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	6022      	str	r2, [r4, #0]
 800ae16:	701e      	strb	r6, [r3, #0]
 800ae18:	6963      	ldr	r3, [r4, #20]
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	4283      	cmp	r3, r0
 800ae1e:	d004      	beq.n	800ae2a <__swbuf_r+0x62>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	07db      	lsls	r3, r3, #31
 800ae24:	d506      	bpl.n	800ae34 <__swbuf_r+0x6c>
 800ae26:	2e0a      	cmp	r6, #10
 800ae28:	d104      	bne.n	800ae34 <__swbuf_r+0x6c>
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f919 	bl	800b064 <_fflush_r>
 800ae32:	b988      	cbnz	r0, 800ae58 <__swbuf_r+0x90>
 800ae34:	4638      	mov	r0, r7
 800ae36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <__swbuf_r+0x9c>)
 800ae3a:	429c      	cmp	r4, r3
 800ae3c:	d101      	bne.n	800ae42 <__swbuf_r+0x7a>
 800ae3e:	68ac      	ldr	r4, [r5, #8]
 800ae40:	e7cf      	b.n	800ade2 <__swbuf_r+0x1a>
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <__swbuf_r+0xa0>)
 800ae44:	429c      	cmp	r4, r3
 800ae46:	bf08      	it	eq
 800ae48:	68ec      	ldreq	r4, [r5, #12]
 800ae4a:	e7ca      	b.n	800ade2 <__swbuf_r+0x1a>
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f000 f80c 	bl	800ae6c <__swsetup_r>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d0cb      	beq.n	800adf0 <__swbuf_r+0x28>
 800ae58:	f04f 37ff 	mov.w	r7, #4294967295
 800ae5c:	e7ea      	b.n	800ae34 <__swbuf_r+0x6c>
 800ae5e:	bf00      	nop
 800ae60:	0800c79c 	.word	0x0800c79c
 800ae64:	0800c7bc 	.word	0x0800c7bc
 800ae68:	0800c77c 	.word	0x0800c77c

0800ae6c <__swsetup_r>:
 800ae6c:	4b32      	ldr	r3, [pc, #200]	; (800af38 <__swsetup_r+0xcc>)
 800ae6e:	b570      	push	{r4, r5, r6, lr}
 800ae70:	681d      	ldr	r5, [r3, #0]
 800ae72:	4606      	mov	r6, r0
 800ae74:	460c      	mov	r4, r1
 800ae76:	b125      	cbz	r5, 800ae82 <__swsetup_r+0x16>
 800ae78:	69ab      	ldr	r3, [r5, #24]
 800ae7a:	b913      	cbnz	r3, 800ae82 <__swsetup_r+0x16>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f985 	bl	800b18c <__sinit>
 800ae82:	4b2e      	ldr	r3, [pc, #184]	; (800af3c <__swsetup_r+0xd0>)
 800ae84:	429c      	cmp	r4, r3
 800ae86:	d10f      	bne.n	800aea8 <__swsetup_r+0x3c>
 800ae88:	686c      	ldr	r4, [r5, #4]
 800ae8a:	89a3      	ldrh	r3, [r4, #12]
 800ae8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae90:	0719      	lsls	r1, r3, #28
 800ae92:	d42c      	bmi.n	800aeee <__swsetup_r+0x82>
 800ae94:	06dd      	lsls	r5, r3, #27
 800ae96:	d411      	bmi.n	800aebc <__swsetup_r+0x50>
 800ae98:	2309      	movs	r3, #9
 800ae9a:	6033      	str	r3, [r6, #0]
 800ae9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aea0:	81a3      	strh	r3, [r4, #12]
 800aea2:	f04f 30ff 	mov.w	r0, #4294967295
 800aea6:	e03e      	b.n	800af26 <__swsetup_r+0xba>
 800aea8:	4b25      	ldr	r3, [pc, #148]	; (800af40 <__swsetup_r+0xd4>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d101      	bne.n	800aeb2 <__swsetup_r+0x46>
 800aeae:	68ac      	ldr	r4, [r5, #8]
 800aeb0:	e7eb      	b.n	800ae8a <__swsetup_r+0x1e>
 800aeb2:	4b24      	ldr	r3, [pc, #144]	; (800af44 <__swsetup_r+0xd8>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	bf08      	it	eq
 800aeb8:	68ec      	ldreq	r4, [r5, #12]
 800aeba:	e7e6      	b.n	800ae8a <__swsetup_r+0x1e>
 800aebc:	0758      	lsls	r0, r3, #29
 800aebe:	d512      	bpl.n	800aee6 <__swsetup_r+0x7a>
 800aec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aec2:	b141      	cbz	r1, 800aed6 <__swsetup_r+0x6a>
 800aec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec8:	4299      	cmp	r1, r3
 800aeca:	d002      	beq.n	800aed2 <__swsetup_r+0x66>
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff fb25 	bl	800a51c <_free_r>
 800aed2:	2300      	movs	r3, #0
 800aed4:	6363      	str	r3, [r4, #52]	; 0x34
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	2300      	movs	r3, #0
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0308 	orr.w	r3, r3, #8
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	b94b      	cbnz	r3, 800af06 <__swsetup_r+0x9a>
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aefc:	d003      	beq.n	800af06 <__swsetup_r+0x9a>
 800aefe:	4621      	mov	r1, r4
 800af00:	4630      	mov	r0, r6
 800af02:	f000 fa09 	bl	800b318 <__smakebuf_r>
 800af06:	89a0      	ldrh	r0, [r4, #12]
 800af08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af0c:	f010 0301 	ands.w	r3, r0, #1
 800af10:	d00a      	beq.n	800af28 <__swsetup_r+0xbc>
 800af12:	2300      	movs	r3, #0
 800af14:	60a3      	str	r3, [r4, #8]
 800af16:	6963      	ldr	r3, [r4, #20]
 800af18:	425b      	negs	r3, r3
 800af1a:	61a3      	str	r3, [r4, #24]
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	b943      	cbnz	r3, 800af32 <__swsetup_r+0xc6>
 800af20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af24:	d1ba      	bne.n	800ae9c <__swsetup_r+0x30>
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	0781      	lsls	r1, r0, #30
 800af2a:	bf58      	it	pl
 800af2c:	6963      	ldrpl	r3, [r4, #20]
 800af2e:	60a3      	str	r3, [r4, #8]
 800af30:	e7f4      	b.n	800af1c <__swsetup_r+0xb0>
 800af32:	2000      	movs	r0, #0
 800af34:	e7f7      	b.n	800af26 <__swsetup_r+0xba>
 800af36:	bf00      	nop
 800af38:	2000002c 	.word	0x2000002c
 800af3c:	0800c79c 	.word	0x0800c79c
 800af40:	0800c7bc 	.word	0x0800c7bc
 800af44:	0800c77c 	.word	0x0800c77c

0800af48 <abort>:
 800af48:	b508      	push	{r3, lr}
 800af4a:	2006      	movs	r0, #6
 800af4c:	f000 fa54 	bl	800b3f8 <raise>
 800af50:	2001      	movs	r0, #1
 800af52:	f7f7 fab3 	bl	80024bc <_exit>
	...

0800af58 <__sflush_r>:
 800af58:	898a      	ldrh	r2, [r1, #12]
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	4605      	mov	r5, r0
 800af60:	0710      	lsls	r0, r2, #28
 800af62:	460c      	mov	r4, r1
 800af64:	d458      	bmi.n	800b018 <__sflush_r+0xc0>
 800af66:	684b      	ldr	r3, [r1, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dc05      	bgt.n	800af78 <__sflush_r+0x20>
 800af6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dc02      	bgt.n	800af78 <__sflush_r+0x20>
 800af72:	2000      	movs	r0, #0
 800af74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	d0f9      	beq.n	800af72 <__sflush_r+0x1a>
 800af7e:	2300      	movs	r3, #0
 800af80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af84:	682f      	ldr	r7, [r5, #0]
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	d032      	beq.n	800aff0 <__sflush_r+0x98>
 800af8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	075a      	lsls	r2, r3, #29
 800af90:	d505      	bpl.n	800af9e <__sflush_r+0x46>
 800af92:	6863      	ldr	r3, [r4, #4]
 800af94:	1ac0      	subs	r0, r0, r3
 800af96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af98:	b10b      	cbz	r3, 800af9e <__sflush_r+0x46>
 800af9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af9c:	1ac0      	subs	r0, r0, r3
 800af9e:	2300      	movs	r3, #0
 800afa0:	4602      	mov	r2, r0
 800afa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afa4:	6a21      	ldr	r1, [r4, #32]
 800afa6:	4628      	mov	r0, r5
 800afa8:	47b0      	blx	r6
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	89a3      	ldrh	r3, [r4, #12]
 800afae:	d106      	bne.n	800afbe <__sflush_r+0x66>
 800afb0:	6829      	ldr	r1, [r5, #0]
 800afb2:	291d      	cmp	r1, #29
 800afb4:	d82c      	bhi.n	800b010 <__sflush_r+0xb8>
 800afb6:	4a2a      	ldr	r2, [pc, #168]	; (800b060 <__sflush_r+0x108>)
 800afb8:	40ca      	lsrs	r2, r1
 800afba:	07d6      	lsls	r6, r2, #31
 800afbc:	d528      	bpl.n	800b010 <__sflush_r+0xb8>
 800afbe:	2200      	movs	r2, #0
 800afc0:	6062      	str	r2, [r4, #4]
 800afc2:	04d9      	lsls	r1, r3, #19
 800afc4:	6922      	ldr	r2, [r4, #16]
 800afc6:	6022      	str	r2, [r4, #0]
 800afc8:	d504      	bpl.n	800afd4 <__sflush_r+0x7c>
 800afca:	1c42      	adds	r2, r0, #1
 800afcc:	d101      	bne.n	800afd2 <__sflush_r+0x7a>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b903      	cbnz	r3, 800afd4 <__sflush_r+0x7c>
 800afd2:	6560      	str	r0, [r4, #84]	; 0x54
 800afd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afd6:	602f      	str	r7, [r5, #0]
 800afd8:	2900      	cmp	r1, #0
 800afda:	d0ca      	beq.n	800af72 <__sflush_r+0x1a>
 800afdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afe0:	4299      	cmp	r1, r3
 800afe2:	d002      	beq.n	800afea <__sflush_r+0x92>
 800afe4:	4628      	mov	r0, r5
 800afe6:	f7ff fa99 	bl	800a51c <_free_r>
 800afea:	2000      	movs	r0, #0
 800afec:	6360      	str	r0, [r4, #52]	; 0x34
 800afee:	e7c1      	b.n	800af74 <__sflush_r+0x1c>
 800aff0:	6a21      	ldr	r1, [r4, #32]
 800aff2:	2301      	movs	r3, #1
 800aff4:	4628      	mov	r0, r5
 800aff6:	47b0      	blx	r6
 800aff8:	1c41      	adds	r1, r0, #1
 800affa:	d1c7      	bne.n	800af8c <__sflush_r+0x34>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0c4      	beq.n	800af8c <__sflush_r+0x34>
 800b002:	2b1d      	cmp	r3, #29
 800b004:	d001      	beq.n	800b00a <__sflush_r+0xb2>
 800b006:	2b16      	cmp	r3, #22
 800b008:	d101      	bne.n	800b00e <__sflush_r+0xb6>
 800b00a:	602f      	str	r7, [r5, #0]
 800b00c:	e7b1      	b.n	800af72 <__sflush_r+0x1a>
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	e7ad      	b.n	800af74 <__sflush_r+0x1c>
 800b018:	690f      	ldr	r7, [r1, #16]
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	d0a9      	beq.n	800af72 <__sflush_r+0x1a>
 800b01e:	0793      	lsls	r3, r2, #30
 800b020:	680e      	ldr	r6, [r1, #0]
 800b022:	bf08      	it	eq
 800b024:	694b      	ldreq	r3, [r1, #20]
 800b026:	600f      	str	r7, [r1, #0]
 800b028:	bf18      	it	ne
 800b02a:	2300      	movne	r3, #0
 800b02c:	eba6 0807 	sub.w	r8, r6, r7
 800b030:	608b      	str	r3, [r1, #8]
 800b032:	f1b8 0f00 	cmp.w	r8, #0
 800b036:	dd9c      	ble.n	800af72 <__sflush_r+0x1a>
 800b038:	6a21      	ldr	r1, [r4, #32]
 800b03a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b03c:	4643      	mov	r3, r8
 800b03e:	463a      	mov	r2, r7
 800b040:	4628      	mov	r0, r5
 800b042:	47b0      	blx	r6
 800b044:	2800      	cmp	r0, #0
 800b046:	dc06      	bgt.n	800b056 <__sflush_r+0xfe>
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	e78e      	b.n	800af74 <__sflush_r+0x1c>
 800b056:	4407      	add	r7, r0
 800b058:	eba8 0800 	sub.w	r8, r8, r0
 800b05c:	e7e9      	b.n	800b032 <__sflush_r+0xda>
 800b05e:	bf00      	nop
 800b060:	20400001 	.word	0x20400001

0800b064 <_fflush_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	690b      	ldr	r3, [r1, #16]
 800b068:	4605      	mov	r5, r0
 800b06a:	460c      	mov	r4, r1
 800b06c:	b913      	cbnz	r3, 800b074 <_fflush_r+0x10>
 800b06e:	2500      	movs	r5, #0
 800b070:	4628      	mov	r0, r5
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	b118      	cbz	r0, 800b07e <_fflush_r+0x1a>
 800b076:	6983      	ldr	r3, [r0, #24]
 800b078:	b90b      	cbnz	r3, 800b07e <_fflush_r+0x1a>
 800b07a:	f000 f887 	bl	800b18c <__sinit>
 800b07e:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <_fflush_r+0x6c>)
 800b080:	429c      	cmp	r4, r3
 800b082:	d11b      	bne.n	800b0bc <_fflush_r+0x58>
 800b084:	686c      	ldr	r4, [r5, #4]
 800b086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0ef      	beq.n	800b06e <_fflush_r+0xa>
 800b08e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b090:	07d0      	lsls	r0, r2, #31
 800b092:	d404      	bmi.n	800b09e <_fflush_r+0x3a>
 800b094:	0599      	lsls	r1, r3, #22
 800b096:	d402      	bmi.n	800b09e <_fflush_r+0x3a>
 800b098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b09a:	f000 f915 	bl	800b2c8 <__retarget_lock_acquire_recursive>
 800b09e:	4628      	mov	r0, r5
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	f7ff ff59 	bl	800af58 <__sflush_r>
 800b0a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a8:	07da      	lsls	r2, r3, #31
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	d4e0      	bmi.n	800b070 <_fflush_r+0xc>
 800b0ae:	89a3      	ldrh	r3, [r4, #12]
 800b0b0:	059b      	lsls	r3, r3, #22
 800b0b2:	d4dd      	bmi.n	800b070 <_fflush_r+0xc>
 800b0b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0b6:	f000 f908 	bl	800b2ca <__retarget_lock_release_recursive>
 800b0ba:	e7d9      	b.n	800b070 <_fflush_r+0xc>
 800b0bc:	4b05      	ldr	r3, [pc, #20]	; (800b0d4 <_fflush_r+0x70>)
 800b0be:	429c      	cmp	r4, r3
 800b0c0:	d101      	bne.n	800b0c6 <_fflush_r+0x62>
 800b0c2:	68ac      	ldr	r4, [r5, #8]
 800b0c4:	e7df      	b.n	800b086 <_fflush_r+0x22>
 800b0c6:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <_fflush_r+0x74>)
 800b0c8:	429c      	cmp	r4, r3
 800b0ca:	bf08      	it	eq
 800b0cc:	68ec      	ldreq	r4, [r5, #12]
 800b0ce:	e7da      	b.n	800b086 <_fflush_r+0x22>
 800b0d0:	0800c79c 	.word	0x0800c79c
 800b0d4:	0800c7bc 	.word	0x0800c7bc
 800b0d8:	0800c77c 	.word	0x0800c77c

0800b0dc <std>:
 800b0dc:	2300      	movs	r3, #0
 800b0de:	b510      	push	{r4, lr}
 800b0e0:	4604      	mov	r4, r0
 800b0e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b0e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b0ea:	6083      	str	r3, [r0, #8]
 800b0ec:	8181      	strh	r1, [r0, #12]
 800b0ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b0f0:	81c2      	strh	r2, [r0, #14]
 800b0f2:	6183      	str	r3, [r0, #24]
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	2208      	movs	r2, #8
 800b0f8:	305c      	adds	r0, #92	; 0x5c
 800b0fa:	f7fb fdcb 	bl	8006c94 <memset>
 800b0fe:	4b05      	ldr	r3, [pc, #20]	; (800b114 <std+0x38>)
 800b100:	6263      	str	r3, [r4, #36]	; 0x24
 800b102:	4b05      	ldr	r3, [pc, #20]	; (800b118 <std+0x3c>)
 800b104:	62a3      	str	r3, [r4, #40]	; 0x28
 800b106:	4b05      	ldr	r3, [pc, #20]	; (800b11c <std+0x40>)
 800b108:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b10a:	4b05      	ldr	r3, [pc, #20]	; (800b120 <std+0x44>)
 800b10c:	6224      	str	r4, [r4, #32]
 800b10e:	6323      	str	r3, [r4, #48]	; 0x30
 800b110:	bd10      	pop	{r4, pc}
 800b112:	bf00      	nop
 800b114:	0800b431 	.word	0x0800b431
 800b118:	0800b453 	.word	0x0800b453
 800b11c:	0800b48b 	.word	0x0800b48b
 800b120:	0800b4af 	.word	0x0800b4af

0800b124 <_cleanup_r>:
 800b124:	4901      	ldr	r1, [pc, #4]	; (800b12c <_cleanup_r+0x8>)
 800b126:	f000 b8af 	b.w	800b288 <_fwalk_reent>
 800b12a:	bf00      	nop
 800b12c:	0800b065 	.word	0x0800b065

0800b130 <__sfmoreglue>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	2268      	movs	r2, #104	; 0x68
 800b134:	1e4d      	subs	r5, r1, #1
 800b136:	4355      	muls	r5, r2
 800b138:	460e      	mov	r6, r1
 800b13a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b13e:	f7ff fa59 	bl	800a5f4 <_malloc_r>
 800b142:	4604      	mov	r4, r0
 800b144:	b140      	cbz	r0, 800b158 <__sfmoreglue+0x28>
 800b146:	2100      	movs	r1, #0
 800b148:	e9c0 1600 	strd	r1, r6, [r0]
 800b14c:	300c      	adds	r0, #12
 800b14e:	60a0      	str	r0, [r4, #8]
 800b150:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b154:	f7fb fd9e 	bl	8006c94 <memset>
 800b158:	4620      	mov	r0, r4
 800b15a:	bd70      	pop	{r4, r5, r6, pc}

0800b15c <__sfp_lock_acquire>:
 800b15c:	4801      	ldr	r0, [pc, #4]	; (800b164 <__sfp_lock_acquire+0x8>)
 800b15e:	f000 b8b3 	b.w	800b2c8 <__retarget_lock_acquire_recursive>
 800b162:	bf00      	nop
 800b164:	200008bd 	.word	0x200008bd

0800b168 <__sfp_lock_release>:
 800b168:	4801      	ldr	r0, [pc, #4]	; (800b170 <__sfp_lock_release+0x8>)
 800b16a:	f000 b8ae 	b.w	800b2ca <__retarget_lock_release_recursive>
 800b16e:	bf00      	nop
 800b170:	200008bd 	.word	0x200008bd

0800b174 <__sinit_lock_acquire>:
 800b174:	4801      	ldr	r0, [pc, #4]	; (800b17c <__sinit_lock_acquire+0x8>)
 800b176:	f000 b8a7 	b.w	800b2c8 <__retarget_lock_acquire_recursive>
 800b17a:	bf00      	nop
 800b17c:	200008be 	.word	0x200008be

0800b180 <__sinit_lock_release>:
 800b180:	4801      	ldr	r0, [pc, #4]	; (800b188 <__sinit_lock_release+0x8>)
 800b182:	f000 b8a2 	b.w	800b2ca <__retarget_lock_release_recursive>
 800b186:	bf00      	nop
 800b188:	200008be 	.word	0x200008be

0800b18c <__sinit>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4604      	mov	r4, r0
 800b190:	f7ff fff0 	bl	800b174 <__sinit_lock_acquire>
 800b194:	69a3      	ldr	r3, [r4, #24]
 800b196:	b11b      	cbz	r3, 800b1a0 <__sinit+0x14>
 800b198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b19c:	f7ff bff0 	b.w	800b180 <__sinit_lock_release>
 800b1a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b1a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1a6:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <__sinit+0x68>)
 800b1a8:	4a13      	ldr	r2, [pc, #76]	; (800b1f8 <__sinit+0x6c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	bf04      	itt	eq
 800b1b2:	2301      	moveq	r3, #1
 800b1b4:	61a3      	streq	r3, [r4, #24]
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f000 f820 	bl	800b1fc <__sfp>
 800b1bc:	6060      	str	r0, [r4, #4]
 800b1be:	4620      	mov	r0, r4
 800b1c0:	f000 f81c 	bl	800b1fc <__sfp>
 800b1c4:	60a0      	str	r0, [r4, #8]
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	f000 f818 	bl	800b1fc <__sfp>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	60e0      	str	r0, [r4, #12]
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	6860      	ldr	r0, [r4, #4]
 800b1d4:	f7ff ff82 	bl	800b0dc <std>
 800b1d8:	68a0      	ldr	r0, [r4, #8]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	2109      	movs	r1, #9
 800b1de:	f7ff ff7d 	bl	800b0dc <std>
 800b1e2:	68e0      	ldr	r0, [r4, #12]
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	2112      	movs	r1, #18
 800b1e8:	f7ff ff78 	bl	800b0dc <std>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	61a3      	str	r3, [r4, #24]
 800b1f0:	e7d2      	b.n	800b198 <__sinit+0xc>
 800b1f2:	bf00      	nop
 800b1f4:	0800c334 	.word	0x0800c334
 800b1f8:	0800b125 	.word	0x0800b125

0800b1fc <__sfp>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	4607      	mov	r7, r0
 800b200:	f7ff ffac 	bl	800b15c <__sfp_lock_acquire>
 800b204:	4b1e      	ldr	r3, [pc, #120]	; (800b280 <__sfp+0x84>)
 800b206:	681e      	ldr	r6, [r3, #0]
 800b208:	69b3      	ldr	r3, [r6, #24]
 800b20a:	b913      	cbnz	r3, 800b212 <__sfp+0x16>
 800b20c:	4630      	mov	r0, r6
 800b20e:	f7ff ffbd 	bl	800b18c <__sinit>
 800b212:	3648      	adds	r6, #72	; 0x48
 800b214:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b218:	3b01      	subs	r3, #1
 800b21a:	d503      	bpl.n	800b224 <__sfp+0x28>
 800b21c:	6833      	ldr	r3, [r6, #0]
 800b21e:	b30b      	cbz	r3, 800b264 <__sfp+0x68>
 800b220:	6836      	ldr	r6, [r6, #0]
 800b222:	e7f7      	b.n	800b214 <__sfp+0x18>
 800b224:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b228:	b9d5      	cbnz	r5, 800b260 <__sfp+0x64>
 800b22a:	4b16      	ldr	r3, [pc, #88]	; (800b284 <__sfp+0x88>)
 800b22c:	60e3      	str	r3, [r4, #12]
 800b22e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b232:	6665      	str	r5, [r4, #100]	; 0x64
 800b234:	f000 f847 	bl	800b2c6 <__retarget_lock_init_recursive>
 800b238:	f7ff ff96 	bl	800b168 <__sfp_lock_release>
 800b23c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b240:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b244:	6025      	str	r5, [r4, #0]
 800b246:	61a5      	str	r5, [r4, #24]
 800b248:	2208      	movs	r2, #8
 800b24a:	4629      	mov	r1, r5
 800b24c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b250:	f7fb fd20 	bl	8006c94 <memset>
 800b254:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b258:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b25c:	4620      	mov	r0, r4
 800b25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b260:	3468      	adds	r4, #104	; 0x68
 800b262:	e7d9      	b.n	800b218 <__sfp+0x1c>
 800b264:	2104      	movs	r1, #4
 800b266:	4638      	mov	r0, r7
 800b268:	f7ff ff62 	bl	800b130 <__sfmoreglue>
 800b26c:	4604      	mov	r4, r0
 800b26e:	6030      	str	r0, [r6, #0]
 800b270:	2800      	cmp	r0, #0
 800b272:	d1d5      	bne.n	800b220 <__sfp+0x24>
 800b274:	f7ff ff78 	bl	800b168 <__sfp_lock_release>
 800b278:	230c      	movs	r3, #12
 800b27a:	603b      	str	r3, [r7, #0]
 800b27c:	e7ee      	b.n	800b25c <__sfp+0x60>
 800b27e:	bf00      	nop
 800b280:	0800c334 	.word	0x0800c334
 800b284:	ffff0001 	.word	0xffff0001

0800b288 <_fwalk_reent>:
 800b288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b28c:	4606      	mov	r6, r0
 800b28e:	4688      	mov	r8, r1
 800b290:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b294:	2700      	movs	r7, #0
 800b296:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b29a:	f1b9 0901 	subs.w	r9, r9, #1
 800b29e:	d505      	bpl.n	800b2ac <_fwalk_reent+0x24>
 800b2a0:	6824      	ldr	r4, [r4, #0]
 800b2a2:	2c00      	cmp	r4, #0
 800b2a4:	d1f7      	bne.n	800b296 <_fwalk_reent+0xe>
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ac:	89ab      	ldrh	r3, [r5, #12]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d907      	bls.n	800b2c2 <_fwalk_reent+0x3a>
 800b2b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	d003      	beq.n	800b2c2 <_fwalk_reent+0x3a>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4630      	mov	r0, r6
 800b2be:	47c0      	blx	r8
 800b2c0:	4307      	orrs	r7, r0
 800b2c2:	3568      	adds	r5, #104	; 0x68
 800b2c4:	e7e9      	b.n	800b29a <_fwalk_reent+0x12>

0800b2c6 <__retarget_lock_init_recursive>:
 800b2c6:	4770      	bx	lr

0800b2c8 <__retarget_lock_acquire_recursive>:
 800b2c8:	4770      	bx	lr

0800b2ca <__retarget_lock_release_recursive>:
 800b2ca:	4770      	bx	lr

0800b2cc <__swhatbuf_r>:
 800b2cc:	b570      	push	{r4, r5, r6, lr}
 800b2ce:	460e      	mov	r6, r1
 800b2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d4:	2900      	cmp	r1, #0
 800b2d6:	b096      	sub	sp, #88	; 0x58
 800b2d8:	4614      	mov	r4, r2
 800b2da:	461d      	mov	r5, r3
 800b2dc:	da08      	bge.n	800b2f0 <__swhatbuf_r+0x24>
 800b2de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	602a      	str	r2, [r5, #0]
 800b2e6:	061a      	lsls	r2, r3, #24
 800b2e8:	d410      	bmi.n	800b30c <__swhatbuf_r+0x40>
 800b2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ee:	e00e      	b.n	800b30e <__swhatbuf_r+0x42>
 800b2f0:	466a      	mov	r2, sp
 800b2f2:	f000 f903 	bl	800b4fc <_fstat_r>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	dbf1      	blt.n	800b2de <__swhatbuf_r+0x12>
 800b2fa:	9a01      	ldr	r2, [sp, #4]
 800b2fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b304:	425a      	negs	r2, r3
 800b306:	415a      	adcs	r2, r3
 800b308:	602a      	str	r2, [r5, #0]
 800b30a:	e7ee      	b.n	800b2ea <__swhatbuf_r+0x1e>
 800b30c:	2340      	movs	r3, #64	; 0x40
 800b30e:	2000      	movs	r0, #0
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	b016      	add	sp, #88	; 0x58
 800b314:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b318 <__smakebuf_r>:
 800b318:	898b      	ldrh	r3, [r1, #12]
 800b31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b31c:	079d      	lsls	r5, r3, #30
 800b31e:	4606      	mov	r6, r0
 800b320:	460c      	mov	r4, r1
 800b322:	d507      	bpl.n	800b334 <__smakebuf_r+0x1c>
 800b324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	2301      	movs	r3, #1
 800b32e:	6163      	str	r3, [r4, #20]
 800b330:	b002      	add	sp, #8
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	ab01      	add	r3, sp, #4
 800b336:	466a      	mov	r2, sp
 800b338:	f7ff ffc8 	bl	800b2cc <__swhatbuf_r>
 800b33c:	9900      	ldr	r1, [sp, #0]
 800b33e:	4605      	mov	r5, r0
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff f957 	bl	800a5f4 <_malloc_r>
 800b346:	b948      	cbnz	r0, 800b35c <__smakebuf_r+0x44>
 800b348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b34c:	059a      	lsls	r2, r3, #22
 800b34e:	d4ef      	bmi.n	800b330 <__smakebuf_r+0x18>
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	f043 0302 	orr.w	r3, r3, #2
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	e7e3      	b.n	800b324 <__smakebuf_r+0xc>
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <__smakebuf_r+0x7c>)
 800b35e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	6020      	str	r0, [r4, #0]
 800b364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	9b00      	ldr	r3, [sp, #0]
 800b36c:	6163      	str	r3, [r4, #20]
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	6120      	str	r0, [r4, #16]
 800b372:	b15b      	cbz	r3, 800b38c <__smakebuf_r+0x74>
 800b374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b378:	4630      	mov	r0, r6
 800b37a:	f000 f8d1 	bl	800b520 <_isatty_r>
 800b37e:	b128      	cbz	r0, 800b38c <__smakebuf_r+0x74>
 800b380:	89a3      	ldrh	r3, [r4, #12]
 800b382:	f023 0303 	bic.w	r3, r3, #3
 800b386:	f043 0301 	orr.w	r3, r3, #1
 800b38a:	81a3      	strh	r3, [r4, #12]
 800b38c:	89a0      	ldrh	r0, [r4, #12]
 800b38e:	4305      	orrs	r5, r0
 800b390:	81a5      	strh	r5, [r4, #12]
 800b392:	e7cd      	b.n	800b330 <__smakebuf_r+0x18>
 800b394:	0800b125 	.word	0x0800b125

0800b398 <_malloc_usable_size_r>:
 800b398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b39c:	1f18      	subs	r0, r3, #4
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bfbc      	itt	lt
 800b3a2:	580b      	ldrlt	r3, [r1, r0]
 800b3a4:	18c0      	addlt	r0, r0, r3
 800b3a6:	4770      	bx	lr

0800b3a8 <_raise_r>:
 800b3a8:	291f      	cmp	r1, #31
 800b3aa:	b538      	push	{r3, r4, r5, lr}
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	d904      	bls.n	800b3bc <_raise_r+0x14>
 800b3b2:	2316      	movs	r3, #22
 800b3b4:	6003      	str	r3, [r0, #0]
 800b3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3be:	b112      	cbz	r2, 800b3c6 <_raise_r+0x1e>
 800b3c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3c4:	b94b      	cbnz	r3, 800b3da <_raise_r+0x32>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	f000 f830 	bl	800b42c <_getpid_r>
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d6:	f000 b817 	b.w	800b408 <_kill_r>
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d00a      	beq.n	800b3f4 <_raise_r+0x4c>
 800b3de:	1c59      	adds	r1, r3, #1
 800b3e0:	d103      	bne.n	800b3ea <_raise_r+0x42>
 800b3e2:	2316      	movs	r3, #22
 800b3e4:	6003      	str	r3, [r0, #0]
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	e7e7      	b.n	800b3ba <_raise_r+0x12>
 800b3ea:	2400      	movs	r4, #0
 800b3ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	4798      	blx	r3
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	e7e0      	b.n	800b3ba <_raise_r+0x12>

0800b3f8 <raise>:
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <raise+0xc>)
 800b3fa:	4601      	mov	r1, r0
 800b3fc:	6818      	ldr	r0, [r3, #0]
 800b3fe:	f7ff bfd3 	b.w	800b3a8 <_raise_r>
 800b402:	bf00      	nop
 800b404:	2000002c 	.word	0x2000002c

0800b408 <_kill_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d07      	ldr	r5, [pc, #28]	; (800b428 <_kill_r+0x20>)
 800b40c:	2300      	movs	r3, #0
 800b40e:	4604      	mov	r4, r0
 800b410:	4608      	mov	r0, r1
 800b412:	4611      	mov	r1, r2
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	f7f7 f841 	bl	800249c <_kill>
 800b41a:	1c43      	adds	r3, r0, #1
 800b41c:	d102      	bne.n	800b424 <_kill_r+0x1c>
 800b41e:	682b      	ldr	r3, [r5, #0]
 800b420:	b103      	cbz	r3, 800b424 <_kill_r+0x1c>
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	bd38      	pop	{r3, r4, r5, pc}
 800b426:	bf00      	nop
 800b428:	200008b8 	.word	0x200008b8

0800b42c <_getpid_r>:
 800b42c:	f7f7 b82e 	b.w	800248c <_getpid>

0800b430 <__sread>:
 800b430:	b510      	push	{r4, lr}
 800b432:	460c      	mov	r4, r1
 800b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b438:	f000 f894 	bl	800b564 <_read_r>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	bfab      	itete	ge
 800b440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b442:	89a3      	ldrhlt	r3, [r4, #12]
 800b444:	181b      	addge	r3, r3, r0
 800b446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b44a:	bfac      	ite	ge
 800b44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b44e:	81a3      	strhlt	r3, [r4, #12]
 800b450:	bd10      	pop	{r4, pc}

0800b452 <__swrite>:
 800b452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b456:	461f      	mov	r7, r3
 800b458:	898b      	ldrh	r3, [r1, #12]
 800b45a:	05db      	lsls	r3, r3, #23
 800b45c:	4605      	mov	r5, r0
 800b45e:	460c      	mov	r4, r1
 800b460:	4616      	mov	r6, r2
 800b462:	d505      	bpl.n	800b470 <__swrite+0x1e>
 800b464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b468:	2302      	movs	r3, #2
 800b46a:	2200      	movs	r2, #0
 800b46c:	f000 f868 	bl	800b540 <_lseek_r>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b47a:	81a3      	strh	r3, [r4, #12]
 800b47c:	4632      	mov	r2, r6
 800b47e:	463b      	mov	r3, r7
 800b480:	4628      	mov	r0, r5
 800b482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b486:	f000 b817 	b.w	800b4b8 <_write_r>

0800b48a <__sseek>:
 800b48a:	b510      	push	{r4, lr}
 800b48c:	460c      	mov	r4, r1
 800b48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b492:	f000 f855 	bl	800b540 <_lseek_r>
 800b496:	1c43      	adds	r3, r0, #1
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	bf15      	itete	ne
 800b49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4a6:	81a3      	strheq	r3, [r4, #12]
 800b4a8:	bf18      	it	ne
 800b4aa:	81a3      	strhne	r3, [r4, #12]
 800b4ac:	bd10      	pop	{r4, pc}

0800b4ae <__sclose>:
 800b4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b2:	f000 b813 	b.w	800b4dc <_close_r>
	...

0800b4b8 <_write_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d07      	ldr	r5, [pc, #28]	; (800b4d8 <_write_r+0x20>)
 800b4bc:	4604      	mov	r4, r0
 800b4be:	4608      	mov	r0, r1
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	602a      	str	r2, [r5, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f7f7 f81f 	bl	800250a <_write>
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	d102      	bne.n	800b4d6 <_write_r+0x1e>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	b103      	cbz	r3, 800b4d6 <_write_r+0x1e>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	200008b8 	.word	0x200008b8

0800b4dc <_close_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d06      	ldr	r5, [pc, #24]	; (800b4f8 <_close_r+0x1c>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	602b      	str	r3, [r5, #0]
 800b4e8:	f7f7 f82b 	bl	8002542 <_close>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_close_r+0x1a>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_close_r+0x1a>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	200008b8 	.word	0x200008b8

0800b4fc <_fstat_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d07      	ldr	r5, [pc, #28]	; (800b51c <_fstat_r+0x20>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	4611      	mov	r1, r2
 800b508:	602b      	str	r3, [r5, #0]
 800b50a:	f7f7 f826 	bl	800255a <_fstat>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d102      	bne.n	800b518 <_fstat_r+0x1c>
 800b512:	682b      	ldr	r3, [r5, #0]
 800b514:	b103      	cbz	r3, 800b518 <_fstat_r+0x1c>
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	bd38      	pop	{r3, r4, r5, pc}
 800b51a:	bf00      	nop
 800b51c:	200008b8 	.word	0x200008b8

0800b520 <_isatty_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	; (800b53c <_isatty_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f7 f825 	bl	800257a <_isatty>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_isatty_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_isatty_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200008b8 	.word	0x200008b8

0800b540 <_lseek_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	; (800b560 <_lseek_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f7 f81e 	bl	8002590 <_lseek>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_lseek_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_lseek_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	200008b8 	.word	0x200008b8

0800b564 <_read_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	; (800b584 <_read_r+0x20>)
 800b568:	4604      	mov	r4, r0
 800b56a:	4608      	mov	r0, r1
 800b56c:	4611      	mov	r1, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	602a      	str	r2, [r5, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f7f6 ffac 	bl	80024d0 <_read>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_read_r+0x1e>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_read_r+0x1e>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	200008b8 	.word	0x200008b8

0800b588 <_init>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	bf00      	nop
 800b58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b58e:	bc08      	pop	{r3}
 800b590:	469e      	mov	lr, r3
 800b592:	4770      	bx	lr

0800b594 <_fini>:
 800b594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b596:	bf00      	nop
 800b598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b59a:	bc08      	pop	{r3}
 800b59c:	469e      	mov	lr, r3
 800b59e:	4770      	bx	lr
